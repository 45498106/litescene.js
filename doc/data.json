{
    "project": {},
    "files": {
        "../src/components/animator.js": {
            "name": "../src/components/animator.js",
            "modules": {},
            "classes": {
                "Rotator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/camera.js": {
            "name": "../src/components/camera.js",
            "modules": {},
            "classes": {
                "LS.Components.Camera": 1
            },
            "fors": {},
            "namespaces": {
                "LS.Components": 1
            }
        },
        "../src/components/cameraController.js": {
            "name": "../src/components/cameraController.js",
            "modules": {},
            "classes": {
                "LS.Components.CameraController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/faceTo.js": {
            "name": "../src/components/faceTo.js",
            "modules": {},
            "classes": {
                "LS.Components.FaceTo": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/followNode.js": {
            "name": "../src/components/followNode.js",
            "modules": {},
            "classes": {
                "LS.Components.FollowNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/geometricPrimitive.js": {
            "name": "../src/components/geometricPrimitive.js",
            "modules": {},
            "classes": {
                "LS.Components.GeometricPrimitive": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/graphComponents.js": {
            "name": "../src/components/graphComponents.js",
            "modules": {},
            "classes": {
                "LS.Components.GraphComponent": 1,
                "LS.Components.FXGraphComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/knobComponent.js": {
            "name": "../src/components/knobComponent.js",
            "modules": {},
            "classes": {
                "LS.Components.KnobComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/light.js": {
            "name": "../src/components/light.js",
            "modules": {},
            "classes": {
                "LS.Components.Light": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/lightFX.js": {
            "name": "../src/components/lightFX.js",
            "modules": {},
            "classes": {
                "LS.Components.LightFX": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/meshRenderer.js": {
            "name": "../src/components/meshRenderer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../src/components/nodeManipulator.js": {
            "name": "../src/components/nodeManipulator.js",
            "modules": {},
            "classes": {
                "LS.Components.NodeManipulator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/oculusController.js": {
            "name": "../src/components/oculusController.js",
            "modules": {},
            "classes": {
                "LS.Components.OculusController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/playAnimation.js": {
            "name": "../src/components/playAnimation.js",
            "modules": {},
            "classes": {
                "LS.Components.PlayAnimation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/realtimeReflector.js": {
            "name": "../src/components/realtimeReflector.js",
            "modules": {},
            "classes": {
                "LS.Components.RealtimeReflector": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/skinnedMeshRenderer.js": {
            "name": "../src/components/skinnedMeshRenderer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../src/components/spherize.js": {
            "name": "../src/components/spherize.js",
            "modules": {},
            "classes": {
                "LS.Components.Spherize": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/terrainRenderer.js": {
            "name": "../src/components/terrainRenderer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../src/components/transform.js": {
            "name": "../src/components/transform.js",
            "modules": {},
            "classes": {
                "LS.Components.Transform": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/materials/material.js": {
            "name": "../src/materials/material.js",
            "modules": {},
            "classes": {
                "LS.Material": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/render/renderInstance.js": {
            "name": "../src/render/renderInstance.js",
            "modules": {},
            "classes": {
                "LS.RenderInstance": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/render/renderOptions.js": {
            "name": "../src/render/renderOptions.js",
            "modules": {},
            "classes": {
                "LS.RenderOptions": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/render/renderer.js": {
            "name": "../src/render/renderer.js",
            "modules": {},
            "classes": {
                "LS.Renderer": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/utils/lscript.js": {
            "name": "../src/utils/lscript.js",
            "modules": {},
            "classes": {
                "LS.LScript": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/utils/wbin.js": {
            "name": "../src/utils/wbin.js",
            "modules": {},
            "classes": {
                "LS.WBin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/animation.js": {
            "name": "../src/animation.js",
            "modules": {},
            "classes": {
                "LS.Animation": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/componentContainer.js": {
            "name": "../src/componentContainer.js",
            "modules": {},
            "classes": {
                "LS.ComponentContainer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/compositePattern.js": {
            "name": "../src/compositePattern.js",
            "modules": {},
            "classes": {
                "LS.CompositePattern": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/context.js": {
            "name": "../src/context.js",
            "modules": {},
            "classes": {
                "LS.Context": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/core.js": {
            "name": "../src/core.js",
            "modules": {},
            "classes": {
                "LS.LS": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/physics.js": {
            "name": "../src/physics.js",
            "modules": {},
            "classes": {
                "LS.PhysicsInstance": 1,
                "LS.Physics": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/prefab.js": {
            "name": "../src/prefab.js",
            "modules": {},
            "classes": {
                "LS.Prefab": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/resourcesManager.js": {
            "name": "../src/resourcesManager.js",
            "modules": {},
            "classes": {
                "LS.ResourcesManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/scene.js": {
            "name": "../src/scene.js",
            "modules": {},
            "classes": {
                "LS.SceneTree": 1,
                "LS.SceneNode": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Rotator": {
            "name": "Rotator",
            "shortname": "Rotator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/components/animator.js",
            "line": 1,
            "description": "Rotator rotate a mesh over time",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.Camera": {
            "name": "LS.Components.Camera",
            "shortname": "LS.Components.Camera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/camera.js",
            "line": 3,
            "description": "Camera that contains the info about a camera",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.CameraController": {
            "name": "LS.Components.CameraController",
            "shortname": "CameraController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/cameraController.js",
            "line": 1,
            "description": "Camera controller",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.FaceTo": {
            "name": "LS.Components.FaceTo",
            "shortname": "FaceTo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/faceTo.js",
            "line": 1,
            "description": "FaceTo rotate a mesh to look at the camera or another object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.FollowNode": {
            "name": "LS.Components.FollowNode",
            "shortname": "FollowNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/followNode.js",
            "line": 1,
            "description": "FollowNode",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.GeometricPrimitive": {
            "name": "LS.Components.GeometricPrimitive",
            "shortname": "GeometricPrimitive",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/geometricPrimitive.js",
            "line": 1,
            "description": "GeometricPrimitive renders a primitive",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.GraphComponent": {
            "name": "LS.Components.GraphComponent",
            "shortname": "GraphComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/graphComponents.js",
            "line": 3,
            "description": "This component allow to integrate a behaviour graph on any object",
            "params": [
                {
                    "name": "o",
                    "description": "object with the serialized info",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.FXGraphComponent": {
            "name": "LS.Components.FXGraphComponent",
            "shortname": "FXGraphComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/graphComponents.js",
            "line": 105,
            "description": "This component allow to integrate a rendering post FX using a graph",
            "params": [
                {
                    "name": "o",
                    "description": "object with the serialized info",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.KnobComponent": {
            "name": "LS.Components.KnobComponent",
            "shortname": "KnobComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/knobComponent.js",
            "line": 1,
            "description": "KnobComponent allows to rotate a mesh like a knob",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.Light": {
            "name": "LS.Components.Light",
            "shortname": "Light",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/light.js",
            "line": 3,
            "description": "Light that contains the info about the camera",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.LightFX": {
            "name": "LS.Components.LightFX",
            "shortname": "LightFX",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/lightFX.js",
            "line": 2,
            "description": "LightFX create volumetric and flare effects to the light",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.NodeManipulator": {
            "name": "LS.Components.NodeManipulator",
            "shortname": "NodeManipulator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/nodeManipulator.js",
            "line": 1,
            "description": "Node manipulator, allows to rotate it",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.OculusController": {
            "name": "LS.Components.OculusController",
            "shortname": "OculusController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/oculusController.js",
            "line": 1,
            "description": "This component allow to integrate with Oculus Rift renderer",
            "params": [
                {
                    "name": "o",
                    "description": "object with the serialized info",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.PlayAnimation": {
            "name": "LS.Components.PlayAnimation",
            "shortname": "PlayAnimation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/playAnimation.js",
            "line": 1,
            "description": "Moves objects acording to animation",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.RealtimeReflector": {
            "name": "LS.Components.RealtimeReflector",
            "shortname": "RealtimeReflector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/realtimeReflector.js",
            "line": 1,
            "description": "Realtime Reflective surface",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.Spherize": {
            "name": "LS.Components.Spherize",
            "shortname": "Spherize",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/spherize.js",
            "line": 1,
            "description": "Spherize deforms a mesh, it is an example of a component that modifies the meshes being rendered",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.Transform": {
            "name": "LS.Components.Transform",
            "shortname": "Transform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/transform.js",
            "line": 1,
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Material": {
            "name": "LS.Material",
            "shortname": "LS.Material",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/materials/material.js",
            "line": 4,
            "description": "Material class contains all the info about how a mesh should be rendered, more in a highlevel format.\nMost of the info is Colors, factors and Textures but it can also specify a shader or some flags.\nMaterials could be shared among different objects.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.RenderInstance": {
            "name": "LS.RenderInstance",
            "shortname": "LS.RenderInstance",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/render/renderInstance.js",
            "line": 1,
            "description": "RenderInstance contains info of one object to be rendered on the scene.",
            "is_constructor": 1
        },
        "LS.RenderOptions": {
            "name": "LS.RenderOptions",
            "shortname": "RenderOptions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/render/renderOptions.js",
            "line": 1,
            "description": "It is used to store info about which passes should be applied, and what actions performed\nIt could occasionally contain info about the current pass\nit should not be associated with an scene (the same RenderOptions could be used with different scenes)",
            "is_constructor": 1
        },
        "LS.Renderer": {
            "name": "LS.Renderer",
            "shortname": "LS.Renderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/render/renderer.js",
            "line": 3,
            "description": "The Renderer is in charge of generating one frame of the scene. Contains all the passes and intermediate functions to create the frame.",
            "is_constructor": 1
        },
        "LS.LScript": {
            "name": "LS.LScript",
            "shortname": "LScript",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/utils/lscript.js",
            "line": 3,
            "description": "LScript allows to compile code during execution time having a clean context",
            "is_constructor": 1
        },
        "LS.WBin": {
            "name": "LS.WBin",
            "shortname": "WBin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/utils/wbin.js",
            "line": 26,
            "description": "WBin allows to create binary files easily (similar to WAD format). You can pack lots of resources in one file or extract them."
        },
        "LS.Animation": {
            "name": "LS.Animation",
            "shortname": "LS.Animation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/animation.js",
            "line": 2,
            "description": "An Animation is a resource that contains samples of properties over time, similar to animation curves\nValues could be associated to an specific node.\nData is contained in tracks",
            "is_constructor": 1
        },
        "LS.ComponentContainer": {
            "name": "LS.ComponentContainer",
            "shortname": "ComponentContainer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/componentContainer.js",
            "line": 20,
            "description": "ComponentContainer class allows to add component based properties to any other class",
            "is_constructor": 1
        },
        "LS.CompositePattern": {
            "name": "LS.CompositePattern",
            "shortname": "CompositePattern",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/compositePattern.js",
            "line": 2,
            "description": "CompositePattern implements the Composite Pattern, which allows to one class to contain instances of its own class\ncreating a tree-like structure.",
            "is_constructor": 1
        },
        "LS.Context": {
            "name": "LS.Context",
            "shortname": "LS.Context",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/context.js",
            "line": 1,
            "description": "Context class allows to handle the app context easily without having to glue manually all events\n\tThere is a list of options\n\t==========================\n\t- canvas: the canvas where the scene should be rendered, if not specified one will be created\n\t- container_id: string with container id where to create the canvas, width and height will be those from the container\n\t- width: the width for the canvas in case it is created without a container_id\n\t- height: the height for the canvas in case it is created without a container_id\n\t- resources: string with the path to the resources folder\n\t- shaders: string with the url to the shaders.xml file\n\t- redraw: boolean to force to render the scene constantly (useful for animated scenes)\n\tOptional callbacks to attach\n\t============================\n\t- onPreDraw: executed before drawing a frame\n\t- onDraw: executed after drawing a frame\n\t- onPreUpdate(dt): executed before updating the scene (delta_time as parameter)\n\t- onUpdate(dt): executed after updating the scene (delta_time as parameter)\n\t- onMouse(e): when a mouse event is triggered\n\t- onKey(e): when a key event is triggered",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "settings for the webgl context creation",
                    "type": "Object"
                }
            ]
        },
        "LS.LS": {
            "name": "LS.LS",
            "shortname": "LS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/core.js",
            "line": 387,
            "description": "Samples a curve and returns the resulting value",
            "itemtype": "method",
            "params": [
                {
                    "name": "values",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "minx",
                    "description": "min x value",
                    "type": "Number"
                },
                {
                    "name": "maxx",
                    "description": "max x value",
                    "type": "Number"
                },
                {
                    "name": "defaulty",
                    "description": "default y value",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "the position in the curve to sample",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            }
        },
        "LS.PhysicsInstance": {
            "name": "LS.PhysicsInstance",
            "shortname": "LS.PhysicsInstance",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/physics.js",
            "line": 3,
            "description": "PhysicsInstance contains info of one object to test physics against",
            "is_constructor": 1
        },
        "LS.Physics": {
            "name": "LS.Physics",
            "shortname": "LS.Physics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/physics.js",
            "line": 56,
            "description": "Physics is in charge of all physics testing methods",
            "is_constructor": 1
        },
        "LS.Prefab": {
            "name": "LS.Prefab",
            "shortname": "Prefab",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/prefab.js",
            "line": 2,
            "description": "A Prefab behaves as a container of something packed with resources. This allow to have in one single file\ntextures, meshes, etc.",
            "is_constructor": 1
        },
        "LS.ResourcesManager": {
            "name": "LS.ResourcesManager",
            "shortname": "ResourcesManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/resourcesManager.js",
            "line": 1,
            "description": "Static class that contains all the resources loaded, parsed and ready to use.\nIt also contains the parsers and methods in charge of processing them",
            "is_constructor": 1
        },
        "LS.SceneTree": {
            "name": "LS.SceneTree",
            "shortname": "SceneTree",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/scene.js",
            "line": 1,
            "description": "The SceneTree contains all the info about the Scene and nodes",
            "is_constructor": 1
        },
        "LS.SceneNode": {
            "name": "LS.SceneNode",
            "shortname": "SceneNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/scene.js",
            "line": 714,
            "description": "The SceneNode class represents and object in the scene\nIs the base class for all objects in the scene as meshes, lights, cameras, and so",
            "params": [
                {
                    "name": "id",
                    "description": "the id (otherwise a random one is computed)",
                    "type": "String"
                }
            ],
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "../src/components/camera.js",
            "line": 60,
            "description": "Camera type, could be Camera.PERSPECTIVE or Camera.ORTHOGRAPHIC",
            "itemtype": "property",
            "name": "type",
            "type": "Vec3",
            "default": "Camera.PERSPECTIVE;",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 76,
            "description": "The position of the camera (in local space form the node)",
            "itemtype": "property",
            "name": "eye",
            "type": "Vec3",
            "default": "[0,100,100]",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 91,
            "description": "The center where the camera points (in node space)",
            "itemtype": "property",
            "name": "center",
            "type": "Vec3",
            "default": "[0,0,0]",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 106,
            "description": "The up vector of the camera (in node space)",
            "itemtype": "property",
            "name": "up",
            "type": "Vec3",
            "default": "[0,1,0]",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 121,
            "description": "The near plane",
            "itemtype": "property",
            "name": "near",
            "type": "Number",
            "default": "1",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 137,
            "description": "The far plane",
            "itemtype": "property",
            "name": "far",
            "type": "Number",
            "default": "1000",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 153,
            "description": "The camera aspect ratio",
            "itemtype": "property",
            "name": "aspect",
            "type": "Number",
            "default": "1",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 168,
            "description": "The field of view in degrees",
            "itemtype": "property",
            "name": "fov",
            "type": "Number",
            "default": "45",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 184,
            "description": "The frustum size when working in ORTHOGRAPHIC",
            "itemtype": "property",
            "name": "frustum_size",
            "type": "Number",
            "default": "50",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 223,
            "itemtype": "method",
            "name": "lookAt",
            "params": [
                {
                    "name": "eye",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "center",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "up",
                    "description": "",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 238,
            "description": "Update matrices according to the eye,center,up,fov,aspect,...",
            "itemtype": "method",
            "name": "updateMatrices",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 516,
            "description": "Applies the camera transformation (from eye,center,up) to the node.",
            "itemtype": "method",
            "name": "updateNodeTransform",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 529,
            "description": "Converts from 3D to 2D",
            "itemtype": "method",
            "name": "project",
            "params": [
                {
                    "name": "vec",
                    "description": "3D position we want to proyect to 2D",
                    "type": "Vec3"
                },
                {
                    "name": "viewport",
                    "description": "viewport coordinates (if omited full viewport is used)",
                    "type": "Array[4]"
                },
                {
                    "name": "result",
                    "description": "where to store the result, if omited it is created",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the coordinates in 2D",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 550,
            "description": "Converts from 2D to 3D",
            "itemtype": "method",
            "name": "unproject",
            "params": [
                {
                    "name": "vec",
                    "description": "2D position we want to proyect to 3D",
                    "type": "Vec3"
                },
                {
                    "name": "viewport",
                    "description": "viewport coordinates (if omited full viewport is used)",
                    "type": "Array[4]"
                },
                {
                    "name": "result",
                    "description": "where to store the result, if omited it is created",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the coordinates in 2D",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/graphComponents.js",
            "line": 31,
            "description": "Returns the first component of this container that is of the same class",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "o",
                    "description": "object with the configuration info from a previous serialization",
                    "type": "Object"
                }
            ],
            "class": "LS.Components.GraphComponent",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/graphComponents.js",
            "line": 154,
            "description": "Returns the first component of this container that is of the same class",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "o",
                    "description": "object with the configuration info from a previous serialization",
                    "type": "Object"
                }
            ],
            "class": "LS.Components.FXGraphComponent",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/knobComponent.js",
            "line": 26,
            "description": "Configure the component getting the info from the object",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ],
            "class": "LS.Components.KnobComponent",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/knobComponent.js",
            "line": 37,
            "description": "Serialize this component)",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "object with the serialization info",
                "type": "Object"
            },
            "class": "LS.Components.KnobComponent",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 12,
            "description": "Position of the light",
            "itemtype": "property",
            "name": "position",
            "type": "{[[x,y,z]]}",
            "default": "[0,0,0]",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 19,
            "description": "Position where the light is pointing at (target)",
            "itemtype": "property",
            "name": "target",
            "type": "{[[x,y,z]]}",
            "default": "[0,0,1]",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 26,
            "description": "Up vector",
            "itemtype": "property",
            "name": "up",
            "type": "{[[x,y,z]]}",
            "default": "[0,1,0]",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 34,
            "description": "Enabled",
            "itemtype": "property",
            "name": "enabled",
            "type": "{Boolean}",
            "default": "true",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 42,
            "description": "Near distance",
            "itemtype": "property",
            "name": "near",
            "type": "{Number}",
            "default": "1",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 49,
            "description": "Far distance",
            "itemtype": "property",
            "name": "far",
            "type": "{Number}",
            "default": "1000",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 57,
            "description": "Angle for the spot light inner apperture",
            "itemtype": "property",
            "name": "angle",
            "type": "{Number}",
            "default": "45",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 64,
            "description": "Angle for the spot light outer apperture",
            "itemtype": "property",
            "name": "angle_end",
            "type": "{Number}",
            "default": "60",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 83,
            "description": "The color of the light",
            "itemtype": "property",
            "name": "color",
            "type": "{[[r,g,b]]}",
            "default": "[1,1,1]",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 90,
            "description": "The intensity of the light",
            "itemtype": "property",
            "name": "intensity",
            "type": "{Number}",
            "default": "1",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 98,
            "description": "If the light cast shadows",
            "itemtype": "property",
            "name": "cast_shadows",
            "type": "{Boolean}",
            "default": "false",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/meshRenderer.js",
            "line": 51,
            "description": "Configure from a serialized object",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "object",
                    "description": "with the serialized info",
                    "type": "Object"
                }
            ],
            "class": "LS.Components.NodeManipulator",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/meshRenderer.js",
            "line": 70,
            "description": "Serialize the object",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "object with the serialized info",
                "type": "Object"
            },
            "class": "LS.Components.NodeManipulator",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/skinnedMeshRenderer.js",
            "line": 53,
            "description": "Configure from a serialized object",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "object",
                    "description": "with the serialized info",
                    "type": "Object"
                }
            ],
            "class": "LS.Components.Spherize",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/skinnedMeshRenderer.js",
            "line": 69,
            "description": "Serialize the object",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "object with the serialized info",
                "type": "Object"
            },
            "class": "LS.Components.Spherize",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/terrainRenderer.js",
            "line": 30,
            "description": "Configure the component getting the info from the object",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/terrainRenderer.js",
            "line": 41,
            "description": "Serialize this component)",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "object with the serialization info",
                "type": "Object"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 43,
            "description": "Copy the transform from another Transform",
            "itemtype": "method",
            "name": "copyFrom",
            "params": [
                {
                    "name": "src",
                    "description": "",
                    "type": "Transform"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 53,
            "description": "Configure from a serialized object",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "object",
                    "description": "with the serialized info",
                    "type": "Object"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 80,
            "description": "Serialize the object",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "object with the serialized info",
                "type": "Object"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 95,
            "description": "Reset this transform",
            "itemtype": "method",
            "name": "identity",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 111,
            "description": "Returns the local position (its a copy)",
            "itemtype": "method",
            "name": "getPosition",
            "return": {
                "description": "the position",
                "type": "[[x,y,z]]"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 122,
            "description": "Returns the global position (its a copy)",
            "itemtype": "method",
            "name": "getGlobalPosition",
            "return": {
                "description": "the position",
                "type": "[[x,y,z]]"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 138,
            "description": "Returns the rotation in quaternion array (a copy)",
            "itemtype": "method",
            "name": "getRotation",
            "return": {
                "description": "the rotation",
                "type": "[[x,y,z,w]]"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 148,
            "description": "Returns the global rotation in quaternion array (a copy)",
            "itemtype": "method",
            "name": "getRotation",
            "return": {
                "description": "the rotation",
                "type": "[[x,y,z,w]]"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 170,
            "description": "Returns the scale (its a copy)",
            "itemtype": "method",
            "name": "getScale",
            "return": {
                "description": "the scale",
                "type": "[[x,y,z]]"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 180,
            "description": "Returns the scale in global (its a copy)",
            "itemtype": "method",
            "name": "getGlobalScale",
            "return": {
                "description": "the scale",
                "type": "[[x,y,z]]"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 201,
            "description": "update the Matrix to match the position,scale and rotation",
            "itemtype": "method",
            "name": "updateMatrix",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 212,
            "description": "updates the global matrix using the parents transformation",
            "itemtype": "method",
            "name": "updateGlobalMatrix",
            "params": [
                {
                    "name": "fast",
                    "description": "it doesnt recompute parent matrices, just uses the stored one, is faster but could create errors if the parent doesnt have its global matrix update",
                    "type": "Bool"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 227,
            "description": "Returns a copy of the local matrix of this transform (it updates the matrix automatically)",
            "itemtype": "method",
            "name": "getLocalMatrix",
            "return": {
                "description": "the matrix in array format",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 239,
            "description": "Returns the original world matrix of this transform (it updates the matrix automatically)",
            "itemtype": "method",
            "name": "getLocalMatrixRef",
            "return": {
                "description": "the matrix in array format",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 253,
            "description": "Returns a copy of the global matrix of this transform (it updates the matrix automatically)",
            "itemtype": "method",
            "name": "getGlobalMatrix",
            "return": {
                "description": "the matrix in array format",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 271,
            "description": "Returns a quaternion with all parents rotations",
            "itemtype": "method",
            "name": "getGlobalRotation",
            "return": {
                "description": "Quaternion",
                "type": "Quat"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 291,
            "description": "Returns a Matrix with all parents rotations",
            "itemtype": "method",
            "name": "getGlobalRotationMatrix",
            "return": {
                "description": "Matrix rotation",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 311,
            "description": "Returns a copy of the global matrix of this transform (it updates the matrix automatically)",
            "itemtype": "method",
            "name": "getGlobalMatrix",
            "return": {
                "description": "the matrix in array format",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 321,
            "description": "Returns the world matrix of this transform without the scale",
            "itemtype": "method",
            "name": "getMatrixWithoutScale",
            "return": {
                "description": "the matrix in array format",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 332,
            "description": "Returns the world matrix of this transform without the scale",
            "itemtype": "method",
            "name": "getMatrixWithoutRotation",
            "return": {
                "description": "the matrix in array format",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 344,
            "description": "Returns the matrix for the normals in the shader",
            "itemtype": "method",
            "name": "getNormalMatrix",
            "return": {
                "description": "the matrix in array format",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 362,
            "description": "Configure the transform from a local Matrix (do not tested carefully)",
            "itemtype": "method",
            "name": "fromMatrix",
            "params": [
                {
                    "name": "src,",
                    "description": "the matrix in array format",
                    "type": "Mat4"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 399,
            "description": "Configure the transform rotation from a vec3 Euler angles (heading,attitude,bank)",
            "itemtype": "method",
            "name": "setRotationFromEuler",
            "params": [
                {
                    "name": "src,",
                    "description": "the matrix in array format",
                    "type": "Mat4"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 411,
            "description": "sets the position",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 428,
            "description": "sets the rotation",
            "itemtype": "method",
            "name": "setRotation",
            "params": [
                {
                    "name": "rotation",
                    "description": "in quaterion format",
                    "type": "Quat"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 440,
            "description": "sets the scale",
            "itemtype": "method",
            "name": "setScale",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 457,
            "description": "translates object (addts to the position)",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 474,
            "description": "translates object in local coordinates (using the rotation and the scale)",
            "itemtype": "method",
            "name": "translateLocal",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 491,
            "description": "rotate object in world space",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle_in_deg",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "axis",
                    "description": "",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 505,
            "description": "rotate object in object space",
            "itemtype": "method",
            "name": "rotateLocal",
            "params": [
                {
                    "name": "angle_in_deg",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "axis",
                    "description": "",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 519,
            "description": "rotate object in world space using a quat",
            "itemtype": "method",
            "name": "rotateQuat",
            "params": [
                {
                    "name": "quaternion",
                    "description": "",
                    "type": "Quat"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 531,
            "description": "rotate object in world space using a quat",
            "itemtype": "method",
            "name": "rotateQuat",
            "params": [
                {
                    "name": "quaternion",
                    "description": "",
                    "type": "Quat"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 543,
            "description": "scale the object",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 560,
            "description": "This method is static (call it from Transform.interpolate)\ninterpolate the transform between two transforms and stores the result in another Transform",
            "itemtype": "method",
            "name": "interpolate",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Transform"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Transform"
                },
                {
                    "name": "factor",
                    "description": "from 0 to 1",
                    "type": "Number"
                },
                {
                    "name": "the",
                    "description": "destination",
                    "type": "Transform"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 578,
            "description": "Orients the transform to look from one position to another (overwrites scale)",
            "itemtype": "method",
            "name": "lookAt",
            "params": [
                {
                    "name": "position",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "target",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "up",
                    "description": "",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 610,
            "description": "returns the [0,0,1] vector in world space",
            "itemtype": "method",
            "name": "getFront",
            "return": {
                "description": "",
                "type": "Vec3"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 619,
            "description": "returns the [0,1,0] vector in world space",
            "itemtype": "method",
            "name": "getTop",
            "return": {
                "description": "",
                "type": "Vec3"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 628,
            "description": "returns the [1,0,0] vector in world space",
            "itemtype": "method",
            "name": "getRight",
            "return": {
                "description": "",
                "type": "Vec3"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 638,
            "description": "Applies the local transformation to a point (multiply it by the matrix)\nIf no destination is specified the transform is applied to vec",
            "itemtype": "method",
            "name": "transformPoint",
            "params": [
                {
                    "name": "point",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "destination",
                    "description": "(optional)",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 651,
            "description": "Applies the global transformation to a point (multiply it by the matrix)\nIf no destination is specified the transform is applied to vec",
            "itemtype": "method",
            "name": "transformPointGlobal",
            "params": [
                {
                    "name": "point",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "destination",
                    "description": "(optional)",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 665,
            "description": "Applies the transformation to a vector (rotate but not translate)\nIf no destination is specified the transform is applied to vec",
            "itemtype": "method",
            "name": "transformVector",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "destination",
                    "description": "(optional)",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 676,
            "description": "Applies the transformation to a vector (rotate but not translate)\nIf no destination is specified the transform is applied to vec",
            "itemtype": "method",
            "name": "transformVectorGlobal",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "destination",
                    "description": "(optional)",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 687,
            "description": "Applies the transformation using a matrix",
            "itemtype": "method",
            "name": "applyTransformMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "with the transform",
                    "type": "Mat4"
                },
                {
                    "name": "is_global",
                    "description": "(optional)",
                    "type": "Bool"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/materials/material.js",
            "line": 61,
            "description": "Surface color",
            "itemtype": "property",
            "name": "color",
            "type": "{vec3}",
            "default": "[1,1,1]",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 68,
            "description": "Opacity. It must be < 1 to enable alpha sorting. If it is <= 0 wont be visible.",
            "itemtype": "property",
            "name": "opacity",
            "type": "{number}",
            "default": "1",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 76,
            "description": "Blending mode, it could be Material.NORMAL or Material.ADDITIVE_BLENDING",
            "itemtype": "property",
            "name": "blending",
            "type": "{String}",
            "default": "Material.NORMAL",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 84,
            "description": "Ambient color: amount of ambient light reflected by the object",
            "itemtype": "property",
            "name": "ambient",
            "type": "{vec3}",
            "default": "[1,1,1]",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 91,
            "description": "Diffuse color: amount of diffuse light reflected by the object",
            "itemtype": "property",
            "name": "diffuse",
            "type": "{vec3}",
            "default": "[1,1,1]",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 98,
            "description": "Backlight factor: amount of light that can be seen through the surface.",
            "itemtype": "property",
            "name": "backlight_factor",
            "type": "{number}",
            "default": "0",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 106,
            "description": "Emissive color: amount of emissive light emited from the surface",
            "itemtype": "property",
            "name": "emissive",
            "type": "{vec3}",
            "default": "[0,0,0]",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 113,
            "description": "Specular factor: amount of specular light reflected",
            "itemtype": "property",
            "name": "specular_factor",
            "type": "{number}",
            "default": "0.1",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 120,
            "description": "Specular glossiness: the glossines (exponent) of specular light",
            "itemtype": "property",
            "name": "specular_gloss",
            "type": "{number}",
            "default": "10",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 127,
            "description": "Specular on top: if the specular spots should be on top or multiplyed by the surface color",
            "itemtype": "property",
            "name": "specular_ontop",
            "type": "{boolean}",
            "default": "false",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 134,
            "description": "How reflectance is the surface",
            "itemtype": "property",
            "name": "reflection_factor",
            "type": "{number}",
            "default": "0",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 141,
            "description": "Fresnel coeficient (exp) of reflectance",
            "itemtype": "property",
            "name": "reflection_fresnel",
            "type": "{number}",
            "default": "0",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 148,
            "description": "It controls if the reflection is interpolated or blended with the surface color",
            "itemtype": "property",
            "name": "reflection_additive",
            "type": "{boolean}",
            "default": "false",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 155,
            "description": "It controls if the reflection factor is affected by the specular factor",
            "itemtype": "property",
            "name": "reflection_specular",
            "type": "{boolean}",
            "default": "false",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 162,
            "description": "velvet color",
            "itemtype": "property",
            "name": "velvet",
            "type": "{vec3}",
            "default": "[0,0,0]",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 526,
            "description": "Configure the material getting the info from the object",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 589,
            "description": "Serialize this material",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "object with the serialization info",
                "type": "Object"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 602,
            "description": "Clone this material (keeping the class)",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "Material instance",
                "type": "Material"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 612,
            "description": "Loads and assigns a texture to a channel",
            "itemtype": "method",
            "name": "loadAndSetTexture",
            "params": [
                {
                    "name": "texture_or_filename",
                    "description": "",
                    "type": "Texture || url"
                },
                {
                    "name": "channel",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 644,
            "description": "Assigns a texture to a channel",
            "itemtype": "method",
            "name": "setTexture",
            "params": [
                {
                    "name": "texture",
                    "description": "",
                    "type": "Texture"
                },
                {
                    "name": "channel",
                    "description": "default is COLOR",
                    "type": "String"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 668,
            "description": "Returns a texture from a channel",
            "itemtype": "method",
            "name": "setTexture",
            "params": [
                {
                    "name": "channel",
                    "description": "default is COLOR",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 684,
            "description": "Collects all the resources needed by this material (textures)",
            "itemtype": "method",
            "name": "getResources",
            "params": [
                {
                    "name": "resources",
                    "description": "object where all the resources are stored",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 698,
            "description": "Loads all the textures inside this material, by sending the through the ResourcesManager",
            "itemtype": "method",
            "name": "loadTextures",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 716,
            "description": "Register this material in a materials pool to be shared with other nodes",
            "itemtype": "method",
            "name": "registerMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "name given to this material, it must be unique",
                    "type": "String"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 115,
            "description": "takes the flags on the node and update the render instance flags",
            "itemtype": "method",
            "name": "applyNodeFlags",
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 132,
            "description": "Enable flag in the flag bit field",
            "itemtype": "method",
            "name": "enableFlag",
            "params": [
                {
                    "name": "flag",
                    "description": "id",
                    "type": "Number"
                }
            ],
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 143,
            "description": "Disable flag in the flag bit field",
            "itemtype": "method",
            "name": "enableFlag",
            "params": [
                {
                    "name": "flag",
                    "description": "id",
                    "type": "Number"
                }
            ],
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 154,
            "description": "Tells if a flag is enabled",
            "itemtype": "method",
            "name": "enableFlag",
            "params": [
                {
                    "name": "flag",
                    "description": "id",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "flag value",
                "type": "Boolean"
            },
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 166,
            "description": "Updates the normal matrix using the matrix",
            "itemtype": "method",
            "name": "computeNormalMatrix",
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 178,
            "description": "Computes the instance bounding box in world space from the one in local space",
            "itemtype": "method",
            "name": "updateAABB",
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 228,
            "description": "Calls render taking into account primitive and submesh id",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "shader",
                    "description": "",
                    "type": "Shader"
                }
            ],
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 48,
            "description": "Renders the current scene to the screen",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "SceneTree"
                },
                {
                    "name": "camera",
                    "description": "",
                    "type": "Camera"
                },
                {
                    "name": "render_options",
                    "description": "",
                    "type": "RenderOptions"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 160,
            "description": "Set camera as the main scene camera",
            "itemtype": "method",
            "name": "enableCamera",
            "params": [
                {
                    "name": "camera",
                    "description": "",
                    "type": "Camera"
                },
                {
                    "name": "render_options",
                    "description": "",
                    "type": "RenderOptions"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/wbin.js",
            "line": 54,
            "description": "Allows to check if one Uint8Array contains a WBin file",
            "itemtype": "method",
            "name": "WBin.isWBin",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "UInt8Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "LS.WBin",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/wbin.js",
            "line": 69,
            "description": "Builds a WBin data stream from an object (every property of the object will be considered a lump with data)\nIt supports Numbers, Strings and TypedArrays or ArrayBuffer",
            "itemtype": "method",
            "name": "WBin.create",
            "params": [
                {
                    "name": "origin",
                    "description": "object containing all the lumps, the key will be used as lump name",
                    "type": "Object"
                },
                {
                    "name": "origin_class_name",
                    "description": "[Optional] allows to add a classname to the WBin, this is used to detect which class to instance when extracting it",
                    "type": "String"
                }
            ],
            "return": {
                "description": "all the bytes",
                "type": "Uint8Array"
            },
            "class": "LS.WBin",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/wbin.js",
            "line": 208,
            "description": "Extract the info from a Uint8Array containing WBin info and returns the object with all the lumps.\nIf the data contains info about the class to instantiate, the WBin instantiates the class and passes the data to it",
            "itemtype": "method",
            "name": "WBin.load",
            "params": [
                {
                    "name": "data_array",
                    "description": "",
                    "type": "UInt8Array"
                },
                {
                    "name": "skip_classname",
                    "description": "avoid getting the instance of the class specified in classname, and get only the lumps",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "Could be an Object with all the lumps or an instance to the class specified in the WBin data",
                "type": "*"
            },
            "class": "LS.WBin",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/wbin.js",
            "line": 288,
            "description": "Extract the header info from an ArrayBuffer (it contains version, and lumps info)",
            "itemtype": "method",
            "name": "WBin.getHeaderInfo",
            "params": [
                {
                    "name": "data_array",
                    "description": "",
                    "type": "UInt8Array"
                }
            ],
            "return": {
                "description": "Header",
                "type": "Object"
            },
            "class": "LS.WBin",
            "namespace": "LS"
        },
        {
            "file": "../src/animation.js",
            "line": 100,
            "class": "LS.Animation",
            "namespace": "LS"
        },
        {
            "file": "../src/animation.js",
            "line": 132,
            "class": "LS.Animation",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 32,
            "description": "Adds a component to this node.",
            "itemtype": "method",
            "name": "configureComponents",
            "params": [
                {
                    "name": "info",
                    "description": "object containing all the info from a previous serialization",
                    "type": "Object"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 61,
            "description": "Adds a component to this node.",
            "itemtype": "method",
            "name": "serializeComponents",
            "params": [
                {
                    "name": "o",
                    "description": "container where the components will be stored",
                    "type": "Object"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 80,
            "description": "Adds a component to this node.",
            "itemtype": "method",
            "name": "addComponent",
            "params": [
                {
                    "name": "component",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "component added",
                "type": "Object"
            },
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 102,
            "description": "Removes a component from this node.",
            "itemtype": "method",
            "name": "removeComponent",
            "params": [
                {
                    "name": "component",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 122,
            "description": "Removes all components from this node.",
            "itemtype": "method",
            "name": "removeAllComponents",
            "params": [
                {
                    "name": "component",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 134,
            "description": "Returns if the class has an instance of this component",
            "itemtype": "method",
            "name": "hasComponent",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Bool"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 149,
            "description": "Returns the first component of this container that is of the same class",
            "itemtype": "method",
            "name": "getComponent",
            "params": [
                {
                    "name": "component_class",
                    "description": "the class to search a component from (not the name of the class)",
                    "type": "Object"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 163,
            "description": "Returns the position in the components array of this component",
            "itemtype": "method",
            "name": "getIndexOfComponent",
            "params": [
                {
                    "name": "position",
                    "description": "in the array, -1 if not found",
                    "type": "Number"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 174,
            "description": "Returns the component at index position",
            "itemtype": "method",
            "name": "getComponentByIndex",
            "params": [
                {
                    "name": "component",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 185,
            "description": "executes the method with a given name in all the components",
            "itemtype": "method",
            "name": "processActionInComponents",
            "params": [
                {
                    "name": "action_name",
                    "description": "the name of the function to execute in all components (in string format)",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "object with the params to be accessed by that function",
                    "type": "Object"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 17,
            "description": "Adds one child to this instance",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "child",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "index",
                    "description": "[optional]  in which position you want to insert it, if not specified it goes to the last position",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "[optional] data to be passed when adding it, used for special cases when moving nodes around",
                    "type": "*"
                }
            ],
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 94,
            "description": "Removes the node from its parent (and from the scene tree)",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "node",
                    "description": "this child to remove",
                    "type": "Node"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "returns true if it was found and removed",
                "type": "Boolean"
            },
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 143,
            "description": "Serialize the data from all the children",
            "itemtype": "method",
            "name": "serializeChildren",
            "return": {
                "description": "array containing all serialized data from every children",
                "type": "Array"
            },
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 158,
            "description": "Configure every children with the data",
            "itemtype": "method",
            "name": "configureChildren",
            "return": {
                "description": "o array containing all serialized data",
                "type": "Array"
            },
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 177,
            "description": "Returns parent node",
            "itemtype": "method",
            "name": "getParent",
            "return": {
                "description": "parent node",
                "type": "SceneNode"
            },
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 221,
            "description": "get all nodes below this in the hierarchy (children and children of children)",
            "itemtype": "method",
            "name": "getDescendants",
            "return": {
                "description": "array containing all descendants",
                "type": "Array"
            },
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/context.js",
            "line": 68,
            "description": "Loads an scene and triggers start",
            "itemtype": "method",
            "name": "loadScene",
            "params": [
                {
                    "name": "url",
                    "description": "url to the JSON file containing all the scene info",
                    "type": "String"
                },
                {
                    "name": "on_complete",
                    "description": "callback trigged when the scene and the resources are loaded",
                    "type": "Function"
                }
            ],
            "class": "LS.Context",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 25,
            "description": "Contains all the registered components",
            "itemtype": "property",
            "name": "Components",
            "type": "{Object}",
            "default": "{}",
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 34,
            "description": "Register a component so it is listed when searching for new components to attach",
            "itemtype": "method",
            "name": "registerComponent",
            "params": [
                {
                    "name": "comp",
                    "description": "component class to register",
                    "type": "ComponentClass"
                }
            ],
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 53,
            "description": "Contains all the registered material classes",
            "itemtype": "property",
            "name": "MaterialClasses",
            "type": "{Object}",
            "default": "{}",
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 62,
            "description": "Register a component so it is listed when searching for new components to attach",
            "itemtype": "method",
            "name": "registerMaterialClass",
            "params": [
                {
                    "name": "comp",
                    "description": "component class to register",
                    "type": "ComponentClass"
                }
            ],
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 79,
            "description": "A front-end for XMLHttpRequest so it is simpler and more cross-platform",
            "itemtype": "method",
            "name": "request",
            "params": [
                {
                    "name": "request",
                    "description": "object with the fields for the request: \n\t\t\tdataType: result type {text,xml,json,binary,arraybuffer,image}, data: object with form fields, callbacks supported: {success, error, progress}",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the XMLHttpRequest of the petition",
                "type": "XMLHttpRequest"
            },
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 186,
            "description": "copy the properties (methods and attributes) of origin class into target class",
            "itemtype": "method",
            "name": "extendClass",
            "params": [
                {
                    "name": "origin",
                    "description": "",
                    "type": "Class"
                },
                {
                    "name": "target",
                    "description": "",
                    "type": "Class"
                }
            ],
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 217,
            "description": "Clones an object (no matter where the object came from)\n- It skip attributes starting with \"_\" or \"jQuery\" or functions\n- to the rest it applies JSON.parse( JSON.stringify ( obj ) )\n- use it carefully",
            "itemtype": "method",
            "name": "cloneObject",
            "params": [
                {
                    "name": "object",
                    "description": "the object to clone",
                    "type": "Object"
                },
                {
                    "name": "target=null",
                    "description": "optional, the destination object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "returns the cloned object",
                "type": "Object"
            },
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 258,
            "description": "Returns an object class name (uses the constructor toString)",
            "itemtype": "method",
            "name": "getObjectClassName",
            "params": [
                {
                    "name": "the",
                    "description": "object to see the class name",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "returns the string with the name",
                "type": "String"
            },
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 278,
            "description": "Returns an string with the class name",
            "itemtype": "method",
            "name": "getClassName",
            "params": [
                {
                    "name": "class",
                    "description": "object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "returns the string with the name",
                "type": "String"
            },
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 297,
            "description": "Returns the attributes of one object and the type",
            "itemtype": "method",
            "name": "getObjectAttributes",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "returns object with attribute name and its type",
                "type": "Object"
            },
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 423,
            "description": "Resamples a full curve in values (useful to upload to GPU array)",
            "itemtype": "method",
            "name": "resampleCurve",
            "params": [
                {
                    "name": "values",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "minx",
                    "description": "min x value",
                    "type": "Number"
                },
                {
                    "name": "maxx",
                    "description": "max x value",
                    "type": "Number"
                },
                {
                    "name": "defaulty",
                    "description": "default y value",
                    "type": "Number"
                },
                {
                    "name": "numsamples",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/physics.js",
            "line": 37,
            "description": "Computes the instance bounding box in world space from the one in local space",
            "itemtype": "method",
            "name": "updateAABB",
            "class": "LS.PhysicsInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/prefab.js",
            "line": 15,
            "description": "configure the prefab",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "LS.Prefab",
            "namespace": "LS"
        },
        {
            "file": "../src/prefab.js",
            "line": 75,
            "description": "Creates an instance of the object inside the prefab",
            "itemtype": "method",
            "name": "createObject",
            "return": {
                "description": "object contained"
            },
            "class": "LS.Prefab",
            "namespace": "LS"
        },
        {
            "file": "../src/prefab.js",
            "line": 98,
            "description": "to create a new prefab, it packs all the data an instantiates the resource",
            "itemtype": "method",
            "name": "createPrefab",
            "return": {
                "description": "object contained"
            },
            "class": "LS.Prefab",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 45,
            "description": "Returns a string to append to any url that should use the browser cache (when updating server info)",
            "itemtype": "method",
            "name": "getNoCache",
            "params": [
                {
                    "name": "force",
                    "description": "force to return a nocache string ignoring the default configuration",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "a string to attach to a url so the file wont be cached",
                "type": "String"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 55,
            "description": "Resets all the resources cached, so it frees the memory",
            "itemtype": "method",
            "name": "reset",
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 91,
            "description": "Returns the filename extension from an url",
            "itemtype": "method",
            "name": "getExtension",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "filename extension",
                "type": "String"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 110,
            "description": "Returns the filename from a full path",
            "itemtype": "method",
            "name": "getFilename",
            "params": [
                {
                    "name": "fullpath",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "filename extension",
                "type": "String"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 127,
            "description": "Returns the filename without the extension",
            "itemtype": "method",
            "name": "getBasename",
            "params": [
                {
                    "name": "fullpath",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "filename extension",
                "type": "String"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 143,
            "description": "Loads all the resources in the Object (it uses an object to store not only the filename but also the type)",
            "itemtype": "method",
            "name": "loadResources",
            "params": [
                {
                    "name": "resources",
                    "description": "contains all the resources, associated with its type",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "options to apply to the loaded resources",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                }
            ],
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 161,
            "description": "Loads a generic resource, the type will be infered from the extension, if it is json or wbin it will be processed",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "where the resource is located (if its a relative url it depends on the path attribute)",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "options to apply to the loaded image",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                },
                {
                    "name": "on_complete",
                    "description": "callback when the resource is loaded and cached",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 243,
            "description": "Process resource: transform some data in an Object ready to use and stores it (in most cases uploads it to the GPU)",
            "itemtype": "method",
            "name": "processResource",
            "params": [
                {
                    "name": "url",
                    "description": "where the resource is located (if its a relative url it depends on the path attribute)",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "the data of the resource (could be string, arraybuffer, image... )",
                    "type": "*"
                },
                {
                    "name": "options",
                    "description": "options to apply to the loaded resource",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                }
            ],
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 338,
            "description": "Stores the resource inside the manager containers. This way it will be retrieveble by anybody who needs it.",
            "itemtype": "method",
            "name": "registerResource",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "resource",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 368,
            "description": "Returns an object with a representation of the resource internal data\nThe order to obtain that object is:\n1. test for _original_file (File or Blob)\n2. test for _original_data (ArrayBuffer)\n3. toBinary() (ArrayBuffer)\n4. toBlob() (Blob)\n5. toBase64() (String)\n6. serialize() (Object in JSON format)\n7. data property \n8. JSON.stringify(...)",
            "itemtype": "method",
            "name": "computeResourceInternalData",
            "params": [
                {
                    "name": "resource",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "it has two fields: data and encoding",
                "type": "Object"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 450,
            "description": "Tells if it is loading resources",
            "itemtype": "method",
            "name": "isLoading",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 501,
            "description": "returns a mesh resource if it is loaded",
            "itemtype": "method",
            "name": "getMesh",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Mesh"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 514,
            "description": "returns a texture resource if it is loaded",
            "itemtype": "method",
            "name": "getTexture",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 44,
            "description": "This initializes the content of the scene.\nCall it to clear the scene content",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": "Returns true on success",
                "type": "Boolean"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 88,
            "description": "Clears the scene using the init function\nand trigger a \"clear\" LEvent",
            "itemtype": "method",
            "name": "clear",
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 109,
            "description": "Configure the Scene using an object (the object can be obtained from the function serialize)\nInserts the nodes, configure them, and change the parameters",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "scene_info",
                    "description": "the object containing all the info about the nodes and config of the scene",
                    "type": "Object"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 192,
            "description": "Creates and object containing all the info about the scene and nodes.\nThe oposite of configure.\nIt calls the serialize method in every node",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "return a JS Object with all the scene info",
                "type": "Object"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 239,
            "description": "loads a Scene from an Ajax call and pass it to the configure method.",
            "itemtype": "method",
            "name": "loadScene",
            "params": [
                {
                    "name": "url",
                    "description": "where the JSON object containing the scene is stored",
                    "type": "String"
                },
                {
                    "name": "on_complete",
                    "description": "the callback to call when the loading is complete",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "on_error",
                    "description": "the callback to call if there is a  loading error",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 387,
            "description": "retrieves a Node",
            "itemtype": "method",
            "name": "getNode",
            "params": [
                {
                    "name": "id",
                    "description": "node id",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the node or null if it didnt find it",
                "type": "Object"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 415,
            "description": "retrieves a Node",
            "itemtype": "method",
            "name": "getNodeByUid",
            "params": [
                {
                    "name": "uid",
                    "description": "number",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the node or null if it didnt find it",
                "type": "Object"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 433,
            "description": "retrieves a Node by its index",
            "itemtype": "method",
            "name": "getNodeByIndex",
            "params": [
                {
                    "name": "node",
                    "description": "index",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "returns the node at the 'index' position in the nodes array",
                "type": "Object"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 447,
            "description": "retrieves a Node index",
            "itemtype": "method",
            "name": "getNodeIndex",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "returns the node index in the nodes array",
                "type": "Number"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 461,
            "description": "retrieves a Node",
            "itemtype": "method",
            "name": "getNodesByClass",
            "params": [
                {
                    "name": "className",
                    "description": "class name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "returns all the nodes that match this class name",
                "type": "Object"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 481,
            "description": "loads all the resources of all the nodes in this scene\nit sends a signal to every node to get all the resources info\nand load them in bulk using the ResourceManager",
            "itemtype": "method",
            "name": "loadResources",
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 533,
            "description": "start the scene (triggers and start event)",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "dt",
                    "description": "delta time",
                    "type": "Number"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 549,
            "description": "stop the scene (triggers and start event)",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "dt",
                    "description": "delta time",
                    "type": "Number"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 565,
            "description": "renders the scene using the assigned renderer",
            "itemtype": "method",
            "name": "render",
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 662,
            "description": "dispatch event to all nodes in the scene",
            "itemtype": "method",
            "name": "sendEventToNodes",
            "params": [
                {
                    "name": "event_type",
                    "description": "event type name",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "data to send associated to the event",
                    "type": "Object"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 762,
            "description": "changes the node id (its better to do not change the id, it can lead to unexpected results)\nremember that two nodes can't have the same id",
            "itemtype": "method",
            "name": "setId",
            "params": [
                {
                    "name": "new_id",
                    "description": "the new id",
                    "type": "String"
                }
            ],
            "return": {
                "description": "returns true if the name changed",
                "type": "Object"
            },
            "class": "LS.SceneNode",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 940,
            "description": "remember clones this node and returns the new copy (you need to add it to the scene to see it)",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "returns a cloned version of this node",
                "type": "Object"
            },
            "class": "LS.SceneNode",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 972,
            "description": "Configure this node from an object containing the info",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "info",
                    "description": "the object with all the info (comes from the serialize method)",
                    "type": "Object"
                }
            ],
            "class": "LS.SceneNode",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1059,
            "description": "Serializes this node by creating an object with all the info\nit contains info about the components too",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "returns the object with the info",
                "type": "Object"
            },
            "class": "LS.SceneNode",
            "namespace": "LS"
        }
    ],
    "warnings": [
        {
            "message": "param name missing: {bool}",
            "line": " ../src/componentContainer.js:134"
        },
        {
            "message": "Missing item type",
            "line": " ../src/animation.js:100"
        },
        {
            "message": "Missing item type",
            "line": " ../src/animation.js:132"
        }
    ]
}