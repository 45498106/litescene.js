{
    "project": {},
    "files": {
        "../src/components/VRCameraController.js": {
            "name": "../src/components/VRCameraController.js",
            "modules": {},
            "classes": {
                "VRCameraController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/animator.js": {
            "name": "../src/components/animator.js",
            "modules": {},
            "classes": {
                "Rotator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/camera.js": {
            "name": "../src/components/camera.js",
            "modules": {},
            "classes": {
                "LS.Components.Camera": 1
            },
            "fors": {},
            "namespaces": {
                "LS.Components": 1
            }
        },
        "../src/components/cameraController.js": {
            "name": "../src/components/cameraController.js",
            "modules": {},
            "classes": {
                "LS.Components.CameraController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/cameraFX.js": {
            "name": "../src/components/cameraFX.js",
            "modules": {},
            "classes": {
                "LS.Components.CameraFX": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/customData.js": {
            "name": "../src/components/customData.js",
            "modules": {},
            "classes": {
                "LS.Components.CustomData": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/followNode.js": {
            "name": "../src/components/followNode.js",
            "modules": {},
            "classes": {
                "LS.Components.FollowNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/geometricPrimitive.js": {
            "name": "../src/components/geometricPrimitive.js",
            "modules": {},
            "classes": {
                "LS.Components.GeometricPrimitive": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/graphComponents.js": {
            "name": "../src/components/graphComponents.js",
            "modules": {},
            "classes": {
                "LS.Components.GraphComponent": 1,
                "LS.Components.FXGraphComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/knob.js": {
            "name": "../src/components/knob.js",
            "modules": {},
            "classes": {
                "LS.Components.Knob": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/light.js": {
            "name": "../src/components/light.js",
            "modules": {},
            "classes": {
                "LS.Components.Light": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/lightFX.js": {
            "name": "../src/components/lightFX.js",
            "modules": {},
            "classes": {
                "LS.Components.LightFX": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/meshRenderer.js": {
            "name": "../src/components/meshRenderer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../src/components/nodeManipulator.js": {
            "name": "../src/components/nodeManipulator.js",
            "modules": {},
            "classes": {
                "LS.Components.NodeManipulator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/playAnimation.js": {
            "name": "../src/components/playAnimation.js",
            "modules": {},
            "classes": {
                "LS.Components.PlayAnimation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/poser.js": {
            "name": "../src/components/poser.js",
            "modules": {},
            "classes": {
                "LS.Components.Poser": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/realtimeReflector.js": {
            "name": "../src/components/realtimeReflector.js",
            "modules": {},
            "classes": {
                "LS.Components.RealtimeReflector": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/script.js": {
            "name": "../src/components/script.js",
            "modules": {},
            "classes": {
                "LS.Components.Script": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/skinnedMeshRenderer.js": {
            "name": "../src/components/skinnedMeshRenderer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../src/components/spherize.js": {
            "name": "../src/components/spherize.js",
            "modules": {},
            "classes": {
                "LS.Components.Spherize": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/target.js": {
            "name": "../src/components/target.js",
            "modules": {},
            "classes": {
                "LS.Components.Target": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/transform.js": {
            "name": "../src/components/transform.js",
            "modules": {},
            "classes": {
                "LS.Components.Transform": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/helpers/animation.js": {
            "name": "../src/helpers/animation.js",
            "modules": {},
            "classes": {
                "LS.Animation": 1,
                "LS.Animation.Track": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/helpers/prefab.js": {
            "name": "../src/helpers/prefab.js",
            "modules": {},
            "classes": {
                "LS.Prefab": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/helpers/textureFX.js": {
            "name": "../src/helpers/textureFX.js",
            "modules": {},
            "classes": {
                "LS.TextureFX": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/materials/customMaterial.js": {
            "name": "../src/materials/customMaterial.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../src/materials/graphMaterial.js": {
            "name": "../src/materials/graphMaterial.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../src/materials/material.js": {
            "name": "../src/materials/material.js",
            "modules": {},
            "classes": {
                "LS.Material": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/materials/standardMaterial.js": {
            "name": "../src/materials/standardMaterial.js",
            "modules": {},
            "classes": {
                "LS.StandardMaterial": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/materials/surfaceMaterial.js": {
            "name": "../src/materials/surfaceMaterial.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../src/render/renderInstance.js": {
            "name": "../src/render/renderInstance.js",
            "modules": {},
            "classes": {
                "LS.RenderInstance": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/render/renderSettings.js": {
            "name": "../src/render/renderSettings.js",
            "modules": {},
            "classes": {
                "LS.RenderSettings": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/render/renderer.js": {
            "name": "../src/render/renderer.js",
            "modules": {},
            "classes": {
                "LS.Renderer": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/utils/draw.js": {
            "name": "../src/utils/draw.js",
            "modules": {},
            "classes": {
                "LS.Draw": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/utils/lscript.js": {
            "name": "../src/utils/lscript.js",
            "modules": {},
            "classes": {
                "LS.LScript": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/utils/wbin.js": {
            "name": "../src/utils/wbin.js",
            "modules": {},
            "classes": {
                "LS.WBin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/component.js": {
            "name": "../src/component.js",
            "modules": {},
            "classes": {
                "LS.Component": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/componentContainer.js": {
            "name": "../src/componentContainer.js",
            "modules": {},
            "classes": {
                "LS.ComponentContainer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/compositePattern.js": {
            "name": "../src/compositePattern.js",
            "modules": {},
            "classes": {
                "LS.CompositePattern": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/core.js": {
            "name": "../src/core.js",
            "modules": {},
            "classes": {
                "LS.LSQ": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/formats.js": {
            "name": "../src/formats.js",
            "modules": {},
            "classes": {
                "LS.Formats": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/network.js": {
            "name": "../src/network.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../src/physics.js": {
            "name": "../src/physics.js",
            "modules": {},
            "classes": {
                "LS.Collision": 1,
                "LS.PhysicsInstance": 1,
                "LS.Physics": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/picking.js": {
            "name": "../src/picking.js",
            "modules": {},
            "classes": {
                "LS.Picking": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/player.js": {
            "name": "../src/player.js",
            "modules": {},
            "classes": {
                "LS.Player": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/project.js": {
            "name": "../src/project.js",
            "modules": {},
            "classes": {
                "LS.Project": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/resourcesManager.js": {
            "name": "../src/resourcesManager.js",
            "modules": {},
            "classes": {
                "LS.ResourcesManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/scene.js": {
            "name": "../src/scene.js",
            "modules": {},
            "classes": {
                "LS.SceneTree": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/sceneNode.js": {
            "name": "../src/sceneNode.js",
            "modules": {},
            "classes": {
                "LS.SceneNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/shadersManager.js": {
            "name": "../src/shadersManager.js",
            "modules": {},
            "classes": {
                "LS.ShadersManager": 1,
                "LS.ShaderQuery": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/utils.js": {
            "name": "../src/utils.js",
            "modules": {},
            "classes": {
                "LS.LS": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "VRCameraController": {
            "name": "VRCameraController",
            "shortname": "VRCameraController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/components/VRCameraController.js",
            "line": 3,
            "description": "This component allow to integrate with WebVR to use VR Headset",
            "params": [
                {
                    "name": "o",
                    "description": "object with the serialized info",
                    "type": "Object"
                }
            ]
        },
        "Rotator": {
            "name": "Rotator",
            "shortname": "Rotator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/components/animator.js",
            "line": 1,
            "description": "Rotator rotate a mesh over time",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.Camera": {
            "name": "LS.Components.Camera",
            "shortname": "LS.Components.Camera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/camera.js",
            "line": 3,
            "description": "Camera that contains the info about a camera",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.CameraController": {
            "name": "LS.Components.CameraController",
            "shortname": "CameraController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/cameraController.js",
            "line": 1,
            "description": "Camera controller",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.CameraFX": {
            "name": "LS.Components.CameraFX",
            "shortname": "CameraFX",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/cameraFX.js",
            "line": 1,
            "description": "This component allow to create basic FX",
            "params": [
                {
                    "name": "o",
                    "description": "object with the serialized info",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.CustomData": {
            "name": "LS.Components.CustomData",
            "shortname": "CustomData",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/customData.js",
            "line": 1,
            "description": "This module allows to store custom data inside a node",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.FollowNode": {
            "name": "LS.Components.FollowNode",
            "shortname": "FollowNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/followNode.js",
            "line": 1,
            "description": "FollowNode",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.GeometricPrimitive": {
            "name": "LS.Components.GeometricPrimitive",
            "shortname": "GeometricPrimitive",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/geometricPrimitive.js",
            "line": 1,
            "description": "GeometricPrimitive renders a primitive",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.GraphComponent": {
            "name": "LS.Components.GraphComponent",
            "shortname": "GraphComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/graphComponents.js",
            "line": 11,
            "description": "This component allow to integrate a behaviour graph on any object",
            "params": [
                {
                    "name": "o",
                    "description": "object with the serialized info",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.FXGraphComponent": {
            "name": "LS.Components.FXGraphComponent",
            "shortname": "FXGraphComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/graphComponents.js",
            "line": 190,
            "description": "This component allow to integrate a rendering post FX using a graph",
            "params": [
                {
                    "name": "o",
                    "description": "object with the serialized info",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.Knob": {
            "name": "LS.Components.Knob",
            "shortname": "Knob",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/knob.js",
            "line": 3,
            "description": "Knob allows to rotate a mesh like a knob (rotate when dragging)",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.Light": {
            "name": "LS.Components.Light",
            "shortname": "Light",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/light.js",
            "line": 3,
            "description": "Light that contains the info about the camera",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.LightFX": {
            "name": "LS.Components.LightFX",
            "shortname": "LightFX",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/lightFX.js",
            "line": 2,
            "description": "LightFX create volumetric and flare effects to the light",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.NodeManipulator": {
            "name": "LS.Components.NodeManipulator",
            "shortname": "NodeManipulator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/nodeManipulator.js",
            "line": 1,
            "description": "Node manipulator, allows to rotate it",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.PlayAnimation": {
            "name": "LS.Components.PlayAnimation",
            "shortname": "PlayAnimation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/playAnimation.js",
            "line": 1,
            "description": "Reads animation tracks from an Animation resource and applies the properties to the objects referenced",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.Poser": {
            "name": "LS.Components.Poser",
            "shortname": "Poser",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/poser.js",
            "line": 1,
            "description": "Transitions between different poses",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.RealtimeReflector": {
            "name": "LS.Components.RealtimeReflector",
            "shortname": "RealtimeReflector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/realtimeReflector.js",
            "line": 1,
            "description": "Realtime Reflective surface",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.Script": {
            "name": "LS.Components.Script",
            "shortname": "Script",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/script.js",
            "line": 2,
            "description": "Script must be coded in Javascript and they have full access to all the engine, so one script could replace the behaviour of any part of the engine.\nScripts are executed inside their own context, the context is local to the script so any variable defined in the context that is not attached to the context wont be accessible from other parts of the engine.\nTo interact with the engine Scripts must bind callback to events so the callbacks will be called when those events are triggered, however, there are some generic methods that will be called",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.Spherize": {
            "name": "LS.Components.Spherize",
            "shortname": "Spherize",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/spherize.js",
            "line": 1,
            "description": "Spherize deforms a mesh, it is an example of a deformer, a component that modifies the meshes of one node",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.Target": {
            "name": "LS.Components.Target",
            "shortname": "Target",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/target.js",
            "line": 1,
            "description": "Target rotate a mesh to look at the camera or another object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.Transform": {
            "name": "LS.Components.Transform",
            "shortname": "Transform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/transform.js",
            "line": 1,
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ]
        },
        "LS.Animation": {
            "name": "LS.Animation",
            "shortname": "LS.Animation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/helpers/animation.js",
            "line": 9,
            "description": "An Animation is a resource that contains samples of properties over time, similar to animation curves\nValues could be associated to an specific node.\nData is contained in tracks",
            "is_constructor": 1
        },
        "LS.Animation.Track": {
            "name": "LS.Animation.Track",
            "shortname": "LS.Animation.Track",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/helpers/animation.js",
            "line": 299,
            "description": "Represents one track with data over time about one property\nData could be stored in two forms, or an array containing arrays of [time,data] or in a single typed array, depends on the attribute typed_mode",
            "is_constructor": 1
        },
        "LS.Prefab": {
            "name": "LS.Prefab",
            "shortname": "Prefab",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/helpers/prefab.js",
            "line": 2,
            "description": "Prefab work in two ways: \n- It can contain a node structure and all the associated resources (textures, meshes, animations, etc)\n- When a node in the scene was created from a Prefab, the prefab is loaded so the associated resources are recovered, but the node structure is not modified.",
            "is_constructor": 1
        },
        "LS.TextureFX": {
            "name": "LS.TextureFX",
            "shortname": "TextureFX",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/helpers/textureFX.js",
            "line": 3,
            "description": "helps apply basic effects to a texture with as fewer render calls as possible with low memory footprint\nused by CameraFX but also available for any other use"
        },
        "LS.Material": {
            "name": "LS.Material",
            "shortname": "LS.Material",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/materials/material.js",
            "line": 7,
            "description": "Material class contains all the info about how a mesh should be rendered, more in a highlevel format.\nMost of the info is Colors, factors and Textures but it can also specify a shader or some flags.\nMaterials could be shared among different objects.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.StandardMaterial": {
            "name": "LS.StandardMaterial",
            "shortname": "LS.StandardMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/materials/standardMaterial.js",
            "line": 7,
            "description": "StandardMaterial class improves the material class",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.RenderInstance": {
            "name": "LS.RenderInstance",
            "shortname": "LS.RenderInstance",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/render/renderInstance.js",
            "line": 1,
            "description": "RenderInstance contains info of one object to be rendered on the scene.",
            "is_constructor": 1
        },
        "LS.RenderSettings": {
            "name": "LS.RenderSettings",
            "shortname": "RenderSettings",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/render/renderSettings.js",
            "line": 1,
            "description": "There could be different renderSettings for different scene quality.",
            "is_constructor": 1
        },
        "LS.Renderer": {
            "name": "LS.Renderer",
            "shortname": "LS.Renderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/render/renderer.js",
            "line": 3,
            "description": "The Renderer is in charge of generating one frame of the scene. Contains all the passes and intermediate functions to create the frame.",
            "is_constructor": 1
        },
        "LS.Draw": {
            "name": "LS.Draw",
            "shortname": "Draw",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/utils/draw.js",
            "line": 5,
            "description": "LS.Draw allows to render basic primitives, similar to the OpenGL Fixed pipeline.\nIt reuses local meshes when possible to avoid fragmenting the VRAM.",
            "is_constructor": 1
        },
        "LS.LScript": {
            "name": "LS.LScript",
            "shortname": "LScript",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/utils/lscript.js",
            "line": 3,
            "description": "LScript allows to compile code during execution time having a clean context",
            "is_constructor": 1
        },
        "LS.WBin": {
            "name": "LS.WBin",
            "shortname": "WBin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/utils/wbin.js",
            "line": 26,
            "description": "WBin allows to create binary files easily (similar to WAD format). You can pack lots of resources in one file or extract them."
        },
        "LS.Component": {
            "name": "LS.Component",
            "shortname": "LS.Component",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/component.js",
            "line": 20,
            "description": "This is an example class for a component, should never be instantiated by itself, \ninstead components get all the methods from this class attached when the component is registered.\nComponents can overwrite this methods if they want."
        },
        "LS.ComponentContainer": {
            "name": "LS.ComponentContainer",
            "shortname": "ComponentContainer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/componentContainer.js",
            "line": 6,
            "description": "ComponentContainer class allows to add component based properties to any other class",
            "is_constructor": 1
        },
        "LS.CompositePattern": {
            "name": "LS.CompositePattern",
            "shortname": "CompositePattern",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/compositePattern.js",
            "line": 2,
            "description": "CompositePattern implements the Composite Pattern, which allows to one class to contain instances of its own class\ncreating a tree-like structure.",
            "is_constructor": 1
        },
        "LS.LS": {
            "name": "LS.LS",
            "shortname": "LS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/utils.js",
            "line": 1,
            "description": "Samples a curve and returns the resulting value",
            "itemtype": "method",
            "params": [
                {
                    "name": "values",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "minx",
                    "description": "min x value",
                    "type": "Number"
                },
                {
                    "name": "maxx",
                    "description": "max x value",
                    "type": "Number"
                },
                {
                    "name": "defaulty",
                    "description": "default y value",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "the position in the curve to sample",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            }
        },
        "LS.LSQ": {
            "name": "LS.LSQ",
            "shortname": "LSQ",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/core.js",
            "line": 552,
            "description": "LSQ allows to set or get values easily from the global scene, using short strings as identifiers"
        },
        "LS.Formats": {
            "name": "LS.Formats",
            "shortname": "LS.Formats",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/formats.js",
            "line": 1,
            "description": "Formats is the class where all the info about what is every format, how to parse it, etc, is located",
            "params": [
                {
                    "name": "id",
                    "description": "the id (otherwise a random one is computed)",
                    "type": "String"
                }
            ],
            "is_constructor": 1
        },
        "LS.Collision": {
            "name": "LS.Collision",
            "shortname": "LS.Collision",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/physics.js",
            "line": 3,
            "description": "Contains information about the collision of a ray and the scene\n- position: vec3\n- node: SceneNode\n- instance: could be a RenderInstance or a PhysicsInstance\n- distance: number",
            "is_constructor": 1,
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "SceneNode"
                },
                {
                    "name": "instance",
                    "description": "",
                    "type": "PhysicsInstance|RenderInstance"
                },
                {
                    "name": "position",
                    "description": "collision position",
                    "type": "Vec3"
                },
                {
                    "name": "distance",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "LS.PhysicsInstance": {
            "name": "LS.PhysicsInstance",
            "shortname": "LS.PhysicsInstance",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/physics.js",
            "line": 31,
            "description": "PhysicsInstance contains info of a colliding object. Used to test collisions with the scene",
            "is_constructor": 1
        },
        "LS.Physics": {
            "name": "LS.Physics",
            "shortname": "LS.Physics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/physics.js",
            "line": 87,
            "description": "Physics is in charge of all physics testing methods",
            "is_constructor": 1
        },
        "LS.Picking": {
            "name": "LS.Picking",
            "shortname": "LS.Picking",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/picking.js",
            "line": 2,
            "description": "Picking is used to detect which element is below one pixel (used the GPU) or using raycast",
            "is_constructor": 1
        },
        "LS.Player": {
            "name": "LS.Player",
            "shortname": "LS.Player",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/player.js",
            "line": 1,
            "description": "Player class allows to handle the app context easily without having to glue manually all events\n\tThere is a list of options\n\t==========================\n\t- canvas: the canvas where the scene should be rendered, if not specified one will be created\n\t- container_id: string with container id where to create the canvas, width and height will be those from the container\n\t- width: the width for the canvas in case it is created without a container_id\n\t- height: the height for the canvas in case it is created without a container_id\n\t- resources: string with the path to the resources folder\n\t- shaders: string with the url to the shaders.xml file\n\t- proxy: string with the url where the proxy is located (useful to avoid CORS)\n\t- filesystems: object that contains the virtual file systems info { \"VFS\":\"http://litefileserver.com/\" } ...\n\t- redraw: boolean to force to render the scene constantly (useful for animated scenes)\n\t- autoresize: boolean to automatically resize the canvas when the window is resized\n\t- autoplay: boolean to automatically start playing the scene once the load is completed\n\t- loadingbar: boolean to show a loading bar\n\tOptional callbacks to attach\n\t============================\n\t- onPreDraw: executed before drawing a frame\n\t- onDraw: executed after drawing a frame\n\t- onPreUpdate(dt): executed before updating the scene (delta_time as parameter)\n\t- onUpdate(dt): executed after updating the scene (delta_time as parameter)\n\t- onMouse(e): when a mouse event is triggered\n\t- onKey(e): when a key event is triggered",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "settings for the webgl context creation",
                    "type": "Object"
                }
            ]
        },
        "LS.Project": {
            "name": "LS.Project",
            "shortname": "Project",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/project.js",
            "line": 1,
            "description": "The Project is the top-most object that contains the whole application, from the project we can load other scenes\nStill a work in progress",
            "is_constructor": 1
        },
        "LS.ResourcesManager": {
            "name": "LS.ResourcesManager",
            "shortname": "ResourcesManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/resourcesManager.js",
            "line": 1,
            "description": "Static class that contains all the resources loaded, parsed and ready to use.\nIt also contains the parsers and methods in charge of processing them",
            "is_constructor": 1
        },
        "LS.SceneTree": {
            "name": "LS.SceneTree",
            "shortname": "SceneTree",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/scene.js",
            "line": 1,
            "description": "The SceneTree contains all the info about the Scene and nodes",
            "is_constructor": 1
        },
        "LS.SceneNode": {
            "name": "LS.SceneNode",
            "shortname": "SceneNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/sceneNode.js",
            "line": 3,
            "description": "The SceneNode class represents and object in the scene\nIs the base class for all objects in the scene as meshes, lights, cameras, and so",
            "params": [
                {
                    "name": "id",
                    "description": "the id (otherwise a random one is computed)",
                    "type": "String"
                }
            ],
            "is_constructor": 1
        },
        "LS.ShadersManager": {
            "name": "LS.ShadersManager",
            "shortname": "LS.ShadersManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/shadersManager.js",
            "line": 7,
            "description": "ShadersManager is the static class in charge of loading, compiling and storing shaders for reuse.",
            "is_constructor": 1
        },
        "LS.ShaderQuery": {
            "name": "LS.ShaderQuery",
            "shortname": "LS.ShaderQuery",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/shadersManager.js",
            "line": 583,
            "description": "ShadersManager is the static class in charge of loading, compiling and storing shaders for reuse.",
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "../src/components/camera.js",
            "line": 122,
            "description": "Camera type, could be Camera.PERSPECTIVE or Camera.ORTHOGRAPHIC",
            "itemtype": "property",
            "name": "type",
            "type": "Vec3",
            "default": "Camera.PERSPECTIVE;",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 142,
            "description": "The position of the camera (in local space, node space)",
            "itemtype": "property",
            "name": "eye",
            "type": "Vec3",
            "default": "[0,100,100]",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 158,
            "description": "The center where the camera points (in local space, node space)",
            "itemtype": "property",
            "name": "center",
            "type": "Vec3",
            "default": "[0,0,0]",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 174,
            "description": "The up vector of the camera (in local space, node space)",
            "itemtype": "property",
            "name": "up",
            "type": "Vec3",
            "default": "[0,1,0]",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 190,
            "description": "The near plane",
            "itemtype": "property",
            "name": "near",
            "type": "Number",
            "default": "1",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 207,
            "description": "The far plane",
            "itemtype": "property",
            "name": "far",
            "type": "Number",
            "default": "1000",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 224,
            "description": "The camera aspect ratio",
            "itemtype": "property",
            "name": "aspect",
            "type": "Number",
            "default": "1",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 240,
            "description": "The field of view in degrees",
            "itemtype": "property",
            "name": "fov",
            "type": "Number",
            "default": "45",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 257,
            "description": "The frustum size when working in ORTHOGRAPHIC",
            "itemtype": "property",
            "name": "frustum_size",
            "type": "Number",
            "default": "50",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 278,
            "description": "The viewport in normalized coordinates (left,bottom, width, height)",
            "itemtype": "property",
            "name": "viewport",
            "type": "Vec4",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 292,
            "itemtype": "property",
            "name": "viewport_offset",
            "type": "Vec2",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 305,
            "itemtype": "property",
            "name": "viewport_size",
            "type": "Vec2",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 372,
            "itemtype": "method",
            "name": "lookAt",
            "params": [
                {
                    "name": "eye",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "center",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "up",
                    "description": "",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 387,
            "description": "Update matrices according to the eye,center,up,fov,aspect,...",
            "itemtype": "method",
            "name": "updateMatrices",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 421,
            "description": "Update the frustum planes according to viewprojection_matrix, used for visibility testing",
            "itemtype": "method",
            "name": "updateFrustumPlanes",
            "return": {
                "description": "planes",
                "type": "Float32Array"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 432,
            "description": "returns the inverse of the viewmatrix",
            "itemtype": "method",
            "name": "getModelMatrix",
            "params": [
                {
                    "name": "m",
                    "description": "optional output container",
                    "type": "Mat4"
                }
            ],
            "return": {
                "description": "matrix",
                "type": "Mat4"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 446,
            "description": "returns the viewmatrix",
            "itemtype": "method",
            "name": "getViewMatrix",
            "params": [
                {
                    "name": "m",
                    "description": "optional output container",
                    "type": "Mat4"
                }
            ],
            "return": {
                "description": "matrix",
                "type": "Mat4"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 460,
            "description": "returns the projection matrix",
            "itemtype": "method",
            "name": "getProjectionMatrix",
            "params": [
                {
                    "name": "m",
                    "description": "optional output container",
                    "type": "Mat4"
                }
            ],
            "return": {
                "description": "matrix",
                "type": "Mat4"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 474,
            "description": "returns the view projection matrix",
            "itemtype": "method",
            "name": "getViewProjectionMatrix",
            "params": [
                {
                    "name": "m",
                    "description": "optional output container",
                    "type": "Mat4"
                }
            ],
            "return": {
                "description": "matrix",
                "type": "Mat4"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 488,
            "description": "returns the model view projection matrix computed from a passed model",
            "itemtype": "method",
            "name": "getModelViewProjectionMatrix",
            "params": [
                {
                    "name": "model",
                    "description": "model matrix",
                    "type": "Mat4"
                },
                {
                    "name": "out",
                    "description": "optional output container",
                    "type": "Mat4"
                }
            ],
            "return": {
                "description": "matrix",
                "type": "Mat4"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 503,
            "description": "apply a transform to all the vectors (eye,center,up) using a matrix",
            "itemtype": "method",
            "name": "updateVectors",
            "params": [
                {
                    "name": "model",
                    "description": "matrix",
                    "type": "Mat4"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 518,
            "description": "transform a local coordinate to global coordinates",
            "itemtype": "method",
            "name": "getLocalPoint",
            "params": [
                {
                    "name": "v",
                    "description": "vector",
                    "type": "Vec3"
                },
                {
                    "name": "dest",
                    "description": "",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "v in global coordinates",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 537,
            "description": "rotate a local coordinate to global coordinates (skipping translation)",
            "itemtype": "method",
            "name": "getLocalVector",
            "params": [
                {
                    "name": "v",
                    "description": "vector",
                    "type": "Vec3"
                },
                {
                    "name": "dest",
                    "description": "",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "v in global coordinates",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 557,
            "description": "returns the eye (position of the camera) in global coordinates",
            "itemtype": "method",
            "name": "getEye",
            "params": [
                {
                    "name": "out",
                    "description": "output vector [optional]",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "position in global coordinates",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 576,
            "description": "returns the center of the camera (position where the camera is pointing) in global coordinates",
            "itemtype": "method",
            "name": "getCenter",
            "params": [
                {
                    "name": "out",
                    "description": "output vector [optional]",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "position in global coordinates",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 596,
            "description": "returns the front vector of the camera",
            "itemtype": "method",
            "name": "getFront",
            "params": [
                {
                    "name": "out",
                    "description": "output vector [optional]",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "position in global coordinates",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 616,
            "description": "returns the up vector of the camera",
            "itemtype": "method",
            "name": "getUp",
            "params": [
                {
                    "name": "out",
                    "description": "output vector [optional]",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "position in global coordinates",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 634,
            "description": "returns the top vector of the camera (different from up, this one is perpendicular to front and right)",
            "itemtype": "method",
            "name": "getTop",
            "params": [
                {
                    "name": "out",
                    "description": "output vector [optional]",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "position in global coordinates",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 652,
            "description": "returns the right vector of the camera",
            "itemtype": "method",
            "name": "getRight",
            "params": [
                {
                    "name": "out",
                    "description": "output vector [optional]",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "position in global coordinates",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 683,
            "description": "set camera in perspective mode and sets the properties",
            "itemtype": "method",
            "name": "setPerspective",
            "params": [
                {
                    "name": "fov",
                    "description": "in degrees",
                    "type": "Number"
                },
                {
                    "name": "aspect",
                    "description": "the aspect modifier (not the real final aspect, leave it to one)",
                    "type": "Number"
                },
                {
                    "name": "near",
                    "description": "distance",
                    "type": "Number"
                },
                {
                    "name": "far",
                    "description": "distance",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 701,
            "description": "set camera in orthographic mode and sets the planes",
            "itemtype": "method",
            "name": "setOrthographic",
            "params": [
                {
                    "name": "left",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "right",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bottom",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "top",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "near",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "far",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 720,
            "description": "moves the camera by adding the delta vector to center and eye",
            "itemtype": "method",
            "name": "move",
            "params": [
                {
                    "name": "delta",
                    "description": "",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 732,
            "description": "rotate the camera around its center",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle_in_deg",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "axis",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "in_local_space",
                    "description": "allows to specify if the axis is in local space or global space",
                    "type": "Boolean"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 752,
            "description": "Rotates the camera eye around a center",
            "itemtype": "method",
            "name": "orbit",
            "params": [
                {
                    "name": "angle_in_deg",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "axis",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "center",
                    "description": "optional",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 779,
            "description": "changes the distance between eye and center ( it could move the center or the eye, depending on the parameters )",
            "itemtype": "method",
            "name": "setDistanceToCenter",
            "params": [
                {
                    "name": "new_distance",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "move_eye",
                    "description": "if this is true it moves the eye closer, otherwise it moves the center closer to the eye",
                    "type": "Boolean"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 851,
            "description": "Sets the viewport in pixels (using the gl.canvas as reference)",
            "itemtype": "method",
            "name": "setViewportInPixels",
            "params": [
                {
                    "name": "left",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "right",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 868,
            "description": "Converts from 3D to 2D",
            "itemtype": "method",
            "name": "project",
            "params": [
                {
                    "name": "vec",
                    "description": "3D position we want to proyect to 2D",
                    "type": "Vec3"
                },
                {
                    "name": "viewport",
                    "description": "viewport info (if omited full canvas viewport is used)",
                    "type": "Vec4",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "result",
                    "description": "where to store the result, if omited it is created",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the coordinates in 2D",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 895,
            "description": "Converts from 2D to 3D",
            "itemtype": "method",
            "name": "unproject",
            "params": [
                {
                    "name": "vec",
                    "description": "2D position we want to proyect to 3D",
                    "type": "Vec3"
                },
                {
                    "name": "viewport",
                    "description": "viewport info (if omited full canvas viewport is used)",
                    "type": "Vec4",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "result",
                    "description": "where to store the result, if omited it is created",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the coordinates in 2D",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 912,
            "description": "returns the viewport in pixels applying the local camera viewport to the full viewport of the canvas",
            "itemtype": "method",
            "name": "getLocalViewport",
            "params": [
                {
                    "name": "viewport",
                    "description": "viewport info, otherwise the canvas dimensions will be used (not the current viewport)",
                    "type": "Vec4",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "result",
                    "description": "where to store the result, if omited it is created",
                    "type": "Vec4",
                    "optional": true,
                    "optdefault": "vec4"
                }
            ],
            "return": {
                "description": "the viewport info of the camera in pixels",
                "type": "Vec4"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 941,
            "description": "given an x and y position, returns the ray {start, dir}",
            "itemtype": "method",
            "name": "getRayInPixel",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "viewport",
                    "description": "viewport coordinates (if omited full viewport is used)",
                    "type": "Vec4"
                },
                {
                    "name": "skip_local_viewport",
                    "description": "ignore the local camera viewport configuration when computing the viewport",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "{start:vec3, dir:vec3}",
                "type": "Object"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 969,
            "description": "Returns true if the 2D point (in screen space coordinates) is inside the camera viewport area",
            "itemtype": "method",
            "name": "isPointInCamera",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "viewport",
                    "description": "viewport coordinates (if omited full viewport is used)",
                    "type": "Vec4"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/graphComponents.js",
            "line": 46,
            "description": "Returns the first component of this container that is of the same class",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "o",
                    "description": "object with the configuration info from a previous serialization",
                    "type": "Object"
                }
            ],
            "class": "LS.Components.GraphComponent",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/graphComponents.js",
            "line": 267,
            "description": "Returns the first component of this container that is of the same class",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "o",
                    "description": "object with the configuration info from a previous serialization",
                    "type": "Object"
                }
            ],
            "class": "LS.Components.FXGraphComponent",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 12,
            "description": "Position of the light in world space",
            "itemtype": "property",
            "name": "position",
            "type": "{[[x,y,z]]}",
            "default": "[0,0,0]",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 19,
            "description": "Position where the light is pointing at (in world space)",
            "itemtype": "property",
            "name": "target",
            "type": "{[[x,y,z]]}",
            "default": "[0,0,1]",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 26,
            "description": "Up vector (in world coordinates)",
            "itemtype": "property",
            "name": "up",
            "type": "{[[x,y,z]]}",
            "default": "[0,1,0]",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 34,
            "description": "Enabled",
            "itemtype": "property",
            "name": "enabled",
            "type": "{Boolean}",
            "default": "true",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 42,
            "description": "Near distance",
            "itemtype": "property",
            "name": "near",
            "type": "{Number}",
            "default": "1",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 49,
            "description": "Far distance",
            "itemtype": "property",
            "name": "far",
            "type": "{Number}",
            "default": "1000",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 57,
            "description": "Angle for the spot light inner apperture",
            "itemtype": "property",
            "name": "angle",
            "type": "{Number}",
            "default": "45",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 64,
            "description": "Angle for the spot light outer apperture",
            "itemtype": "property",
            "name": "angle_end",
            "type": "{Number}",
            "default": "60",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 88,
            "description": "The color of the light",
            "itemtype": "property",
            "name": "color",
            "type": "{[[r,g,b]]}",
            "default": "[1,1,1]",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 95,
            "description": "The intensity of the light",
            "itemtype": "property",
            "name": "intensity",
            "type": "{Number}",
            "default": "1",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 103,
            "description": "If the light cast shadows",
            "itemtype": "property",
            "name": "cast_shadows",
            "type": "{Boolean}",
            "default": "false",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 287,
            "description": "Returns the camera that will match the light orientation (taking into account fov, etc), useful for shadowmaps",
            "itemtype": "method",
            "name": "getLightCamera",
            "return": {
                "description": "the camera",
                "type": "Camera"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 299,
            "description": "updates all the important vectors (target, position, etc) according to the node parent of the light",
            "itemtype": "method",
            "name": "updateVectors",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 340,
            "description": "returns a copy of the light position (in global coordinates), if you want local you can access the position property",
            "itemtype": "method",
            "name": "getPosition",
            "params": [
                {
                    "name": "output",
                    "description": "optional",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the position",
                "type": "Vec3"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 356,
            "description": "returns a copy of the light target (in global coordinates), if you want local you can access the target property",
            "itemtype": "method",
            "name": "getTarget",
            "params": [
                {
                    "name": "output",
                    "description": "optional",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the target",
                "type": "Vec3"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 373,
            "description": "returns a copy of the light up vector (in global coordinates), if you want local you can access the up property",
            "itemtype": "method",
            "name": "getUp",
            "params": [
                {
                    "name": "output",
                    "description": "optional",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the up vector",
                "type": "Vec3"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 389,
            "description": "returns a copy of the front vector (in global coordinates)",
            "itemtype": "method",
            "name": "getFront",
            "params": [
                {
                    "name": "output",
                    "description": "optional",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the front vector",
                "type": "Vec3"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 441,
            "description": "This method is called by the LS.Renderer when the light needs to be prepared to be used during render (compute light camera, create shadowmaps, prepare macros, etc)",
            "itemtype": "method",
            "name": "prepare",
            "params": [
                {
                    "name": "render_settings",
                    "description": "info about how the scene will be rendered",
                    "type": "Object"
                }
            ],
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 570,
            "description": "Collects and returns the shader query of the light (some macros have to be computed now because they depend not only on the light, also on the node or material)",
            "itemtype": "method",
            "name": "getQuery",
            "params": [
                {
                    "name": "instance",
                    "description": "the render instance where this light will be applied",
                    "type": "RenderInstance"
                },
                {
                    "name": "render_settings",
                    "description": "info about how the scene will be rendered",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the macros",
                "type": "ShaderQuery"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 613,
            "description": "Collects and returns the uniforms for the light (some uniforms have to be computed now because they depend not only on the light, also on the node or material)",
            "itemtype": "method",
            "name": "getUniforms",
            "params": [
                {
                    "name": "instance",
                    "description": "the render instance where this light will be applied",
                    "type": "RenderInstance"
                },
                {
                    "name": "render_settings",
                    "description": "info about how the scene will be rendered",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the uniforms",
                "type": "Object"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 686,
            "description": "Optimization: instead of using the far plane, we take into account the attenuation to avoid rendering objects where the light will never reach",
            "itemtype": "method",
            "name": "computeShadowmapFar",
            "return": {
                "description": "distance",
                "type": "Number"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 712,
            "description": "Computes the max amount of light this object can produce (taking into account every color channel)",
            "itemtype": "method",
            "name": "computeLightIntensity",
            "return": {
                "description": "intensity",
                "type": "Number"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 723,
            "description": "Computes the light radius according to the attenuation",
            "itemtype": "method",
            "name": "computeLightRadius",
            "return": {
                "description": "radius",
                "type": "Number"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 739,
            "description": "Generates the shadowmap for this light",
            "itemtype": "method",
            "name": "generateShadowmap",
            "return": {
                "description": "render_settings",
                "type": "Object"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 805,
            "description": "It returns a matrix in the position of the given light property (target, position), mostly used for gizmos",
            "itemtype": "method",
            "name": "getTransformMatrix",
            "params": [
                {
                    "name": "element",
                    "description": "\"target\" or \"position\"",
                    "type": "String"
                },
                {
                    "name": "output",
                    "description": "[optional]",
                    "type": "Mat4"
                }
            ],
            "return": {
                "description": "mat4",
                "type": "Mat4"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 828,
            "description": "apply a transformation to a given light property, this is done in a function to allow more complex gizmos",
            "itemtype": "method",
            "name": "applyTransformMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "transformation in matrix form",
                    "type": "Mat4"
                },
                {
                    "name": "center",
                    "description": "�?",
                    "type": "Vec3"
                },
                {
                    "name": "property_name",
                    "description": "\"target\" or \"position\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "mat4",
                "type": "Mat4"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/meshRenderer.js",
            "line": 66,
            "description": "Configure from a serialized object",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "object",
                    "description": "with the serialized info",
                    "type": "Object"
                }
            ],
            "class": "LS.Components.NodeManipulator",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/meshRenderer.js",
            "line": 87,
            "description": "Serialize the object",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "object with the serialized info",
                "type": "Object"
            },
            "class": "LS.Components.NodeManipulator",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/script.js",
            "line": 131,
            "description": "This is the method in charge of compiling the code and executing the constructor, which also creates the context.\nIt is called everytime the code is modified, that implies that the context is created when the component is configured.",
            "itemtype": "method",
            "name": "processCode",
            "class": "LS.Components.Script",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/skinnedMeshRenderer.js",
            "line": 80,
            "description": "Configure from a serialized object",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "object",
                    "description": "with the serialized info",
                    "type": "Object"
                }
            ],
            "class": "LS.Components.Spherize",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/skinnedMeshRenderer.js",
            "line": 103,
            "description": "Serialize the object",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "object with the serialized info",
                "type": "Object"
            },
            "class": "LS.Components.Spherize",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 63,
            "description": "Force object to update matrices",
            "itemtype": "method",
            "name": "mustUpdate",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 72,
            "description": "The position relative to its parent in vec3 format",
            "itemtype": "property",
            "name": "position",
            "type": "Vec3",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 123,
            "description": "The orientation relative to its parent in quaternion format",
            "itemtype": "property",
            "name": "rotation",
            "type": "Quat",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 136,
            "description": "The scaling relative to its parent in vec3 format (default is [1,1,1])",
            "itemtype": "property",
            "name": "scaling",
            "type": "Vec3",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 152,
            "description": "The local matrix transform relative to its parent in mat4 format",
            "itemtype": "property",
            "name": "matrix",
            "type": "Mat4",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 169,
            "description": "The position relative to its parent in vec3 format",
            "itemtype": "property",
            "name": "position",
            "type": "Vec3",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 180,
            "description": "The local matrix transform relative to its parent in mat4 format",
            "itemtype": "property",
            "name": "matrix",
            "type": "Mat4",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 219,
            "description": "Copy the transform from another Transform",
            "itemtype": "method",
            "name": "copyFrom",
            "params": [
                {
                    "name": "src",
                    "description": "",
                    "type": "Transform"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 229,
            "description": "Configure from a serialized object",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "object",
                    "description": "with the serialized info",
                    "type": "Object"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 258,
            "description": "Serialize the object",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "object with the serialized info",
                "type": "Object"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 274,
            "description": "Reset this transform",
            "itemtype": "method",
            "name": "identity",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 290,
            "description": "Returns a copy of the local position",
            "itemtype": "method",
            "name": "getPosition",
            "params": [
                {
                    "name": "out",
                    "description": "[optional] where to store the result, otherwise one vec3 is created and returned",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the position",
                "type": "Vec3"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 303,
            "description": "Returns a copy of the global position",
            "itemtype": "method",
            "name": "getGlobalPosition",
            "params": [
                {
                    "name": "out",
                    "description": "[optional] where to store the result, otherwise one vec3 is created and returned",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the position",
                "type": "Vec3"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 317,
            "description": "Returns the rotation in quaternion array (a copy)",
            "itemtype": "method",
            "name": "getRotation",
            "params": [
                {
                    "name": "out",
                    "description": "[optional] where to store the result, otherwise one quat is created and returned",
                    "type": "Quat"
                }
            ],
            "return": {
                "description": "the rotation",
                "type": "Quat"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 329,
            "description": "Returns the global rotation in quaternion array (a copy)",
            "itemtype": "method",
            "name": "getRotation",
            "params": [
                {
                    "name": "out",
                    "description": "[optional] where to store the result, otherwise one quat is created and returned",
                    "type": "Quat"
                }
            ],
            "return": {
                "description": "the rotation",
                "type": "Quat"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 355,
            "description": "Returns the scale (its a copy)",
            "itemtype": "method",
            "name": "getScale",
            "params": [
                {
                    "name": "out",
                    "description": "[optional] where to store the result, otherwise one vec3 is created and returned",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the scale",
                "type": "Vec3"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 367,
            "description": "Returns a copy of the global scale (this is not correct, there is no global_scale factor, because due to rotations the axis could change)",
            "itemtype": "method",
            "name": "getGlobalScale",
            "params": [
                {
                    "name": "out",
                    "description": "[optional] where to store the result, otherwise one vec3 is created and returned",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the scale",
                "type": "Vec3"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 390,
            "description": "update the local Matrix to match the position,scale and rotation",
            "itemtype": "method",
            "name": "updateMatrix",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 402,
            "description": "updates the global matrix using the parents transformation",
            "itemtype": "method",
            "name": "updateGlobalMatrix",
            "params": [
                {
                    "name": "fast",
                    "description": "it doesnt recompute parent matrices, just uses the stored one, is faster but could create errors if the parent doesnt have its global matrix update",
                    "type": "Bool"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 417,
            "description": "Returns a copy of the local matrix of this transform (it updates the matrix automatically)",
            "itemtype": "method",
            "name": "getMatrix",
            "params": [
                {
                    "name": "out",
                    "description": "[optional] where to store the result, otherwise one mat4 is created and returned",
                    "type": "Mat4"
                }
            ],
            "return": {
                "description": "the matrix",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 432,
            "description": "Returns the original local matrix of this transform (it updates the matrix automatically)",
            "itemtype": "method",
            "name": "getLocalMatrixRef",
            "return": {
                "description": "the matrix in array format",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 445,
            "description": "Returns a copy of the global matrix of this transform (it updates the matrix automatically)",
            "itemtype": "method",
            "name": "getGlobalMatrix",
            "params": [
                {
                    "name": "out",
                    "description": "optional",
                    "type": "Mat4"
                },
                {
                    "name": "fast",
                    "description": "this flags skips recomputing parents matrices",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "the matrix in array format",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 464,
            "description": "Returns a copy of the global matrix of this transform (it updates the matrix automatically)",
            "itemtype": "method",
            "name": "getGlobalMatrix",
            "return": {
                "description": "the matrix in array format",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 477,
            "description": "Returns an array with all the ancestors",
            "itemtype": "method",
            "name": "getAncestors",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 491,
            "description": "Returns a quaternion with all parents rotations",
            "itemtype": "method",
            "name": "getGlobalRotation",
            "return": {
                "description": "Quaternion",
                "type": "Quat"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 512,
            "description": "Returns a Matrix with all parents rotations",
            "itemtype": "method",
            "name": "getGlobalRotationMatrix",
            "return": {
                "description": "Matrix rotation",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 535,
            "description": "Returns the local matrix of this transform without the rotation or scale",
            "itemtype": "method",
            "name": "getGlobalTranslationMatrix",
            "return": {
                "description": "the matrix in array format",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 546,
            "description": "Returns the global rotation in quaternion array (a copy)",
            "itemtype": "method",
            "name": "getGlobalRotationMatrix",
            "return": {
                "description": "the rotation",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 569,
            "description": "Returns the local matrix of this transform without the scale",
            "itemtype": "method",
            "name": "getGlobalTranslationRotationMatrix",
            "return": {
                "description": "the matrix in array format",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 583,
            "description": "Returns the matrix for the normals in the shader",
            "itemtype": "method",
            "name": "getNormalMatrix",
            "return": {
                "description": "the matrix in array format",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 601,
            "description": "Configure the transform from a local Matrix (do not tested carefully)",
            "itemtype": "method",
            "name": "fromMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "the matrix in array format",
                    "type": "Mat4"
                },
                {
                    "name": "is_global",
                    "description": "tells if the matrix is in global space [optional]",
                    "type": "Bool"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 648,
            "description": "Configure the transform rotation from a vec3 Euler angles (heading,attitude,bank)",
            "itemtype": "method",
            "name": "setRotationFromEuler",
            "params": [
                {
                    "name": "src,",
                    "description": "the matrix in array format",
                    "type": "Mat4"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 660,
            "description": "sets the position",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 677,
            "description": "sets the rotation",
            "itemtype": "method",
            "name": "setRotation",
            "params": [
                {
                    "name": "rotation",
                    "description": "in quaterion format",
                    "type": "Quat"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 689,
            "description": "sets the scale",
            "itemtype": "method",
            "name": "setScale",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 706,
            "description": "translates object in local coordinates (adds to the position)",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 723,
            "description": "NOT TESTED\ntranslates object in object coordinates (using the rotation and the scale)",
            "itemtype": "method",
            "name": "translateLocal",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 741,
            "description": "rotate object in local space (axis is in local space)",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle_in_deg",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "axis",
                    "description": "",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 760,
            "description": "rotate object in local space in local X axis",
            "itemtype": "method",
            "name": "rotateX",
            "params": [
                {
                    "name": "angle_in_deg",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 772,
            "description": "rotate object in local space in local Y axis",
            "itemtype": "method",
            "name": "rotateY",
            "params": [
                {
                    "name": "angle_in_deg",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 784,
            "description": "rotate object in local space in local Z axis",
            "itemtype": "method",
            "name": "rotateZ",
            "params": [
                {
                    "name": "angle_in_deg",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 797,
            "description": "rotate object in global space (axis is in global space)",
            "itemtype": "method",
            "name": "rotateGlobal",
            "params": [
                {
                    "name": "angle_in_deg",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "axis",
                    "description": "",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 811,
            "description": "rotate object in local space using a quat",
            "itemtype": "method",
            "name": "rotateQuat",
            "params": [
                {
                    "name": "quaternion",
                    "description": "",
                    "type": "Quat"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 823,
            "description": "rotate object in global space using a quat",
            "itemtype": "method",
            "name": "rotateQuatGlobal",
            "params": [
                {
                    "name": "quaternion",
                    "description": "",
                    "type": "Quat"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 835,
            "description": "scale the object",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 852,
            "description": "This method is static (call it from Transform.interpolate)\ninterpolate the transform between two transforms and stores the result in another Transform",
            "itemtype": "method",
            "name": "interpolate",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Transform"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Transform"
                },
                {
                    "name": "factor",
                    "description": "from 0 to 1",
                    "type": "Number"
                },
                {
                    "name": "the",
                    "description": "destination",
                    "type": "Transform"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 870,
            "description": "Orients the transform to look from one position to another",
            "itemtype": "method",
            "name": "lookAt",
            "params": [
                {
                    "name": "position",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "target",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "up",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "in_world",
                    "description": "tells if the values are in world coordinates (otherwise asume its in local coordinates)",
                    "type": "Boolean"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 933,
            "description": "returns the [0,0,-1] vector in global space",
            "itemtype": "method",
            "name": "getFront",
            "return": {
                "description": "",
                "type": "Vec3"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 942,
            "description": "returns the [0,1,0] vector in global space",
            "itemtype": "method",
            "name": "getTop",
            "return": {
                "description": "",
                "type": "Vec3"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 951,
            "description": "returns the [1,0,0] vector in global space",
            "itemtype": "method",
            "name": "getRight",
            "return": {
                "description": "",
                "type": "Vec3"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 960,
            "description": "Multiplies a point by the local matrix (not global)\nIf no destination is specified a new vector is created",
            "itemtype": "method",
            "name": "transformPoint",
            "params": [
                {
                    "name": "point",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "destination",
                    "description": "(optional)",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 974,
            "description": "convert from local coordinates to global coordinates\nIf no destination is specified a new vector is created",
            "itemtype": "method",
            "name": "transformPointGlobal",
            "params": [
                {
                    "name": "point",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "destination",
                    "description": "(optional)",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 987,
            "description": "convert from local coordinates to global coordinates\nIf no destination is specified a new vector is created",
            "itemtype": "method",
            "name": "localToGlobal",
            "params": [
                {
                    "name": "point",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "destination",
                    "description": "(optional)",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 996,
            "description": "convert from global coordinates to local coordinates\nIf no destination is specified a new vector is created",
            "itemtype": "method",
            "name": "transformPoint",
            "params": [
                {
                    "name": "point",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "destination",
                    "description": "(optional)",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 1011,
            "description": "Applies the transformation to a vector (rotate but not translate)\nIf no destination is specified the transform is applied to vec",
            "itemtype": "method",
            "name": "transformVector",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "destination",
                    "description": "(optional)",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 1022,
            "description": "Applies the transformation to a vector (rotate but not translate)\nIf no destination is specified the transform is applied to vec",
            "itemtype": "method",
            "name": "transformVectorGlobal",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "destination",
                    "description": "(optional)",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 1041,
            "description": "Apply a transform to this transform",
            "itemtype": "method",
            "name": "applyTransform",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 1063,
            "description": "Applies the transformation using a matrix",
            "itemtype": "method",
            "name": "applyTransformMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "with the transform",
                    "type": "Mat4"
                },
                {
                    "name": "center",
                    "description": "different pivot [optional] if omited 0,0,0 will be used",
                    "type": "Vec3"
                },
                {
                    "name": "is_global",
                    "description": "(optional) tells if the transformation should be applied in global space or local space",
                    "type": "Bool"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/helpers/animation.js",
            "line": 148,
            "class": "LS.Animation",
            "namespace": "LS"
        },
        {
            "file": "../src/helpers/prefab.js",
            "line": 19,
            "description": "configure the prefab",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "LS.Prefab",
            "namespace": "LS"
        },
        {
            "file": "../src/helpers/prefab.js",
            "line": 91,
            "description": "Creates an instance of the object inside the prefab",
            "itemtype": "method",
            "name": "createObject",
            "return": {
                "description": "object contained"
            },
            "class": "LS.Prefab",
            "namespace": "LS"
        },
        {
            "file": "../src/helpers/prefab.js",
            "line": 114,
            "description": "to create a new prefab, it packs all the data an instantiates the resource",
            "itemtype": "method",
            "name": "Prefab.createPrefab",
            "return": {
                "description": "object containing the prefab data ready to be converted to WBin"
            },
            "class": "LS.Prefab",
            "namespace": "LS"
        },
        {
            "file": "../src/helpers/textureFX.js",
            "line": 310,
            "description": "Returns the first component of this container that is of the same class",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "o",
                    "description": "object with the configuration info from a previous serialization",
                    "type": "Object"
                }
            ],
            "class": "LS.TextureFX",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/customMaterial.js",
            "line": 179,
            "description": "Event used to inform if one resource has changed its name",
            "itemtype": "method",
            "name": "onResourceRenamed",
            "params": [
                {
                    "name": "resources",
                    "description": "object where all the resources are stored",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/customMaterial.js",
            "line": 200,
            "description": "gets all the properties and its types",
            "itemtype": "method",
            "name": "getProperties",
            "return": {
                "description": "object with name:type",
                "type": "Object"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/customMaterial.js",
            "line": 225,
            "description": "gets all the properties and its types",
            "itemtype": "method",
            "name": "getProperty",
            "return": {
                "description": "object with name:type",
                "type": "Object"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/customMaterial.js",
            "line": 252,
            "description": "assign a value to a property in a safe way",
            "itemtype": "method",
            "name": "setProperty",
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/customMaterial.js",
            "line": 323,
            "description": "Assigns a texture to a channel",
            "itemtype": "method",
            "name": "setTexture",
            "params": [
                {
                    "name": "channel",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "texture",
                    "description": "",
                    "type": "Texture"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/customMaterial.js",
            "line": 369,
            "description": "Collects all the resources needed by this material (textures)",
            "itemtype": "method",
            "name": "getResources",
            "params": [
                {
                    "name": "resources",
                    "description": "object where all the resources are stored",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/graphMaterial.js",
            "line": 143,
            "description": "gets all the properties and its types",
            "itemtype": "method",
            "name": "getProperties",
            "return": {
                "description": "object with name:type",
                "type": "Object"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/graphMaterial.js",
            "line": 168,
            "description": "Event used to inform if one resource has changed its name",
            "itemtype": "method",
            "name": "onResourceRenamed",
            "params": [
                {
                    "name": "resources",
                    "description": "object where all the resources are stored",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/graphMaterial.js",
            "line": 189,
            "description": "gets all the properties and its types",
            "itemtype": "method",
            "name": "getProperty",
            "return": {
                "description": "object with name:type",
                "type": "Object"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/graphMaterial.js",
            "line": 212,
            "description": "assign a value to a property in a safe way",
            "itemtype": "method",
            "name": "setProperty",
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/graphMaterial.js",
            "line": 251,
            "description": "Assigns a texture to a channel",
            "itemtype": "method",
            "name": "setTexture",
            "params": [
                {
                    "name": "texture",
                    "description": "",
                    "type": "Texture"
                },
                {
                    "name": "channel",
                    "description": "default is COLOR",
                    "type": "String"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 77,
            "description": "Surface color",
            "itemtype": "property",
            "name": "color",
            "type": "{vec3}",
            "default": "[1,1,1]",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 84,
            "description": "Opacity. It must be < 1 to enable alpha sorting. If it is <= 0 wont be visible.",
            "itemtype": "property",
            "name": "opacity",
            "type": "{number}",
            "default": "1",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 92,
            "description": "Blend mode, it could be any of Blend options (NORMAL,ALPHA, ADD, SCREEN)",
            "itemtype": "property",
            "name": "blend_mode",
            "type": "{String}",
            "default": "Blend.NORMAL",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 101,
            "description": "Specular glossiness: the glossines (exponent) of specular light",
            "itemtype": "property",
            "name": "specular_gloss",
            "type": "{number}",
            "default": "10",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 276,
            "description": "Configure the material getting the info from the object",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 287,
            "description": "Serialize this material",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "object with the serialization info",
                "type": "Object"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 300,
            "description": "Clone this material (keeping the class)",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "Material instance",
                "type": "Material"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 313,
            "description": "Loads and assigns a texture to a channel",
            "itemtype": "method",
            "name": "loadAndSetTexture",
            "params": [
                {
                    "name": "texture_or_filename",
                    "description": "",
                    "type": "Texture || url"
                },
                {
                    "name": "channel",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 344,
            "description": "gets all the properties and its types",
            "itemtype": "method",
            "name": "getProperties",
            "return": {
                "description": "object with name:type",
                "type": "Object"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 367,
            "description": "gets all the properties and its types",
            "itemtype": "method",
            "name": "getProperty",
            "return": {
                "description": "object with name:type",
                "type": "Object"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 380,
            "description": "gets all the properties and its types",
            "itemtype": "method",
            "name": "getProperty",
            "return": {
                "description": "object with name:type",
                "type": "Object"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 474,
            "description": "gets all the texture channels supported by this material",
            "itemtype": "method",
            "name": "getTextureChannels",
            "return": {
                "description": "array with the name of every channel supported by this material",
                "type": "Array"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 486,
            "description": "Assigns a texture to a channel and its sampling parameters",
            "itemtype": "method",
            "name": "setTexture",
            "params": [
                {
                    "name": "channel",
                    "description": "for a list of supported channels by this material call getTextureChannels()",
                    "type": "String"
                },
                {
                    "name": "texture",
                    "description": "",
                    "type": "Texture"
                },
                {
                    "name": "sampler_options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 521,
            "description": "Set a property of the sampling (wrap, uvs, filter)",
            "itemtype": "method",
            "name": "setTextureProperty",
            "params": [
                {
                    "name": "channel",
                    "description": "for a list of supported channels by this material call getTextureChannels()",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "could be \"uvs\", \"filter\", \"wrap\"",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value, for uvs check Material.TEXTURE_COORDINATES, filter is gl.NEAREST or gl.LINEAR and wrap gl.CLAMP_TO_EDGE, gl.MIRROR or gl.REPEAT",
                    "type": "*"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 542,
            "description": "Returns the texture in a channel",
            "itemtype": "method",
            "name": "getTexture",
            "params": [
                {
                    "name": "channel",
                    "description": "default is COLOR",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 568,
            "description": "Returns the texture sampler info of one texture channel (filter, wrap, uvs)",
            "itemtype": "method",
            "name": "getTextureSampler",
            "params": [
                {
                    "name": "channel",
                    "description": "get available channels using getTextureChannels",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 593,
            "description": "Assigns a texture sampler to one texture channel (filter, wrap, uvs)",
            "itemtype": "method",
            "name": "setTextureInfo",
            "params": [
                {
                    "name": "channel",
                    "description": "default is COLOR",
                    "type": "String"
                },
                {
                    "name": "sampler",
                    "description": "{ texture, uvs, wrap, filter }",
                    "type": "Object"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 608,
            "description": "Collects all the resources needed by this material (textures)",
            "itemtype": "method",
            "name": "getResources",
            "params": [
                {
                    "name": "resources",
                    "description": "object where all the resources are stored",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 627,
            "description": "Event used to inform if one resource has changed its name",
            "itemtype": "method",
            "name": "onResourceRenamed",
            "params": [
                {
                    "name": "resources",
                    "description": "object where all the resources are stored",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 645,
            "description": "Loads all the textures inside this material, by sending the through the ResourcesManager",
            "itemtype": "method",
            "name": "loadTextures",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 657,
            "description": "Register this material in a materials pool to be shared with other nodes",
            "itemtype": "method",
            "name": "registerMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "name given to this material, it must be unique",
                    "type": "String"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/standardMaterial.js",
            "line": 292,
            "description": "assign a value to a property in a safe way",
            "itemtype": "method",
            "name": "setProperty",
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ],
            "class": "LS.StandardMaterial",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/standardMaterial.js",
            "line": 344,
            "description": "gets all the properties and its types",
            "itemtype": "method",
            "name": "getProperties",
            "return": {
                "description": "object with name:type",
                "type": "Object"
            },
            "class": "LS.StandardMaterial",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/surfaceMaterial.js",
            "line": 179,
            "description": "gets all the properties and its types",
            "itemtype": "method",
            "name": "getProperties",
            "return": {
                "description": "object with name:type",
                "type": "Object"
            },
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/surfaceMaterial.js",
            "line": 204,
            "description": "Event used to inform if one resource has changed its name",
            "itemtype": "method",
            "name": "onResourceRenamed",
            "params": [
                {
                    "name": "resources",
                    "description": "object where all the resources are stored",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/surfaceMaterial.js",
            "line": 225,
            "description": "gets all the properties and its types",
            "itemtype": "method",
            "name": "getProperty",
            "return": {
                "description": "object with name:type",
                "type": "Object"
            },
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/surfaceMaterial.js",
            "line": 252,
            "description": "assign a value to a property in a safe way",
            "itemtype": "method",
            "name": "setProperty",
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ],
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/surfaceMaterial.js",
            "line": 327,
            "description": "Assigns a texture to a channel",
            "itemtype": "method",
            "name": "setTexture",
            "params": [
                {
                    "name": "channel",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "texture",
                    "description": "",
                    "type": "Texture"
                }
            ],
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/surfaceMaterial.js",
            "line": 373,
            "description": "Collects all the resources needed by this material (textures)",
            "itemtype": "method",
            "name": "getResources",
            "params": [
                {
                    "name": "resources",
                    "description": "object where all the resources are stored",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 114,
            "description": "Updates the normal matrix using the matrix",
            "itemtype": "method",
            "name": "computeNormalMatrix",
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 222,
            "description": "takes the flags on the node and update the render instance flags",
            "itemtype": "method",
            "name": "applyNodeFlags",
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 254,
            "description": "Enable flag in the flag bit field",
            "itemtype": "method",
            "name": "enableFlag",
            "params": [
                {
                    "name": "flag",
                    "description": "id",
                    "type": "Number"
                }
            ],
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 265,
            "description": "Disable flag in the flag bit field",
            "itemtype": "method",
            "name": "enableFlag",
            "params": [
                {
                    "name": "flag",
                    "description": "id",
                    "type": "Number"
                }
            ],
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 276,
            "description": "Tells if a flag is enabled",
            "itemtype": "method",
            "name": "enableFlag",
            "params": [
                {
                    "name": "flag",
                    "description": "id",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "flag value",
                "type": "Boolean"
            },
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 288,
            "description": "Computes the instance bounding box in world space from the one in local space",
            "itemtype": "method",
            "name": "updateAABB",
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 298,
            "description": "Used to update the RI info without having to go through the collectData process, it is faster but some changes may take a while",
            "itemtype": "method",
            "name": "update",
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 310,
            "description": "Calls render taking into account primitive and range",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "shader",
                    "description": "",
                    "type": "Shader"
                }
            ],
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 344,
            "description": "Checks if this object was visible by a camera during the last frame",
            "itemtype": "method",
            "name": "wasVisibleByCamera",
            "params": [
                {
                    "name": "camera",
                    "description": "[optional] if a camera is supplied it checks if it was visible by that camera, otherwise tells you if it was visible by any camera",
                    "type": "LS.Camera"
                }
            ],
            "return": {
                "description": "true if it was visible by the camera (or any camera if no camera supplied), false otherwise",
                "type": "Boolean"
            },
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 74,
            "description": "Renders the current scene to the screen\nMany steps are involved, from gathering info from the scene tree, generating shadowmaps, setup FBOs, render every camera",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "SceneTree"
                },
                {
                    "name": "render_settings",
                    "description": "",
                    "type": "RenderSettings"
                },
                {
                    "name": "cameras",
                    "description": "if no cameras are specified the cameras are taken from the scene",
                    "type": "Array",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 162,
            "description": "Calls renderFrame of every camera in the cameras list (triggering the appropiate events)",
            "itemtype": "method",
            "name": "renderFrameCameras",
            "params": [
                {
                    "name": "cameras",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "render_settings",
                    "description": "",
                    "type": "RenderSettings"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 191,
            "description": "renders the view from one camera to the current viewport (could be a texture)",
            "itemtype": "method",
            "name": "renderFrame",
            "params": [
                {
                    "name": "camera",
                    "description": "",
                    "type": "Camera"
                },
                {
                    "name": "render_settings",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 240,
            "description": "Set camera as the current camera, sets the viewport according to camera info, updates matrices, and prepares LS.Draw",
            "itemtype": "method",
            "name": "enableCamera",
            "params": [
                {
                    "name": "camera",
                    "description": "",
                    "type": "Camera"
                },
                {
                    "name": "render_settings",
                    "description": "",
                    "type": "RenderSettings"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 306,
            "description": "Calls the render method for every instance (it also takes into account events and frustrum culling",
            "itemtype": "method",
            "name": "renderInstances",
            "params": [
                {
                    "name": "render_settings",
                    "description": "",
                    "type": "RenderSettings"
                },
                {
                    "name": "instances",
                    "description": "array of RIs, if not specified the last visible_instances are rendered",
                    "type": "Array"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 499,
            "description": "To set gl state to a known and constant state in every render pass",
            "itemtype": "method",
            "name": "resetGLState",
            "params": [
                {
                    "name": "render_settings",
                    "description": "",
                    "type": "RenderSettings"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 572,
            "description": "Renders this render instance taking into account all the lights that affect it",
            "itemtype": "method",
            "name": "renderColorPassInstance",
            "params": [
                {
                    "name": "instance",
                    "description": "",
                    "type": "RenderInstance"
                },
                {
                    "name": "lights",
                    "description": "array containing al the lights affecting this RI",
                    "type": "Array"
                },
                {
                    "name": "scene",
                    "description": "",
                    "type": "SceneTree"
                },
                {
                    "name": "render_settings",
                    "description": "",
                    "type": "RenderSettings"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 726,
            "description": "Renders this RenderInstance into the shadowmap",
            "itemtype": "method",
            "name": "renderShadowPassInstance",
            "params": [
                {
                    "name": "instance",
                    "description": "",
                    "type": "RenderInstance"
                },
                {
                    "name": "render_settings",
                    "description": "",
                    "type": "RenderSettings"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 809,
            "description": "Special case of render instance that uses a 2D projection (used for GUIS)\nWill be refactored for a better system",
            "itemtype": "method",
            "name": "render2DInstance",
            "params": [
                {
                    "name": "instance",
                    "description": "",
                    "type": "RenderInstance"
                },
                {
                    "name": "scene",
                    "description": "",
                    "type": "SceneTree"
                },
                {
                    "name": "render_settings",
                    "description": "",
                    "type": "RenderSettings"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 894,
            "description": "Render instance into the picking buffer",
            "itemtype": "method",
            "name": "renderPickingInstance",
            "params": [
                {
                    "name": "instance",
                    "description": "",
                    "type": "RenderInstance"
                },
                {
                    "name": "render_settings",
                    "description": "",
                    "type": "RenderSettings"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 931,
            "description": "Update the scene shader query according to the render pass\nDo not reuse the query, they change between rendering passes (shadows, reflections, etc)",
            "itemtype": "method",
            "name": "fillSceneShaderQuery",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "SceneTree"
                },
                {
                    "name": "render_settings",
                    "description": "",
                    "type": "RenderSettings"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 1010,
            "description": "Switch flags according to the RenderInstance flags",
            "itemtype": "method",
            "name": "enableInstanceFlags",
            "params": [
                {
                    "name": "instance",
                    "description": "",
                    "type": "RenderInstance"
                },
                {
                    "name": "render_settings",
                    "description": "",
                    "type": "RenderSettings"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 1049,
            "description": "Collects and process the rendering instances, cameras and lights that are visible\nIts a prepass shared among all rendering passes",
            "itemtype": "method",
            "name": "processVisibleData",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "SceneTree"
                },
                {
                    "name": "render_settings",
                    "description": "",
                    "type": "RenderSettings"
                },
                {
                    "name": "cameras",
                    "description": "in case you dont want to use the scene cameras",
                    "type": "Array"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 1229,
            "description": "Renders a frame into a texture (could be a cubemap, in which case does the six passes)",
            "itemtype": "method",
            "name": "renderInstancesToRT",
            "params": [
                {
                    "name": "cam",
                    "description": "",
                    "type": "Camera"
                },
                {
                    "name": "texture",
                    "description": "",
                    "type": "Texture"
                },
                {
                    "name": "render_settings",
                    "description": "",
                    "type": "RenderSettings"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 1262,
            "description": "Renders the current scene to a cubemap centered in the given position",
            "itemtype": "method",
            "name": "renderToCubemap",
            "params": [
                {
                    "name": "position",
                    "description": "center of the camera where to render the cubemap",
                    "type": "Vec3"
                },
                {
                    "name": "size",
                    "description": "texture size",
                    "type": "Number"
                },
                {
                    "name": "texture",
                    "description": "to reuse the same texture",
                    "type": "Texture"
                },
                {
                    "name": "render_settings",
                    "description": "",
                    "type": "RenderSettings"
                },
                {
                    "name": "near",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "far",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the resulting texture",
                "type": "Texture"
            },
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 1307,
            "description": "Renders the material preview to an image",
            "itemtype": "method",
            "name": "renderMaterialPreview",
            "params": [
                {
                    "name": "material",
                    "description": "",
                    "type": "Material"
                },
                {
                    "name": "size",
                    "description": "image size",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "could be environment_texture",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the preview image (in canvas format)",
                "type": "Image"
            },
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 1347,
            "description": "Returns the last camera that falls into a given screen position",
            "itemtype": "method",
            "name": "getCameraAtPosition",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "scene",
                    "description": "if not specified last rendered scene will be used",
                    "type": "SceneTree"
                }
            ],
            "return": {
                "description": "the camera",
                "type": "Camera"
            },
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 19,
            "description": "Sets up everything (prepare meshes, shaders, and so)",
            "itemtype": "method",
            "name": "init",
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 239,
            "description": "A helper to create shaders when you only want to specify some basic shading",
            "itemtype": "method",
            "name": "createSurfaceShader",
            "params": [
                {
                    "name": "surface_function",
                    "description": "GLSL code like: \"vec4 surface_function( vec3 pos, vec3 normal, vec2 coord ) { return vec4(1.0); } \";",
                    "type": "String"
                },
                {
                    "name": "macros",
                    "description": "[optional] object containing the macros",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the resulting shader",
                "type": "GL.Shader"
            },
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 288,
            "description": "clears the stack",
            "itemtype": "method",
            "name": "reset",
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 304,
            "description": "Sets the color used to paint primitives",
            "itemtype": "method",
            "name": "setColor",
            "params": [
                {
                    "name": "color",
                    "description": "",
                    "type": "Vec3|vec4"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 315,
            "description": "Sets the alpha used to paint primitives",
            "itemtype": "method",
            "name": "setAlpha",
            "params": [
                {
                    "name": "alpha",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 325,
            "description": "Sets the point size",
            "itemtype": "method",
            "name": "setPointSize",
            "params": [
                {
                    "name": "v",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 335,
            "description": "Sets the camera to use during the rendering, this is already done by LS.Renderer",
            "itemtype": "method",
            "name": "setCamera",
            "params": [
                {
                    "name": "camera",
                    "description": "",
                    "type": "LS.Camera"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 350,
            "description": "Specifies the camera position (used to compute point size)",
            "itemtype": "method",
            "name": "setCameraPosition",
            "params": [
                {
                    "name": "center",
                    "description": "",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 372,
            "description": "Specifies the camera view and projection matrices",
            "itemtype": "method",
            "name": "setViewProjectionMatrix",
            "params": [
                {
                    "name": "view",
                    "description": "",
                    "type": "Mat4"
                },
                {
                    "name": "projection",
                    "description": "",
                    "type": "Mat4"
                },
                {
                    "name": "vp",
                    "description": "viewprojection matrix [optional]",
                    "type": "Mat4"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 389,
            "description": "Specifies the transformation matrix to apply to the mesh",
            "itemtype": "method",
            "name": "setMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "",
                    "type": "Mat4"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 399,
            "description": "Multiplies the current matrix by a given one",
            "itemtype": "method",
            "name": "multMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "",
                    "type": "Mat4"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 409,
            "description": "Render lines given a set of points",
            "itemtype": "method",
            "name": "renderLines",
            "params": [
                {
                    "name": "points",
                    "description": "",
                    "type": "Float32Array|Array"
                },
                {
                    "name": "colors",
                    "description": "[optional]",
                    "type": "Float32Array|Array"
                },
                {
                    "name": "strip",
                    "description": "[optional] if the lines are a line strip (one consecutive line)",
                    "type": "Bool"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 431,
            "description": "Render points given a set of positions (and colors)",
            "itemtype": "method",
            "name": "renderPoints",
            "params": [
                {
                    "name": "points",
                    "description": "",
                    "type": "Float32Array|Array"
                },
                {
                    "name": "colors",
                    "description": "[optional]",
                    "type": "Float32Array|Array"
                },
                {
                    "name": "shader",
                    "description": "[optional]",
                    "type": "GL.Shader"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 465,
            "description": "Render round points given a set of positions (and colors)",
            "itemtype": "method",
            "name": "renderRoundPoints",
            "params": [
                {
                    "name": "points",
                    "description": "",
                    "type": "Float32Array|Array"
                },
                {
                    "name": "colors",
                    "description": "[optional]",
                    "type": "Float32Array|Array"
                },
                {
                    "name": "shader",
                    "description": "[optional]",
                    "type": "GL.Shader"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 495,
            "description": "Render points with color, size, and texture binded in 0",
            "itemtype": "method",
            "name": "renderPointsWithSize",
            "params": [
                {
                    "name": "points",
                    "description": "",
                    "type": "Float32Array|Array"
                },
                {
                    "name": "colors",
                    "description": "[optional]",
                    "type": "Float32Array|Array"
                },
                {
                    "name": "sizes",
                    "description": "[optional]",
                    "type": "Float32Array|Array"
                },
                {
                    "name": "texture",
                    "description": "[optional]",
                    "type": "GL.Texture"
                },
                {
                    "name": "shader",
                    "description": "[optional]",
                    "type": "GL.Shader"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 543,
            "description": "Render points with color, size, and texture binded in 0",
            "itemtype": "method",
            "name": "renderRectangle",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "in_z",
                    "description": "[optional] if the plane is aligned with the z plane",
                    "type": "Boolean"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 590,
            "description": "Renders a circle",
            "itemtype": "method",
            "name": "renderCircle",
            "params": [
                {
                    "name": "radius",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "segments",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "in_z",
                    "description": "[optional] if the circle is aligned with the z plane",
                    "type": "Boolean"
                },
                {
                    "name": "filled",
                    "description": "[optional] renders the interior",
                    "type": "Boolean"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 604,
            "description": "Render a filled circle",
            "itemtype": "method",
            "name": "renderSolidCircle",
            "params": [
                {
                    "name": "radius",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "segments",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "in_z",
                    "description": "[optional] if the circle is aligned with the z plane",
                    "type": "Boolean"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 650,
            "description": "Renders three circles to form a simple spherical shape",
            "itemtype": "method",
            "name": "renderWireSphere",
            "params": [
                {
                    "name": "radius",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "segments",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 677,
            "description": "Renders a wire box (box made of lines, not filled)",
            "itemtype": "method",
            "name": "renderWireBox",
            "params": [
                {
                    "name": "sizex",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "sizey",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "sizez",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 703,
            "description": "Renders a solid box",
            "itemtype": "method",
            "name": "renderSolidBox",
            "params": [
                {
                    "name": "sizex",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "sizey",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "sizez",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 792,
            "description": "Renders a cone",
            "itemtype": "method",
            "name": "renderCone",
            "params": [
                {
                    "name": "radius",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "segments",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "in_z",
                    "description": "aligned with z axis",
                    "type": "Boolean"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 829,
            "description": "Renders a cylinder",
            "itemtype": "method",
            "name": "renderCylinder",
            "params": [
                {
                    "name": "radius",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "segments",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "in_z",
                    "description": "aligned with z axis",
                    "type": "Boolean"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 843,
            "description": "Renders an image",
            "itemtype": "method",
            "name": "renderImage",
            "params": [
                {
                    "name": "position",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "image",
                    "description": "from an URL, or a texture",
                    "type": "Image|Texture|String"
                },
                {
                    "name": "size",
                    "description": "[optional=10]",
                    "type": "Number"
                },
                {
                    "name": "fixed_size",
                    "description": "[optional=false] (camera distance do not affect size)",
                    "type": "Boolean"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 907,
            "description": "Renders a given mesh applyting the stack transformations",
            "itemtype": "method",
            "name": "renderMesh",
            "params": [
                {
                    "name": "mesh",
                    "description": "",
                    "type": "GL.Mesh"
                },
                {
                    "name": "primitive",
                    "description": "[optional=gl.TRIANGLES] GL.TRIANGLES, gl.LINES, gl.POINTS, ...",
                    "type": "Enum"
                },
                {
                    "name": "indices",
                    "description": "[optional=\"triangles\"] the name of the buffer in the mesh with the indices",
                    "type": "String"
                },
                {
                    "name": "range_start",
                    "description": "[optional] in case of rendering a range, the start primitive",
                    "type": "Number"
                },
                {
                    "name": "range_length",
                    "description": "[optional] in case of rendering a range, the number of primitives",
                    "type": "Number"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 961,
            "description": "Renders a text in the current matrix position",
            "itemtype": "method",
            "name": "renderText",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 1068,
            "description": "pushes the transform matrix into the stack to save the state",
            "itemtype": "method",
            "name": "push",
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 1082,
            "description": "takes the matrix from the top position of the stack to restore the last saved state",
            "itemtype": "method",
            "name": "push",
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 1093,
            "description": "clears the transform matrix setting it to an identity",
            "itemtype": "method",
            "name": "identity",
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 1102,
            "description": "changes the scale of the transform matrix. The parameters could be a vec3, a single number (then the scale is uniform in all axis) or three numbers",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "x",
                    "description": "could be an array of 3, one value (if no other values are specified then it is an uniform scaling)",
                    "type": "Vec3|array|number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 1119,
            "description": "applies a translation to the transform matrix",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "x",
                    "description": "could be an array of 3 or the x transform",
                    "type": "Vec3|number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 1134,
            "description": "applies a translation to the transform matrix",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle",
                    "description": "in degrees",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "could be the x component or the full axis",
                    "type": "Number|vec3"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 1150,
            "description": "moves an object to a given position and forces it to look to another direction\nWarning: it doesnt changes the camera in any way, only the transform matrix",
            "itemtype": "method",
            "name": "lookAt",
            "params": [
                {
                    "name": "position",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "target",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "up",
                    "description": "",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/draw.js",
            "line": 1175,
            "description": "projects a point from 3D space to 2D space (multiply by MVP)",
            "itemtype": "method",
            "name": "project",
            "params": [
                {
                    "name": "position",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "dest",
                    "description": "[optional]",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the point in screen space (in normalized coordinates)",
                "type": "Vec3"
            },
            "class": "LS.Draw",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/wbin.js",
            "line": 56,
            "description": "Allows to check if one Uint8Array contains a WBin file",
            "itemtype": "method",
            "name": "WBin.isWBin",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "UInt8Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "LS.WBin",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/wbin.js",
            "line": 71,
            "description": "Builds a WBin data stream from an object (every property of the object will be considered a lump with data)\nIt supports Numbers, Strings and TypedArrays or ArrayBuffer",
            "itemtype": "method",
            "name": "WBin.create",
            "params": [
                {
                    "name": "origin",
                    "description": "object containing all the lumps, the key will be used as lump name",
                    "type": "Object"
                },
                {
                    "name": "origin_class_name",
                    "description": "[Optional] allows to add a classname to the WBin, this is used to detect which class to instance when extracting it",
                    "type": "String"
                }
            ],
            "return": {
                "description": "all the bytes",
                "type": "Uint8Array"
            },
            "class": "LS.WBin",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/wbin.js",
            "line": 210,
            "description": "Extract the info from a Uint8Array containing WBin info and returns the object with all the lumps.\nIf the data contains info about the class to instantiate, the WBin instantiates the class and passes the data to it",
            "itemtype": "method",
            "name": "WBin.load",
            "params": [
                {
                    "name": "data_array",
                    "description": "",
                    "type": "UInt8Array"
                },
                {
                    "name": "skip_classname",
                    "description": "avoid getting the instance of the class specified in classname, and get only the lumps",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "Could be an Object with all the lumps or an instance to the class specified in the WBin data",
                "type": "*"
            },
            "class": "LS.WBin",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/wbin.js",
            "line": 302,
            "description": "Extract the header info from an ArrayBuffer (it contains version, and lumps info)",
            "itemtype": "method",
            "name": "WBin.getHeaderInfo",
            "params": [
                {
                    "name": "data_array",
                    "description": "",
                    "type": "UInt8Array"
                }
            ],
            "return": {
                "description": "Header",
                "type": "Object"
            },
            "class": "LS.WBin",
            "namespace": "LS"
        },
        {
            "file": "../src/component.js",
            "line": 69,
            "description": "Create a clone of this node (the UID is removed to avoid collisions)",
            "itemtype": "method",
            "name": "clone",
            "class": "LS.Component",
            "namespace": "LS"
        },
        {
            "file": "../src/component.js",
            "line": 81,
            "description": "To create a new property for this component adding some extra useful info to help the editor",
            "itemtype": "method",
            "name": "createProperty",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the property as it will be accessed",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value to assign by default to this property",
                    "type": "*"
                },
                {
                    "name": "type",
                    "description": "[optional] an string identifying the type of the variable, could be \"number\",\"string\",\"Texture\",\"vec3\",\"mat4\", or an object with all the info",
                    "type": "String|Object"
                },
                {
                    "name": "setter",
                    "description": "[optional] setter function, otherwise one will be created",
                    "type": "Function"
                },
                {
                    "name": "getter",
                    "description": "[optional] getter function, otherwise one will be created",
                    "type": "Function"
                }
            ],
            "class": "LS.Component",
            "namespace": "LS"
        },
        {
            "file": "../src/component.js",
            "line": 146,
            "description": "Returns the locator string of this component",
            "itemtype": "method",
            "name": "getLocator",
            "return": {
                "description": "the locator string of this component",
                "type": "String"
            },
            "class": "LS.Component",
            "namespace": "LS"
        },
        {
            "file": "../src/component.js",
            "line": 158,
            "description": "Bind one object event to a method in this component",
            "itemtype": "method",
            "name": "bind",
            "params": [
                {
                    "name": "object",
                    "description": "the dispatcher of the event you want to react to",
                    "type": "*"
                },
                {
                    "name": "event",
                    "description": "the name of the event to bind to",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "the callback to call",
                    "type": "Function"
                },
                {
                    "name": "type",
                    "description": "[optional] an string identifying the type of the variable, could be \"number\",\"string\",\"Texture\",\"vec3\",\"mat4\", or an object with all the info",
                    "type": "String|Object"
                },
                {
                    "name": "setter",
                    "description": "[optional] setter function, otherwise one will be created",
                    "type": "Function"
                },
                {
                    "name": "getter",
                    "description": "[optional] getter function, otherwise one will be created",
                    "type": "Function"
                }
            ],
            "class": "LS.Component",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 20,
            "description": "Adds a component to this node.",
            "itemtype": "method",
            "name": "configureComponents",
            "params": [
                {
                    "name": "info",
                    "description": "object containing all the info from a previous serialization",
                    "type": "Object"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 49,
            "description": "Adds a component to this node.",
            "itemtype": "method",
            "name": "serializeComponents",
            "params": [
                {
                    "name": "o",
                    "description": "container where the components will be stored",
                    "type": "Object"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 76,
            "description": "returns an array with all the components",
            "itemtype": "method",
            "name": "getComponents",
            "return": {
                "description": "all the components",
                "type": "Array"
            },
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 86,
            "description": "Adds a component to this node. (maybe attach would been a better name)",
            "itemtype": "method",
            "name": "addComponent",
            "params": [
                {
                    "name": "component",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "component added",
                "type": "Object"
            },
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 124,
            "description": "Removes a component from this node.",
            "itemtype": "method",
            "name": "removeComponent",
            "params": [
                {
                    "name": "component",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 153,
            "description": "Removes all components from this node.",
            "itemtype": "method",
            "name": "removeAllComponents",
            "params": [
                {
                    "name": "component",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 165,
            "description": "Returns if the class has an instance of this component",
            "itemtype": "method",
            "name": "hasComponent",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Bool"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 192,
            "description": "Returns the first component of this container that is of the same class",
            "itemtype": "method",
            "name": "getComponent",
            "params": [
                {
                    "name": "component_class",
                    "description": "the class to search a component from (not the name of the class)",
                    "type": "Object"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 218,
            "description": "Returns the component with the given uid",
            "itemtype": "method",
            "name": "getComponentByUId",
            "params": [
                {
                    "name": "uid",
                    "description": "the uid to search",
                    "type": "String"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 233,
            "description": "Returns the position in the components array of this component",
            "itemtype": "method",
            "name": "getIndexOfComponent",
            "params": [
                {
                    "name": "position",
                    "description": "in the array, -1 if not found",
                    "type": "Number"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 245,
            "description": "Returns the component at index position",
            "itemtype": "method",
            "name": "getComponentByIndex",
            "params": [
                {
                    "name": "component",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 257,
            "description": "Changes the order of a component",
            "itemtype": "method",
            "name": "setComponentIndex",
            "params": [
                {
                    "name": "component",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 286,
            "description": "executes the method with a given name in all the components",
            "itemtype": "method",
            "name": "processActionInComponents",
            "params": [
                {
                    "name": "action_name",
                    "description": "the name of the function to execute in all components (in string format)",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "array with every parameter that the function may need",
                    "type": "Array"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 24,
            "description": "Adds one child to this instance",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "child",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "index",
                    "description": "[optional]  in which position you want to insert it, if not specified it goes to the last position",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "[optional] data to be passed when adding it, used for special cases when moving nodes around",
                    "type": "*"
                }
            ],
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 109,
            "description": "Removes the node from its parent (and from the scene tree)",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "node",
                    "description": "this child to remove",
                    "type": "Node"
                }
            ],
            "param1": "{*} param1 data passed to onChildRemoved",
            "param2": "{*} param2 data passed to onChildRemoved as second parameter",
            "return": {
                "description": "returns true if it was found and removed",
                "type": "Boolean"
            },
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 163,
            "description": "Remove node from parent",
            "itemtype": "method",
            "name": "destroy",
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 175,
            "description": "Serialize the data from all the children",
            "itemtype": "method",
            "name": "serializeChildren",
            "return": {
                "description": "array containing all serialized data from every children",
                "type": "Array"
            },
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 190,
            "description": "Configure every children with the data",
            "itemtype": "method",
            "name": "configureChildren",
            "return": {
                "description": "o array containing all serialized data",
                "type": "Array"
            },
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 216,
            "description": "Returns parent node",
            "itemtype": "method",
            "name": "getParent",
            "return": {
                "description": "parent node",
                "type": "SceneNode"
            },
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 310,
            "description": "get all nodes below this in the hierarchy (children and children of children)",
            "itemtype": "method",
            "name": "getDescendants",
            "return": {
                "description": "array containing all descendants",
                "type": "Array"
            },
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 23,
            "description": "Generates a UUID based in the user-agent, time, random and sequencial number. Used for Nodes and Components.",
            "itemtype": "method",
            "name": "generateUId",
            "return": {
                "description": "uuid",
                "type": "String"
            },
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 39,
            "description": "validates name string to ensure there is no forbidden characters\nvalid characters are letters, numbers, spaces, dash, underscore and dot",
            "itemtype": "method",
            "name": "validateName",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 54,
            "description": "Contains all the registered components",
            "itemtype": "property",
            "name": "Components",
            "type": "{Object}",
            "default": "{}",
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 63,
            "description": "Register a component (or several) so it is listed when searching for new components to attach",
            "itemtype": "method",
            "name": "registerComponent",
            "params": [
                {
                    "name": "c",
                    "description": "component class to register",
                    "type": "ComponentClass"
                }
            ],
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 98,
            "description": "Tells you if one class is a registered component class",
            "itemtype": "method",
            "name": "isClassComponent",
            "params": [
                {
                    "name": "comp",
                    "description": "component class to evaluate",
                    "type": "ComponentClass"
                }
            ],
            "return": {
                "description": "true if the component class is registered",
                "type": "Boolean"
            },
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 111,
            "description": "Is a wrapper for callbacks that throws an LS \"code_error\" in case something goes wrong (needed to catch the error from the system)",
            "itemtype": "method",
            "name": "safeCall",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "params",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "instance",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 136,
            "description": "Is a wrapper for setTimeout that throws an LS \"code_error\" in case something goes wrong (needed to catch the error from the system)",
            "itemtype": "method",
            "name": "setTimeout",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "time",
                    "description": "in ms",
                    "type": "Number"
                },
                {
                    "name": "timer_id",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 158,
            "description": "Is a wrapper for setInterval that throws an LS \"code_error\" in case something goes wrong (needed to catch the error from the system)",
            "itemtype": "method",
            "name": "setInterval",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "time",
                    "description": "in ms",
                    "type": "Number"
                },
                {
                    "name": "timer_id",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 180,
            "description": "copy the properties (methods and properties) of origin class into target class",
            "itemtype": "method",
            "name": "extendClass",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Class"
                },
                {
                    "name": "origin",
                    "description": "",
                    "type": "Class"
                }
            ],
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 215,
            "description": "Clones an object (no matter where the object came from)\n- It skip attributes starting with \"_\" or \"jQuery\" or functions\n- to the rest it applies JSON.parse( JSON.stringify ( obj ) )\n- use it carefully",
            "itemtype": "method",
            "name": "cloneObject",
            "params": [
                {
                    "name": "object",
                    "description": "the object to clone",
                    "type": "Object"
                },
                {
                    "name": "target=null",
                    "description": "optional, the destination object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "returns the cloned object",
                "type": "Object"
            },
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 274,
            "description": "Clears all the uids inside this object and children (it also works with serialized object)",
            "itemtype": "method",
            "name": "clearUIds",
            "params": [
                {
                    "name": "root",
                    "description": "could be a node or an object from a node serialization",
                    "type": "Object"
                }
            ],
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 314,
            "description": "Returns an object class name (uses the constructor toString)",
            "itemtype": "method",
            "name": "getObjectClassName",
            "params": [
                {
                    "name": "the",
                    "description": "object to see the class name",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "returns the string with the name",
                "type": "String"
            },
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 339,
            "description": "Returns an string with the class name",
            "itemtype": "method",
            "name": "getClassName",
            "params": [
                {
                    "name": "class",
                    "description": "object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "returns the string with the name",
                "type": "String"
            },
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 364,
            "description": "Returns the public properties of one object and the type",
            "itemtype": "method",
            "name": "getObjectProperties",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "returns object with attribute name and its type",
                "type": "Object"
            },
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 465,
            "description": "Contains all the registered material classes",
            "itemtype": "property",
            "name": "MaterialClasses",
            "type": "{Object}",
            "default": "{}",
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 474,
            "description": "Register a Material class so it is listed when searching for new materials to attach",
            "itemtype": "method",
            "name": "registerMaterialClass",
            "params": [
                {
                    "name": "comp",
                    "description": "component class to register",
                    "type": "ComponentClass"
                }
            ],
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 496,
            "description": "Returns the DOM element responsible for the GUI of the app. This is helpful because this GUI will be automatically remove if the app finishes.",
            "itemtype": "method",
            "name": "getGUIElement",
            "return": {
                "description": "",
                "type": "HTMLElement"
            },
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 518,
            "description": "Returns an script context using the script name (not the node name), usefull to pass data between scripts.",
            "itemtype": "method",
            "name": "getScript",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the script according to the Script component.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the context of the script.",
                "type": "Object"
            },
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 536,
            "description": "Returns an script context using the script name (not the node name), usefull to pass data between scripts.",
            "itemtype": "method",
            "name": "getScript",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the script according to the Script component.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the context of the script.",
                "type": "Object"
            },
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 558,
            "description": "Assigns a value to a property of one node in the scene, just by using a string identifier\nExample:  LSQ.set(\"mynode|a_child/MeshRenderer/enabled\",false);",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "locator",
                    "description": "the locator string identifying the property",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "value to assign to property",
                    "type": "*"
                }
            ],
            "class": "LS.LSQ",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 572,
            "description": "Retrieves the value of a property of one node in the scene, just by using a string identifier\nExample: var value = LSQ.get(\"mynode|a_child/MeshRenderer/enabled\");",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "locator",
                    "description": "the locator string identifying the property",
                    "type": "String"
                }
            ],
            "return": {
                "description": "value of the property",
                "type": "*"
            },
            "class": "LS.LSQ",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 587,
            "description": "Shortens a locator that uses unique identifiers to a simpler one, but be careful, because it uses names instead of UIDs it could point to the wrong property\nExample: \"@NODE--a40661-1e8a33-1f05e42-56/@COMP--a40661-1e8a34-1209e28-57/size\" -> \"node|child/Collider/size\"",
            "itemtype": "method",
            "name": "shortify",
            "params": [
                {
                    "name": "locator",
                    "description": "the locator string to shortify",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the locator using names instead of UIDs",
                "type": "String"
            },
            "class": "LS.LSQ",
            "namespace": "LS"
        },
        {
            "file": "../src/formats.js",
            "line": 16,
            "description": "Tells the system info about this file format\nInfo should contain fields like type:\"image\", resource: \"Mesh|Texture\", format: \"text|binary\", parse: function, native: true|false",
            "itemtype": "method",
            "name": "addFormat",
            "class": "LS.Formats",
            "namespace": "LS"
        },
        {
            "file": "../src/formats.js",
            "line": 42,
            "description": "Parse some data and returns the resulting resource",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "could be a string, binary, arraybuffer, xml...",
                    "type": "*"
                },
                {
                    "name": "options",
                    "description": "how the file should be parsed",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the final resource, could be a Texture, a Mesh, or an object",
                "type": "*"
            },
            "class": "LS.Formats",
            "namespace": "LS"
        },
        {
            "file": "../src/network.js",
            "line": 2,
            "description": "A front-end for XMLHttpRequest so it is simpler and more cross-platform",
            "itemtype": "method",
            "name": "request",
            "params": [
                {
                    "name": "request",
                    "description": "object with the fields for the request: \n\t\t\tdataType: result type {text,xml,json,binary,arraybuffer,image}, data: object with form fields, callbacks supported: {success, error, progress}",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the XMLHttpRequest of the petition",
                "type": "XMLHttpRequest"
            },
            "class": "LS.Collision",
            "namespace": "LS"
        },
        {
            "file": "../src/network.js",
            "line": 116,
            "description": "retrieve a file from url (you can bind LEvents to done and fail)",
            "itemtype": "method",
            "name": "requestFile",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "form params",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "LS.Collision",
            "namespace": "LS"
        },
        {
            "file": "../src/network.js",
            "line": 133,
            "description": "retrieve a JSON file from url (you can bind LEvents to done and fail)",
            "itemtype": "method",
            "name": "requestJSON",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "form params",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "LS.Collision",
            "namespace": "LS"
        },
        {
            "file": "../src/network.js",
            "line": 150,
            "description": "retrieve a text file from url (you can bind LEvents to done and fail)",
            "itemtype": "method",
            "name": "requestText",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "form params",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "LS.Collision",
            "namespace": "LS"
        },
        {
            "file": "../src/network.js",
            "line": 167,
            "description": "Request script and inserts it in the DOM",
            "itemtype": "method",
            "name": "requireScript",
            "params": [
                {
                    "name": "url",
                    "description": "could be an array with urls to load in order",
                    "type": "String"
                },
                {
                    "name": "on_complete",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "on_error",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "on_progress",
                    "description": "(if several files are required, on_progress is called after every file is added to the DOM)",
                    "type": "Function"
                }
            ],
            "class": "LS.Collision",
            "namespace": "LS"
        },
        {
            "file": "../src/physics.js",
            "line": 66,
            "description": "Computes the instance bounding box in world space from the one in local space",
            "itemtype": "method",
            "name": "updateAABB",
            "class": "LS.PhysicsInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/physics.js",
            "line": 96,
            "description": "Cast a ray that traverses the scene checking for collisions with Colliders",
            "itemtype": "method",
            "name": "raycast",
            "params": [
                {
                    "name": "origin",
                    "description": "in world space",
                    "type": "Vec3"
                },
                {
                    "name": "direction",
                    "description": "in world space",
                    "type": "Vec3"
                },
                {
                    "name": "options",
                    "description": "( max_dist maxium distance, layers which layers to check, scene, first_collision )",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Array of Collision objects containing all the nodes that collided with the ray or null in the form [SceneNode, Collider, collision point, distance]",
                "type": "Array"
            },
            "class": "LS.Physics",
            "namespace": "LS"
        },
        {
            "file": "../src/physics.js",
            "line": 183,
            "description": "Test if a sphere collides with any of the colliders in the scene",
            "itemtype": "method",
            "name": "testSphere",
            "params": [
                {
                    "name": "origin",
                    "description": "in world space",
                    "type": "Vec3"
                },
                {
                    "name": "radius",
                    "description": "",
                    "type": "Radius"
                },
                {
                    "name": "options",
                    "description": "layers, colliders, scene",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the first PhysicsObject that collided with, otherwise null",
                "type": "PhysicsInstance"
            },
            "class": "LS.Physics",
            "namespace": "LS"
        },
        {
            "file": "../src/picking.js",
            "line": 11,
            "description": "Renders the pixel and retrieves the color to detect which object it was, slow but accurate",
            "itemtype": "method",
            "name": "getNodeAtCanvasPosition",
            "params": [
                {
                    "name": "x",
                    "description": "in canvas coordinates",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "in canvas coordinates",
                    "type": "Number"
                },
                {
                    "name": "camera",
                    "description": "default is all cameras",
                    "type": "Camera"
                },
                {
                    "name": "layers",
                    "description": "default is 0xFFFF which is all",
                    "type": "Number"
                },
                {
                    "name": "scene",
                    "description": "default is GlobalScene",
                    "type": "SceneTree"
                }
            ],
            "class": "LS.Picking",
            "namespace": "LS"
        },
        {
            "file": "../src/picking.js",
            "line": 38,
            "description": "Returns the instance under a screen position",
            "itemtype": "method",
            "name": "getInstanceAtCanvasPosition",
            "params": [
                {
                    "name": "x",
                    "description": "in canvas coordinates",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "in canvas coordinates",
                    "type": "Number"
                },
                {
                    "name": "camera",
                    "description": "",
                    "type": "Camera"
                },
                {
                    "name": "layers",
                    "description": "default is 0xFFFF which is all",
                    "type": "Number"
                },
                {
                    "name": "scene",
                    "description": "",
                    "type": "SceneTree"
                }
            ],
            "return": {
                "description": "the info supplied by the picker (usually a SceneNode)",
                "type": "Object"
            },
            "class": "LS.Picking",
            "namespace": "LS"
        },
        {
            "file": "../src/picking.js",
            "line": 71,
            "description": "Cast a ray that traverses the scene checking for collisions with RenderInstances\nSimilar to Physics.raycast but using only the bounding boxes of the visible meshes",
            "itemtype": "method",
            "name": "raycast",
            "params": [
                {
                    "name": "origin",
                    "description": "in world space",
                    "type": "Vec3"
                },
                {
                    "name": "direction",
                    "description": "in world space",
                    "type": "Vec3"
                },
                {
                    "name": "options",
                    "description": "( max_distance: maxium ray distance, layers, scene, max_distance, first_collision : returns the first collision (which could be not the closest one) )",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "array containing all the RenderInstances that collided with the ray in the form [SceneNode, RenderInstance, collision point, distance]",
                "type": "Array"
            },
            "class": "LS.Picking",
            "namespace": "LS"
        },
        {
            "file": "../src/picking.js",
            "line": 159,
            "description": "Returns a color you should use to paint this node during picking rendering\nyou tell what info you want to retrieve associated with this object if it is clicked",
            "itemtype": "method",
            "name": "getNextPickingColor",
            "params": [
                {
                    "name": "info",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "array containing all the RenderInstances that collided with the ray",
                "type": "Vec3"
            },
            "class": "LS.Picking",
            "namespace": "LS"
        },
        {
            "file": "../src/player.js",
            "line": 125,
            "description": "Loads an scene and triggers start",
            "itemtype": "method",
            "name": "loadScene",
            "params": [
                {
                    "name": "url",
                    "description": "url to the JSON file containing all the scene info",
                    "type": "String"
                },
                {
                    "name": "on_complete",
                    "description": "callback trigged when the scene and the resources are loaded",
                    "type": "Function"
                }
            ],
            "class": "LS.Player",
            "namespace": "LS"
        },
        {
            "file": "../src/player.js",
            "line": 148,
            "description": "loads Scene from object or JSON",
            "itemtype": "method",
            "name": "setScene",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "on_complete",
                    "description": "callback trigged when the scene and the resources are loaded",
                    "type": "Function"
                }
            ],
            "class": "LS.Player",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 50,
            "description": "Returns a string to append to any url that should use the browser cache (when updating server info)",
            "itemtype": "method",
            "name": "getNoCache",
            "params": [
                {
                    "name": "force",
                    "description": "force to return a nocache string ignoring the default configuration",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "a string to attach to a url so the file wont be cached",
                "type": "String"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 60,
            "description": "Resets all the resources cached, so it frees the memory",
            "itemtype": "method",
            "name": "reset",
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 72,
            "description": "Resources need to be parsed once the data has been received, some formats could be parsed using native functions (like images) others \nrequire to pass the data through a function.\nRegistering a resource preprocessor the data will be converted once it is in memory",
            "itemtype": "method",
            "name": "registerResourcePreProcessor",
            "params": [
                {
                    "name": "fileformats",
                    "description": "the extension of the formats that this function will parse",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "the function to call once the data must be processed, if the process is async it must return true",
                    "type": "Function"
                },
                {
                    "name": "data_type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "resource_type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 93,
            "description": "Some resources require to be processed right after being parsed to ensure they are ready (meshes need to have the AABB computed...)\nThis job could be done inside the parser but it is better to do it separatedly.",
            "itemtype": "method",
            "name": "registerResourcePostProcessor",
            "params": [
                {
                    "name": "resource_type",
                    "description": "the name of the class of the resource",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "the function to call once the data has been processed",
                    "type": "Function"
                }
            ],
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 106,
            "description": "Returns the filename extension from an url",
            "itemtype": "method",
            "name": "getExtension",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "filename extension",
                "type": "String"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 125,
            "description": "Returns the filename from a full path",
            "itemtype": "method",
            "name": "getFilename",
            "params": [
                {
                    "name": "fullpath",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "filename extension",
                "type": "String"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 141,
            "description": "Returns the folder from a fullpath",
            "itemtype": "method",
            "name": "getFolder",
            "params": [
                {
                    "name": "fullpath",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "folder name",
                "type": "String"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 154,
            "description": "Returns the filename without the extension",
            "itemtype": "method",
            "name": "getBasename",
            "params": [
                {
                    "name": "fullpath",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "filename extension",
                "type": "String"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 169,
            "description": "Cleans resource name (removing double slashes)",
            "itemtype": "method",
            "name": "cleanFullpath",
            "params": [
                {
                    "name": "fullpath",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "fullpath cleaned",
                "type": "String"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 184,
            "description": "Loads all the resources in the Object (it uses an object to store not only the filename but also the type)",
            "itemtype": "method",
            "name": "loadResources",
            "params": [
                {
                    "name": "resources",
                    "description": "contains all the resources, associated with its type",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "options to apply to the loaded resources",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                }
            ],
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 204,
            "description": "Set the base path where all the resources will be fetched (unless they have absolute URL)\nBy default it will use the website home address",
            "itemtype": "method",
            "name": "setPath",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 216,
            "description": "Set a proxy url where all non-local resources will be requested, allows to fetch assets to other servers.\nrequest will be in this form: proxy_url + \"/\" + url_with_protocol: ->   http://myproxy.com/google.com/images/...",
            "itemtype": "method",
            "name": "setProxy",
            "params": [
                {
                    "name": "proxy_url",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 231,
            "description": "transform a url to a full url taking into account proxy, virtual file systems and local_repository",
            "itemtype": "method",
            "name": "getFullURL",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "full url",
                "type": "String"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 284,
            "description": "Allows to associate a resource path like \"vfs:myfile.png\" to an url according to the value before the \":\".\nThis way we can have alias for different folders where the assets are stored.\nP.e:   \"e\",\"http://domain.com\"  -> will transform \"e:myfile.png\" in \"http://domain.com/myfile.png\"",
            "itemtype": "method",
            "name": "registerFileSystem",
            "params": [
                {
                    "name": "name",
                    "description": "the filesystem name (the string before the colons in the path)",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "the url to attach before",
                    "type": "String"
                }
            ],
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 298,
            "description": "Returns the resource if it has been loaded, if you want to force to load it, use load",
            "itemtype": "method",
            "name": "getResource",
            "params": [
                {
                    "name": "url",
                    "description": "where the resource is located (if its a relative url it depends on the path attribute)",
                    "type": "String"
                }
            ],
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 312,
            "description": "Marks the resource as modified, used in editor to know when a resource data should be updated",
            "itemtype": "method",
            "name": "resourceModified",
            "params": [
                {
                    "name": "resource",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 328,
            "description": "Unmarks the resource as modified",
            "itemtype": "method",
            "name": "resourceSaved",
            "params": [
                {
                    "name": "resource",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 342,
            "description": "Loads a generic resource, the type will be infered from the extension, if it is json or wbin it will be processed\nDo not use to load regular files (txts, csv, etc), instead use the LS.Network methods",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "where the resource is located (if its a relative url it depends on the path attribute)",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "options to apply to the loaded resource when processing it",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                },
                {
                    "name": "on_complete",
                    "description": "callback when the resource is loaded and cached, params: callback( url, resource, options )",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 424,
            "description": "Process resource get some form of data and transforms it to a resource (and Object ready to be used by the engine).\nIn most cases the process involves parsing and uploading to the GPU\nIt is called for every single resource that comes from an external source (URL) right after being loaded",
            "itemtype": "method",
            "name": "processResource",
            "params": [
                {
                    "name": "url",
                    "description": "where the resource is located (if its a relative url it depends on the path attribute)",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "the data of the resource (could be string, arraybuffer, image... )",
                    "type": "*"
                },
                {
                    "name": "options",
                    "description": "options to apply to the loaded resource",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                },
                {
                    "name": "on_complete",
                    "description": "once the resource is ready",
                    "type": "Function"
                }
            ],
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 529,
            "description": "Stores the resource inside the manager containers. This way it will be retrieveble by anybody who needs it.",
            "itemtype": "method",
            "name": "registerResource",
            "params": [
                {
                    "name": "filename",
                    "description": "fullpath",
                    "type": "String"
                },
                {
                    "name": "resource",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 567,
            "description": "removes the resources from all the containers",
            "itemtype": "method",
            "name": "unregisterResource",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true is removed, false if not found",
                "type": "Boolean"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 593,
            "description": "Returns an object with a representation of the resource internal data\nThe order to obtain that object is:\n1. test for _original_file (File or Blob)\n2. test for _original_data (ArrayBuffer)\n3. toBinary() (ArrayBuffer)\n4. toBlob() (Blob)\n5. toBase64() (String)\n6. serialize() (Object in JSON format)\n7. data property \n8. JSON.stringify(...)",
            "itemtype": "method",
            "name": "computeResourceInternalData",
            "params": [
                {
                    "name": "resource",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "it has two fields: data and encoding",
                "type": "Object"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 660,
            "description": "Used to load files and get them as File (or Blob)",
            "itemtype": "method",
            "name": "getURLasFile",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the file",
                "type": "File"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 679,
            "description": "Changes the name of a resource and sends an event to all components to change it accordingly",
            "itemtype": "method",
            "name": "renameResource",
            "params": [
                {
                    "name": "old",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "newname",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "skip_event",
                    "description": "ignore sending an event to all components to rename the resource",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "if the file was found",
                "type": "Boolean"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 715,
            "description": "Tells if it is loading resources",
            "itemtype": "method",
            "name": "isLoading",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 726,
            "description": "forces to try to reload again resources not found",
            "itemtype": "method",
            "name": "isLoading",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 743,
            "description": "returns a mesh resource if it is loaded",
            "itemtype": "method",
            "name": "getMesh",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Mesh"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 760,
            "description": "returns a texture resource if it is loaded",
            "itemtype": "method",
            "name": "getTexture",
            "params": [
                {
                    "name": "filename",
                    "description": "could be a texture itself in which case returns the same texture",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 801,
            "description": "Binds a callback for when a resource is loaded (in case you need to do something special)",
            "itemtype": "method",
            "name": "onceLoaded",
            "params": [
                {
                    "name": "fullpath",
                    "description": "of the resource you want to get the notification once is loaded",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "the function to call, it will be called as callback( fullpath, resource )",
                    "type": "Function"
                }
            ],
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 53,
            "description": "This initializes the content of the scene.\nCall it to clear the scene content",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": "Returns true on success",
                "type": "Boolean"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 102,
            "description": "Clears the scene using the init function\nand trigger a \"clear\" LEvent",
            "itemtype": "method",
            "name": "clear",
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 119,
            "description": "Fired when the whole scene is cleared",
            "itemtype": "event",
            "name": "clear",
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 128,
            "description": "Configure the Scene using an object (the object can be obtained from the function serialize)\nInserts the nodes, configure them, and change the parameters\nDestroys previously existing info",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "scene_info",
                    "description": "the object containing all the info about the nodes and config of the scene",
                    "type": "Object"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 222,
            "description": "Fired after the scene has been configured",
            "itemtype": "event",
            "name": "configure",
            "params": [
                {
                    "name": "scene_info",
                    "description": "contains all the info to do the configuration",
                    "type": "Object"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 231,
            "description": "Creates and object containing all the info about the scene and nodes.\nThe oposite of configure.\nIt calls the serialize method in every node",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "return a JS Object with all the scene info",
                "type": "Object"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 277,
            "description": "Fired after the scene has been serialized to an object",
            "itemtype": "event",
            "name": "serialize",
            "params": [
                {
                    "name": "object",
                    "description": "to store the persistent info",
                    "type": "Object"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 287,
            "description": "loads a scene from a JSON description",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "where the JSON object containing the scene is stored",
                    "type": "String"
                },
                {
                    "name": "on_complete",
                    "description": "the callback to call when the loading is complete",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "on_error",
                    "description": "the callback to call if there is a  loading error",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 311,
            "description": "Fired before loading scene",
            "itemtype": "event",
            "name": "beforeLoad",
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 331,
            "description": "Fired when the scene has been loaded but before the resources",
            "itemtype": "event",
            "name": "load",
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 342,
            "description": "Fired after all resources have been loaded",
            "itemtype": "event",
            "name": "loadCompleted",
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 430,
            "description": "Fired when a new node is added to this scene",
            "itemtype": "event",
            "name": "nodeAdded",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "LS.SceneNode"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 455,
            "description": "Fired after a node has been removed",
            "itemtype": "event",
            "name": "nodeRemoved",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "LS.SceneNode"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 472,
            "description": "retrieves a Node based on the name, path ( name|childname|etc ) or uid",
            "itemtype": "method",
            "name": "getNode",
            "params": [
                {
                    "name": "name",
                    "description": "node name to search",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the node or null if it didnt find it",
                "type": "Object"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 501,
            "description": "retrieves a Node that matches that name. It is fast because they are stored in an object.\nIf more than one object has the same name, the first one added to the tree is returned",
            "itemtype": "method",
            "name": "getNodeByName",
            "params": [
                {
                    "name": "name",
                    "description": "name of the node",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the node or null if it didnt find it",
                "type": "Object"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 514,
            "description": "retrieves a Node based on a given uid. It is fast because they are stored in an object",
            "itemtype": "method",
            "name": "getNodeByUId",
            "params": [
                {
                    "name": "uid",
                    "description": "uid of the node",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the node or null if it didnt find it",
                "type": "Object"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 526,
            "description": "retrieves a Node by its index",
            "itemtype": "method",
            "name": "getNodeByIndex",
            "params": [
                {
                    "name": "node",
                    "description": "index",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "returns the node at the 'index' position in the nodes array",
                "type": "Object"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 541,
            "description": "retrieves a node array filtered by the filter function",
            "itemtype": "method",
            "name": "filterNodes",
            "params": [
                {
                    "name": "filter",
                    "description": "a callback function that receives every node and must return true or false",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "array containing the nodes that passes the filter",
                "type": "Array"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 557,
            "description": "searches the component with this uid, it iterates through all the nodes and components (slow)",
            "itemtype": "method",
            "name": "findComponentByUId",
            "params": [
                {
                    "name": "uid",
                    "description": "uid of the node",
                    "type": "String"
                }
            ],
            "return": {
                "description": "component or null",
                "type": "Object"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 575,
            "description": "searches the material with this uid, it iterates through all the nodes (slow)",
            "itemtype": "method",
            "name": "findMaterialByUId",
            "params": [
                {
                    "name": "uid",
                    "description": "uid of the material",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Material or null",
                "type": "Object"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 598,
            "description": "Returns information of a node component property based on the locator of that property\nLocators are in the form of \"{NODE_UID}/{COMPONENT_UID}/{property_name}\"",
            "itemtype": "method",
            "name": "getPropertyInfo",
            "params": [
                {
                    "name": "locator",
                    "description": "locator of the property",
                    "type": "String"
                }
            ],
            "return": {
                "description": "object with node, component, name, and value",
                "type": "Object"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 626,
            "description": "Returns information of a node component property based on the locator of that property\nLocators are in the form of \"{NODE_UID}/{COMPONENT_UID}/{property_name}\"",
            "itemtype": "method",
            "name": "getPropertyInfoFromPath",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "object with node, component, name, and value",
                "type": "Object"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 652,
            "description": "Assigns a value to the property of a component in a node based on the locator of that property\nLocators are in the form of \"{NODE_UID}/{COMPONENT_UID}/{property_name}\"",
            "itemtype": "method",
            "name": "setPropertyValue",
            "params": [
                {
                    "name": "locator",
                    "description": "locator of the property",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value to assign",
                    "type": "*"
                },
                {
                    "name": "target",
                    "description": "[Optional] used to avoid searching for the component every time",
                    "type": "Component"
                }
            ],
            "return": {
                "description": "the target where the action was performed",
                "type": "Component"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 681,
            "description": "Assigns a value to the property of a component in a node based on the locator that property\nLocators are in the form of \"{NODE_UID}/{COMPONENT_UID}/{property_name}\"",
            "itemtype": "method",
            "name": "setPropertyValueFromPath",
            "params": [
                {
                    "name": "path",
                    "description": "a property locator split by \"/\"",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "the value to assign",
                    "type": "*"
                }
            ],
            "return": {
                "description": "the target where the action was performed",
                "type": "Component"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 709,
            "description": "loads all the resources of all the nodes in this scene\nit sends a signal to every node to get all the resources info\nand load them in bulk using the ResourceManager",
            "itemtype": "method",
            "name": "loadResources",
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 761,
            "description": "start the scene (triggers an \"start\" event)",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "dt",
                    "description": "delta time",
                    "type": "Number"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 774,
            "description": "Fired when the scene is starting to play",
            "itemtype": "event",
            "name": "start",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "LS.SceneTree"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 784,
            "description": "stop the scene (triggers an \"finish\" event)",
            "itemtype": "method",
            "name": "finish",
            "params": [
                {
                    "name": "dt",
                    "description": "delta time",
                    "type": "Number"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 796,
            "description": "Fired when the scene stops playing",
            "itemtype": "event",
            "name": "finish",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "LS.SceneTree"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 808,
            "description": "renders the scene using the assigned renderer",
            "itemtype": "method",
            "name": "render",
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 818,
            "description": "This methods crawls the whole tree and collects all the useful info (cameras, lights, render instances, colliders, etc)\nMostly rendering stuff but also some collision info.",
            "itemtype": "method",
            "name": "collectData",
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 956,
            "description": "Fired before doing an update",
            "itemtype": "event",
            "name": "beforeUpdate",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "LS.SceneTree"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 968,
            "description": "Fired while updating",
            "itemtype": "event",
            "name": "update",
            "params": [
                {
                    "name": "dt",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 977,
            "description": "Fired after updating the scene",
            "itemtype": "event",
            "name": "afterUpdate",
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 985,
            "description": "triggers an event to all nodes in the scene",
            "itemtype": "method",
            "name": "triggerInNodes",
            "params": [
                {
                    "name": "event_type",
                    "description": "event type name",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "data to send associated to the event",
                    "type": "Object"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/sceneNode.js",
            "line": 54,
            "description": "changes the node name",
            "itemtype": "method",
            "name": "setName",
            "params": [
                {
                    "name": "new_name",
                    "description": "the new name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "returns true if the name changed",
                "type": "Object"
            },
            "class": "LS.SceneNode",
            "namespace": "LS"
        },
        {
            "file": "../src/sceneNode.js",
            "line": 157,
            "description": "Node changed name",
            "itemtype": "event",
            "name": "name_changed",
            "params": [
                {
                    "name": "new_name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LS.SceneNode",
            "namespace": "LS"
        },
        {
            "file": "../src/sceneNode.js",
            "line": 175,
            "itemtype": "property",
            "name": "className",
            "type": "String",
            "class": "LS.SceneNode",
            "namespace": "LS"
        },
        {
            "file": "../src/sceneNode.js",
            "line": 572,
            "description": "Assigns this node to one layer",
            "itemtype": "method",
            "name": "setLayer",
            "params": [
                {
                    "name": "num",
                    "description": "layer number",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "LS.SceneNode",
            "namespace": "LS"
        },
        {
            "file": "../src/sceneNode.js",
            "line": 605,
            "description": "remember clones this node and returns the new copy (you need to add it to the scene to see it)",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "returns a cloned version of this node",
                "type": "Object"
            },
            "class": "LS.SceneNode",
            "namespace": "LS"
        },
        {
            "file": "../src/sceneNode.js",
            "line": 628,
            "description": "Configure this node from an object containing the info",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "info",
                    "description": "the object with all the info (comes from the serialize method)",
                    "type": "Object"
                }
            ],
            "class": "LS.SceneNode",
            "namespace": "LS"
        },
        {
            "file": "../src/sceneNode.js",
            "line": 735,
            "description": "Serializes this node by creating an object with all the info\nit contains info about the components too",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "returns the object with the info",
                "type": "Object"
            },
            "class": "LS.SceneNode",
            "namespace": "LS"
        },
        {
            "file": "../src/shadersManager.js",
            "line": 29,
            "description": "Initializes the shader manager",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "url",
                    "description": "a url to a shaders.xml can be specified to load the shaders",
                    "type": "String"
                }
            ],
            "class": "LS.ShadersManager",
            "namespace": "LS"
        },
        {
            "file": "../src/shadersManager.js",
            "line": 59,
            "description": "Reloads the XML file with the shaders, useful when editing the file",
            "itemtype": "method",
            "name": "reloadShaders",
            "params": [
                {
                    "name": "on_complete",
                    "description": "call when the shaders have been reloaded",
                    "type": "Function"
                }
            ],
            "class": "LS.ShadersManager",
            "namespace": "LS"
        },
        {
            "file": "../src/shadersManager.js",
            "line": 70,
            "description": "Resolves a shader query, returns the shader",
            "itemtype": "method",
            "name": "resolve",
            "params": [
                {
                    "name": "query",
                    "description": "",
                    "type": "ShaderQuery"
                }
            ],
            "return": {
                "description": "the shader, if not found the default shader is returned",
                "type": "GL.Shader"
            },
            "class": "LS.ShadersManager",
            "namespace": "LS"
        },
        {
            "file": "../src/shadersManager.js",
            "line": 82,
            "description": "Clears all the compiled shaders",
            "itemtype": "method",
            "name": "clearCache",
            "class": "LS.ShadersManager",
            "namespace": "LS"
        },
        {
            "file": "../src/shadersManager.js",
            "line": 93,
            "description": "Returns a compiled shader with this id and this macros",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "macros",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the shader, if not found the default shader is returned",
                "type": "GL.Shader"
            },
            "class": "LS.ShadersManager",
            "namespace": "LS"
        },
        {
            "file": "../src/shadersManager.js",
            "line": 183,
            "description": "Returns the info of a global shader",
            "itemtype": "method",
            "name": "getGlobalShaderInfo",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "shader info (code, macros supported, flags)",
                "type": "Object"
            },
            "class": "LS.ShadersManager",
            "namespace": "LS"
        },
        {
            "file": "../src/shadersManager.js",
            "line": 195,
            "description": "Compiles a shader, the vertex and fragment shader are cached indepently to speed up compilations but a unique name must be provided",
            "itemtype": "method",
            "name": "compileShader",
            "params": [
                {
                    "name": "vs_code",
                    "description": "the final source code for the vertex shader",
                    "type": "String"
                },
                {
                    "name": "fs_code",
                    "description": "the final source code for the fragment shader",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "an unique name that should be associated with this shader",
                    "type": "String"
                }
            ],
            "return": {
                "description": "shader",
                "type": "GL.Shader"
            },
            "class": "LS.ShadersManager",
            "namespace": "LS"
        },
        {
            "file": "../src/shadersManager.js",
            "line": 262,
            "description": "Stores a compiled shader program, so it can be reused",
            "itemtype": "method",
            "name": "registerCompiledShader",
            "params": [
                {
                    "name": "shader",
                    "description": "the compiled shader",
                    "type": "GL.Shader"
                },
                {
                    "name": "key",
                    "description": "unique id",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "the shader name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "shader",
                "type": "GL.Shader"
            },
            "class": "LS.ShadersManager",
            "namespace": "LS"
        },
        {
            "file": "../src/shadersManager.js",
            "line": 285,
            "description": "Loads shaders code from an XML file",
            "itemtype": "method",
            "name": "loadFromXML",
            "params": [
                {
                    "name": "url",
                    "description": "to the shaders file",
                    "type": "String"
                },
                {
                    "name": "reset_old",
                    "description": "to reset all the existing shaders once loaded",
                    "type": "Boolean"
                },
                {
                    "name": "ignore_cache",
                    "description": "force to ignore web cache",
                    "type": "Boolean"
                },
                {
                    "name": "on_complete",
                    "description": "callback once the file has been loaded and processed",
                    "type": "Function"
                }
            ],
            "class": "LS.ShadersManager",
            "namespace": "LS"
        },
        {
            "file": "../src/shadersManager.js",
            "line": 319,
            "description": "extracts all the shaders from the XML doc",
            "itemtype": "method",
            "name": "processShadersXML",
            "params": [
                {
                    "name": "xml",
                    "description": "",
                    "type": "XMLDocument"
                }
            ],
            "class": "LS.ShadersManager",
            "namespace": "LS"
        },
        {
            "file": "../src/shadersManager.js",
            "line": 397,
            "description": "extracts all the shaders from the XML doc",
            "itemtype": "method",
            "name": "registerGlobalShader",
            "params": [
                {
                    "name": "vs_code",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fs_code",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LS.ShadersManager",
            "namespace": "LS"
        },
        {
            "file": "../src/shadersManager.js",
            "line": 490,
            "description": "Register a code snippet ready to be used by the #import clause in the shader",
            "itemtype": "method",
            "name": "registerSnippet",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "code",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LS.ShadersManager",
            "namespace": "LS"
        },
        {
            "file": "../src/shadersManager.js",
            "line": 502,
            "description": "Returns the code of a snipper",
            "itemtype": "method",
            "name": "getSnippet",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "code",
                "type": "String"
            },
            "class": "LS.ShadersManager",
            "namespace": "LS"
        },
        {
            "file": "../src/shadersManager.js",
            "line": 526,
            "description": "Create some default shaders useful for generic situations (flat, texture and screenspace quad)",
            "itemtype": "method",
            "name": "createDefaultShaders",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "code",
                "type": "String"
            },
            "class": "LS.ShadersManager",
            "namespace": "LS"
        },
        {
            "file": "../src/utils.js",
            "line": 37,
            "description": "Resamples a full curve in values (useful to upload to GPU array)",
            "itemtype": "method",
            "name": "resampleCurve",
            "params": [
                {
                    "name": "values",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "minx",
                    "description": "min x value",
                    "type": "Number"
                },
                {
                    "name": "maxx",
                    "description": "max x value",
                    "type": "Number"
                },
                {
                    "name": "defaulty",
                    "description": "default y value",
                    "type": "Number"
                },
                {
                    "name": "numsamples",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "LS.LS",
            "namespace": "LS"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:239"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:239"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:304"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:315"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:325"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:335"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:350"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:372"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:372"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:372"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:389"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:399"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:409"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:409"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:409"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:431"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:431"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:431"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:465"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:465"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:465"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:495"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:495"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:495"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:495"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:495"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:543"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:543"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:543"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:590"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:590"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:590"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:590"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:604"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:604"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:604"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:650"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:650"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:677"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:677"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:677"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:703"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:703"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:703"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:792"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:792"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:792"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:792"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:829"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:829"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:829"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:829"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:843"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:843"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:843"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:843"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:907"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:907"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:907"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:907"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:907"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ../src/utils/draw.js:961"
        },
        {
            "message": "param name missing: {bool}",
            "line": " ../src/componentContainer.js:165"
        },
        {
            "message": "unknown tag: param1",
            "line": " ../src/compositePattern.js:109"
        },
        {
            "message": "unknown tag: param2",
            "line": " ../src/compositePattern.js:109"
        },
        {
            "message": "Missing item type",
            "line": " ../src/helpers/animation.js:148"
        }
    ]
}