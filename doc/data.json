{
    "project": {},
    "files": {
        "../src/components/VRCameraController.js": {
            "name": "../src/components/VRCameraController.js",
            "modules": {},
            "classes": {
                "VRCameraController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/animator.js": {
            "name": "../src/components/animator.js",
            "modules": {},
            "classes": {
                "Rotator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/camera.js": {
            "name": "../src/components/camera.js",
            "modules": {},
            "classes": {
                "LS.Components.Camera": 1
            },
            "fors": {},
            "namespaces": {
                "LS.Components": 1
            }
        },
        "../src/components/cameraController.js": {
            "name": "../src/components/cameraController.js",
            "modules": {},
            "classes": {
                "LS.Components.CameraController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/cameraFX.js": {
            "name": "../src/components/cameraFX.js",
            "modules": {},
            "classes": {
                "LS.Components.CameraFX": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/followNode.js": {
            "name": "../src/components/followNode.js",
            "modules": {},
            "classes": {
                "LS.Components.FollowNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/geometricPrimitive.js": {
            "name": "../src/components/geometricPrimitive.js",
            "modules": {},
            "classes": {
                "LS.Components.GeometricPrimitive": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/graphComponents.js": {
            "name": "../src/components/graphComponents.js",
            "modules": {},
            "classes": {
                "LS.Components.GraphComponent": 1,
                "LS.Components.FXGraphComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/knob.js": {
            "name": "../src/components/knob.js",
            "modules": {},
            "classes": {
                "LS.Components.Knob": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/light.js": {
            "name": "../src/components/light.js",
            "modules": {},
            "classes": {
                "LS.Components.Light": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/lightFX.js": {
            "name": "../src/components/lightFX.js",
            "modules": {},
            "classes": {
                "LS.Components.LightFX": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/meshRenderer.js": {
            "name": "../src/components/meshRenderer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../src/components/nodeManipulator.js": {
            "name": "../src/components/nodeManipulator.js",
            "modules": {},
            "classes": {
                "LS.Components.NodeManipulator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/playAnimation.js": {
            "name": "../src/components/playAnimation.js",
            "modules": {},
            "classes": {
                "LS.Components.PlayAnimation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/poser.js": {
            "name": "../src/components/poser.js",
            "modules": {},
            "classes": {
                "LS.Components.Poser": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/realtimeReflector.js": {
            "name": "../src/components/realtimeReflector.js",
            "modules": {},
            "classes": {
                "LS.Components.RealtimeReflector": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/skinnedMeshRenderer.js": {
            "name": "../src/components/skinnedMeshRenderer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../src/components/spherize.js": {
            "name": "../src/components/spherize.js",
            "modules": {},
            "classes": {
                "LS.Components.Spherize": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/target.js": {
            "name": "../src/components/target.js",
            "modules": {},
            "classes": {
                "LS.Components.Target": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/components/transform.js": {
            "name": "../src/components/transform.js",
            "modules": {},
            "classes": {
                "LS.Components.Transform": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/helpers/animation.js": {
            "name": "../src/helpers/animation.js",
            "modules": {},
            "classes": {
                "LS.Animation": 1,
                "LS.Animation.Track": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/materials/graphMaterial.js": {
            "name": "../src/materials/graphMaterial.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../src/materials/material.js": {
            "name": "../src/materials/material.js",
            "modules": {},
            "classes": {
                "LS.Material": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/materials/standardMaterial.js": {
            "name": "../src/materials/standardMaterial.js",
            "modules": {},
            "classes": {
                "LS.StandardMaterial": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/materials/surfaceMaterial.js": {
            "name": "../src/materials/surfaceMaterial.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../src/render/renderInstance.js": {
            "name": "../src/render/renderInstance.js",
            "modules": {},
            "classes": {
                "LS.RenderInstance": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/render/renderOptions.js": {
            "name": "../src/render/renderOptions.js",
            "modules": {},
            "classes": {
                "LS.RenderOptions": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/render/renderer.js": {
            "name": "../src/render/renderer.js",
            "modules": {},
            "classes": {
                "LS.Renderer": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/utils/lscript.js": {
            "name": "../src/utils/lscript.js",
            "modules": {},
            "classes": {
                "LS.LScript": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/utils/wbin.js": {
            "name": "../src/utils/wbin.js",
            "modules": {},
            "classes": {
                "LS.WBin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/componentContainer.js": {
            "name": "../src/componentContainer.js",
            "modules": {},
            "classes": {
                "LS.ComponentContainer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/compositePattern.js": {
            "name": "../src/compositePattern.js",
            "modules": {},
            "classes": {
                "LS.CompositePattern": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/context.js": {
            "name": "../src/context.js",
            "modules": {},
            "classes": {
                "LS.Context": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/core.js": {
            "name": "../src/core.js",
            "modules": {},
            "classes": {
                "LS.LS": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/network.js": {
            "name": "../src/network.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../src/physics.js": {
            "name": "../src/physics.js",
            "modules": {},
            "classes": {
                "LS.PhysicsInstance": 1,
                "LS.Physics": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/picking.js": {
            "name": "../src/picking.js",
            "modules": {},
            "classes": {
                "LS.Picking": 1
            },
            "fors": {},
            "namespaces": {
                "LS": 1
            }
        },
        "../src/prefab.js": {
            "name": "../src/prefab.js",
            "modules": {},
            "classes": {
                "LS.Prefab": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/resourcesManager.js": {
            "name": "../src/resourcesManager.js",
            "modules": {},
            "classes": {
                "LS.ResourcesManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/scene.js": {
            "name": "../src/scene.js",
            "modules": {},
            "classes": {
                "LS.SceneTree": 1,
                "LS.SceneNode": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "VRCameraController": {
            "name": "VRCameraController",
            "shortname": "VRCameraController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/components/VRCameraController.js",
            "line": 1,
            "description": "This component allow to integrate with WebVR to use VR Headset",
            "params": [
                {
                    "name": "o",
                    "description": "object with the serialized info",
                    "type": "Object"
                }
            ]
        },
        "Rotator": {
            "name": "Rotator",
            "shortname": "Rotator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/components/animator.js",
            "line": 1,
            "description": "Rotator rotate a mesh over time",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.Camera": {
            "name": "LS.Components.Camera",
            "shortname": "LS.Components.Camera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/camera.js",
            "line": 3,
            "description": "Camera that contains the info about a camera",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.CameraController": {
            "name": "LS.Components.CameraController",
            "shortname": "CameraController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/cameraController.js",
            "line": 1,
            "description": "Camera controller",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.CameraFX": {
            "name": "LS.Components.CameraFX",
            "shortname": "CameraFX",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/cameraFX.js",
            "line": 1,
            "description": "This component allow to create basic FX",
            "params": [
                {
                    "name": "o",
                    "description": "object with the serialized info",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.FollowNode": {
            "name": "LS.Components.FollowNode",
            "shortname": "FollowNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/followNode.js",
            "line": 1,
            "description": "FollowNode",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.GeometricPrimitive": {
            "name": "LS.Components.GeometricPrimitive",
            "shortname": "GeometricPrimitive",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/geometricPrimitive.js",
            "line": 1,
            "description": "GeometricPrimitive renders a primitive",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.GraphComponent": {
            "name": "LS.Components.GraphComponent",
            "shortname": "GraphComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/graphComponents.js",
            "line": 11,
            "description": "This component allow to integrate a behaviour graph on any object",
            "params": [
                {
                    "name": "o",
                    "description": "object with the serialized info",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.FXGraphComponent": {
            "name": "LS.Components.FXGraphComponent",
            "shortname": "FXGraphComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/graphComponents.js",
            "line": 176,
            "description": "This component allow to integrate a rendering post FX using a graph",
            "params": [
                {
                    "name": "o",
                    "description": "object with the serialized info",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.Knob": {
            "name": "LS.Components.Knob",
            "shortname": "Knob",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/knob.js",
            "line": 3,
            "description": "Knob allows to rotate a mesh like a knob",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.Light": {
            "name": "LS.Components.Light",
            "shortname": "Light",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/light.js",
            "line": 3,
            "description": "Light that contains the info about the camera",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.LightFX": {
            "name": "LS.Components.LightFX",
            "shortname": "LightFX",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/lightFX.js",
            "line": 2,
            "description": "LightFX create volumetric and flare effects to the light",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.NodeManipulator": {
            "name": "LS.Components.NodeManipulator",
            "shortname": "NodeManipulator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/nodeManipulator.js",
            "line": 1,
            "description": "Node manipulator, allows to rotate it",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.PlayAnimation": {
            "name": "LS.Components.PlayAnimation",
            "shortname": "PlayAnimation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/playAnimation.js",
            "line": 1,
            "description": "Reads animation tracks from an Animation resource and applies the properties to the objects referenced",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.Poser": {
            "name": "LS.Components.Poser",
            "shortname": "Poser",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/poser.js",
            "line": 1,
            "description": "Transitions between different poses",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.RealtimeReflector": {
            "name": "LS.Components.RealtimeReflector",
            "shortname": "RealtimeReflector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/realtimeReflector.js",
            "line": 1,
            "description": "Realtime Reflective surface",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.Spherize": {
            "name": "LS.Components.Spherize",
            "shortname": "Spherize",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/spherize.js",
            "line": 1,
            "description": "Spherize deforms a mesh, it is an example of a deformer, a component that modifies the meshes of one node",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Components.Target": {
            "name": "LS.Components.Target",
            "shortname": "Target",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/target.js",
            "line": 1,
            "description": "Target rotate a mesh to look at the camera or another object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ]
        },
        "LS.Components.Transform": {
            "name": "LS.Components.Transform",
            "shortname": "Transform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS.Components",
            "file": "../src/components/transform.js",
            "line": 1,
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.Animation": {
            "name": "LS.Animation",
            "shortname": "LS.Animation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/helpers/animation.js",
            "line": 9,
            "description": "An Animation is a resource that contains samples of properties over time, similar to animation curves\nValues could be associated to an specific node.\nData is contained in tracks",
            "is_constructor": 1
        },
        "LS.Animation.Track": {
            "name": "LS.Animation.Track",
            "shortname": "LS.Animation.Track",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/helpers/animation.js",
            "line": 239,
            "description": "Represents one track with data over time about one property\nData could be stored in two forms, or an array containing arrays of [time,data] or in a single typed array, depends on the attribute typed_mode",
            "is_constructor": 1
        },
        "LS.Material": {
            "name": "LS.Material",
            "shortname": "LS.Material",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/materials/material.js",
            "line": 7,
            "description": "Material class contains all the info about how a mesh should be rendered, more in a highlevel format.\nMost of the info is Colors, factors and Textures but it can also specify a shader or some flags.\nMaterials could be shared among different objects.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.StandardMaterial": {
            "name": "LS.StandardMaterial",
            "shortname": "LS.StandardMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/materials/standardMaterial.js",
            "line": 7,
            "description": "StandardMaterial class improves the material class",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "String"
                }
            ]
        },
        "LS.RenderInstance": {
            "name": "LS.RenderInstance",
            "shortname": "LS.RenderInstance",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/render/renderInstance.js",
            "line": 1,
            "description": "RenderInstance contains info of one object to be rendered on the scene.",
            "is_constructor": 1
        },
        "LS.RenderOptions": {
            "name": "LS.RenderOptions",
            "shortname": "RenderOptions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/render/renderOptions.js",
            "line": 1,
            "description": "It is used to store info about which passes should be applied, and what actions performed\nIt could occasionally contain info about the current pass\nit should not be associated with an scene (the same RenderOptions could be used with different scenes)",
            "is_constructor": 1
        },
        "LS.Renderer": {
            "name": "LS.Renderer",
            "shortname": "LS.Renderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/render/renderer.js",
            "line": 3,
            "description": "The Renderer is in charge of generating one frame of the scene. Contains all the passes and intermediate functions to create the frame.",
            "is_constructor": 1
        },
        "LS.LScript": {
            "name": "LS.LScript",
            "shortname": "LScript",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/utils/lscript.js",
            "line": 3,
            "description": "LScript allows to compile code during execution time having a clean context",
            "is_constructor": 1
        },
        "LS.WBin": {
            "name": "LS.WBin",
            "shortname": "WBin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/utils/wbin.js",
            "line": 26,
            "description": "WBin allows to create binary files easily (similar to WAD format). You can pack lots of resources in one file or extract them."
        },
        "LS.ComponentContainer": {
            "name": "LS.ComponentContainer",
            "shortname": "ComponentContainer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/componentContainer.js",
            "line": 6,
            "description": "ComponentContainer class allows to add component based properties to any other class",
            "is_constructor": 1
        },
        "LS.CompositePattern": {
            "name": "LS.CompositePattern",
            "shortname": "CompositePattern",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/compositePattern.js",
            "line": 2,
            "description": "CompositePattern implements the Composite Pattern, which allows to one class to contain instances of its own class\ncreating a tree-like structure.",
            "is_constructor": 1
        },
        "LS.Context": {
            "name": "LS.Context",
            "shortname": "LS.Context",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/context.js",
            "line": 1,
            "description": "Context class allows to handle the app context easily without having to glue manually all events\n\tThere is a list of options\n\t==========================\n\t- canvas: the canvas where the scene should be rendered, if not specified one will be created\n\t- container_id: string with container id where to create the canvas, width and height will be those from the container\n\t- width: the width for the canvas in case it is created without a container_id\n\t- height: the height for the canvas in case it is created without a container_id\n\t- resources: string with the path to the resources folder\n\t- shaders: string with the url to the shaders.xml file\n\t- proxy: string with the url where the proxy is located (useful to avoid CORS)\n\t- filesystems: object that contains the virtual file systems info { \"VFS\":\"http://litefileserver.com/\" } ...\n\t- redraw: boolean to force to render the scene constantly (useful for animated scenes)\n\t- autoresize: boolean to automatically resize the canvas when the window is resized\n\tOptional callbacks to attach\n\t============================\n\t- onPreDraw: executed before drawing a frame\n\t- onDraw: executed after drawing a frame\n\t- onPreUpdate(dt): executed before updating the scene (delta_time as parameter)\n\t- onUpdate(dt): executed after updating the scene (delta_time as parameter)\n\t- onMouse(e): when a mouse event is triggered\n\t- onKey(e): when a key event is triggered",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "settings for the webgl context creation",
                    "type": "Object"
                }
            ]
        },
        "LS.LS": {
            "name": "LS.LS",
            "shortname": "LS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/core.js",
            "line": 435,
            "description": "Samples a curve and returns the resulting value",
            "itemtype": "method",
            "params": [
                {
                    "name": "values",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "minx",
                    "description": "min x value",
                    "type": "Number"
                },
                {
                    "name": "maxx",
                    "description": "max x value",
                    "type": "Number"
                },
                {
                    "name": "defaulty",
                    "description": "default y value",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "the position in the curve to sample",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            }
        },
        "LS.PhysicsInstance": {
            "name": "LS.PhysicsInstance",
            "shortname": "LS.PhysicsInstance",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/physics.js",
            "line": 3,
            "description": "PhysicsInstance contains info of one object to test physics against",
            "is_constructor": 1
        },
        "LS.Physics": {
            "name": "LS.Physics",
            "shortname": "LS.Physics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/physics.js",
            "line": 58,
            "description": "Physics is in charge of all physics testing methods",
            "is_constructor": 1
        },
        "LS.Picking": {
            "name": "LS.Picking",
            "shortname": "LS.Picking",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/picking.js",
            "line": 2,
            "description": "Picking is used to detect which element is below one pixel (used the GPU) or using raycast",
            "is_constructor": 1
        },
        "LS.Prefab": {
            "name": "LS.Prefab",
            "shortname": "Prefab",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/prefab.js",
            "line": 2,
            "description": "A Prefab behaves as a container of something packed with resources. This allow to have in one single file\ntextures, meshes, etc.",
            "is_constructor": 1
        },
        "LS.ResourcesManager": {
            "name": "LS.ResourcesManager",
            "shortname": "ResourcesManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/resourcesManager.js",
            "line": 1,
            "description": "Static class that contains all the resources loaded, parsed and ready to use.\nIt also contains the parsers and methods in charge of processing them",
            "is_constructor": 1
        },
        "LS.SceneTree": {
            "name": "LS.SceneTree",
            "shortname": "SceneTree",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/scene.js",
            "line": 1,
            "description": "The SceneTree contains all the info about the Scene and nodes",
            "is_constructor": 1
        },
        "LS.SceneNode": {
            "name": "LS.SceneNode",
            "shortname": "SceneNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "LS",
            "file": "../src/scene.js",
            "line": 908,
            "description": "The SceneNode class represents and object in the scene\nIs the base class for all objects in the scene as meshes, lights, cameras, and so",
            "params": [
                {
                    "name": "id",
                    "description": "the id (otherwise a random one is computed)",
                    "type": "String"
                }
            ],
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "../src/components/camera.js",
            "line": 105,
            "description": "Camera type, could be Camera.PERSPECTIVE or Camera.ORTHOGRAPHIC",
            "itemtype": "property",
            "name": "type",
            "type": "Vec3",
            "default": "Camera.PERSPECTIVE;",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 124,
            "description": "The position of the camera (in local space form the node)",
            "itemtype": "property",
            "name": "eye",
            "type": "Vec3",
            "default": "[0,100,100]",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 139,
            "description": "The center where the camera points (in node space)",
            "itemtype": "property",
            "name": "center",
            "type": "Vec3",
            "default": "[0,0,0]",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 154,
            "description": "The up vector of the camera (in node space)",
            "itemtype": "property",
            "name": "up",
            "type": "Vec3",
            "default": "[0,1,0]",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 169,
            "description": "The near plane",
            "itemtype": "property",
            "name": "near",
            "type": "Number",
            "default": "1",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 185,
            "description": "The far plane",
            "itemtype": "property",
            "name": "far",
            "type": "Number",
            "default": "1000",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 201,
            "description": "The camera aspect ratio",
            "itemtype": "property",
            "name": "aspect",
            "type": "Number",
            "default": "1",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 216,
            "description": "The field of view in degrees",
            "itemtype": "property",
            "name": "fov",
            "type": "Number",
            "default": "45",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 232,
            "description": "The frustum size when working in ORTHOGRAPHIC",
            "itemtype": "property",
            "name": "frustum_size",
            "type": "Number",
            "default": "50",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 252,
            "description": "The viewport in normalized coordinates (left,bottom, width, height)",
            "itemtype": "property",
            "name": "viewport",
            "type": "Vec4",
            "default": "50",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 321,
            "itemtype": "method",
            "name": "lookAt",
            "params": [
                {
                    "name": "eye",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "center",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "up",
                    "description": "",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 336,
            "description": "Update matrices according to the eye,center,up,fov,aspect,...",
            "itemtype": "method",
            "name": "updateMatrices",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 370,
            "description": "returns the inverse of the viewmatrix",
            "itemtype": "method",
            "name": "getModelMatrix",
            "params": [
                {
                    "name": "m",
                    "description": "optional output container",
                    "type": "Mat4"
                }
            ],
            "return": {
                "description": "matrix",
                "type": "Mat4"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 384,
            "description": "returns the viewmatrix",
            "itemtype": "method",
            "name": "getViewMatrix",
            "params": [
                {
                    "name": "m",
                    "description": "optional output container",
                    "type": "Mat4"
                }
            ],
            "return": {
                "description": "matrix",
                "type": "Mat4"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 398,
            "description": "returns the projection matrix",
            "itemtype": "method",
            "name": "getProjectionMatrix",
            "params": [
                {
                    "name": "m",
                    "description": "optional output container",
                    "type": "Mat4"
                }
            ],
            "return": {
                "description": "matrix",
                "type": "Mat4"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 412,
            "description": "returns the view projection matrix",
            "itemtype": "method",
            "name": "getViewProjectionMatrix",
            "params": [
                {
                    "name": "m",
                    "description": "optional output container",
                    "type": "Mat4"
                }
            ],
            "return": {
                "description": "matrix",
                "type": "Mat4"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 426,
            "description": "returns the model view projection matrix computed from a passed model",
            "itemtype": "method",
            "name": "getModelViewProjectionMatrix",
            "params": [
                {
                    "name": "model",
                    "description": "model matrix",
                    "type": "Mat4"
                },
                {
                    "name": "out",
                    "description": "optional output container",
                    "type": "Mat4"
                }
            ],
            "return": {
                "description": "matrix",
                "type": "Mat4"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 441,
            "description": "apply a transform to all the vectors (eye,center,up) using a matrix",
            "itemtype": "method",
            "name": "updateVectors",
            "params": [
                {
                    "name": "model",
                    "description": "matrix",
                    "type": "Mat4"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 456,
            "description": "transform a local coordinate to global coordinates",
            "itemtype": "method",
            "name": "getLocalPoint",
            "params": [
                {
                    "name": "v",
                    "description": "vector",
                    "type": "Vec3"
                },
                {
                    "name": "dest",
                    "description": "",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "v in global coordinates",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 475,
            "description": "rotate a local coordinate to global coordinates (skipping translation)",
            "itemtype": "method",
            "name": "getLocalVector",
            "params": [
                {
                    "name": "v",
                    "description": "vector",
                    "type": "Vec3"
                },
                {
                    "name": "dest",
                    "description": "",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "v in global coordinates",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 495,
            "description": "returns the eye (position of the camera) in global coordinates",
            "itemtype": "method",
            "name": "getEye",
            "params": [
                {
                    "name": "out",
                    "description": "output vector [optional]",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "position in global coordinates",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 514,
            "description": "returns the center of the camera (position where the camera is pointing) in global coordinates",
            "itemtype": "method",
            "name": "getCenter",
            "params": [
                {
                    "name": "out",
                    "description": "output vector [optional]",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "position in global coordinates",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 534,
            "description": "returns the front vector of the camera",
            "itemtype": "method",
            "name": "getFront",
            "params": [
                {
                    "name": "out",
                    "description": "output vector [optional]",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "position in global coordinates",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 554,
            "description": "returns the up vector of the camera",
            "itemtype": "method",
            "name": "getUp",
            "params": [
                {
                    "name": "out",
                    "description": "output vector [optional]",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "position in global coordinates",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 572,
            "description": "returns the top vector of the camera (different from up, this one is perpendicular to front and right)",
            "itemtype": "method",
            "name": "getTop",
            "params": [
                {
                    "name": "out",
                    "description": "output vector [optional]",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "position in global coordinates",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 590,
            "description": "returns the right vector of the camera",
            "itemtype": "method",
            "name": "getRight",
            "params": [
                {
                    "name": "out",
                    "description": "output vector [optional]",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "position in global coordinates",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 648,
            "description": "set camera in orthographic mode and sets the planes",
            "itemtype": "method",
            "name": "setOrthographic",
            "params": [
                {
                    "name": "left",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "right",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bottom",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "top",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "near",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "far",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 667,
            "description": "moves the camera by adding the delta vector to center and eye",
            "itemtype": "method",
            "name": "move",
            "params": [
                {
                    "name": "delta",
                    "description": "",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 679,
            "description": "rotate the camera around its center",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle_in_deg",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "axis",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "in_local_space",
                    "description": "allows to specify if the axis is in local space or global space",
                    "type": "Boolean"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 767,
            "description": "Sets the viewport in pixels (using the gl.canvas as reference)",
            "itemtype": "method",
            "name": "setViewportInPixels",
            "params": [
                {
                    "name": "left",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "right",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 784,
            "description": "Applies the camera transformation (from eye,center,up) to the node.",
            "itemtype": "method",
            "name": "updateNodeTransform",
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 797,
            "description": "Converts from 3D to 2D",
            "itemtype": "method",
            "name": "project",
            "params": [
                {
                    "name": "vec",
                    "description": "3D position we want to proyect to 2D",
                    "type": "Vec3"
                },
                {
                    "name": "viewport",
                    "description": "viewport info (if omited full canvas viewport is used)",
                    "type": "Vec4",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "result",
                    "description": "where to store the result, if omited it is created",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the coordinates in 2D",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 824,
            "description": "Converts from 2D to 3D",
            "itemtype": "method",
            "name": "unproject",
            "params": [
                {
                    "name": "vec",
                    "description": "2D position we want to proyect to 3D",
                    "type": "Vec3"
                },
                {
                    "name": "viewport",
                    "description": "viewport info (if omited full canvas viewport is used)",
                    "type": "Vec4",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "result",
                    "description": "where to store the result, if omited it is created",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the coordinates in 2D",
                "type": "Vec3"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 841,
            "description": "returns the viewport in pixels applying the local camera viewport to the full viewport of the canvas",
            "itemtype": "method",
            "name": "getLocalViewport",
            "params": [
                {
                    "name": "viewport",
                    "description": "viewport info, otherwise the canvas dimensions will be used (not the current viewport)",
                    "type": "Vec4",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "result",
                    "description": "where to store the result, if omited it is created",
                    "type": "Vec4",
                    "optional": true,
                    "optdefault": "vec4"
                }
            ],
            "return": {
                "description": "the viewport info of the camera in pixels",
                "type": "Vec4"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/camera.js",
            "line": 870,
            "description": "given an x and y position, returns the ray {start, dir}",
            "itemtype": "method",
            "name": "getRayInPixel",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "viewport",
                    "description": "viewport coordinates (if omited full viewport is used)",
                    "type": "Vec4"
                },
                {
                    "name": "skip_local_viewport",
                    "description": "ignore the local camera viewport configuration when computing the viewport",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "{start, dir}",
                "type": "Object"
            },
            "class": "LS.Components.Camera",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/cameraFX.js",
            "line": 145,
            "description": "Returns the first component of this container that is of the same class",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "o",
                    "description": "object with the configuration info from a previous serialization",
                    "type": "Object"
                }
            ],
            "class": "LS.Components.CameraFX",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/graphComponents.js",
            "line": 46,
            "description": "Returns the first component of this container that is of the same class",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "o",
                    "description": "object with the configuration info from a previous serialization",
                    "type": "Object"
                }
            ],
            "class": "LS.Components.GraphComponent",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/graphComponents.js",
            "line": 238,
            "description": "Returns the first component of this container that is of the same class",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "o",
                    "description": "object with the configuration info from a previous serialization",
                    "type": "Object"
                }
            ],
            "class": "LS.Components.FXGraphComponent",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/knob.js",
            "line": 28,
            "description": "Configure the component getting the info from the object",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ],
            "class": "LS.Components.Knob",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/knob.js",
            "line": 39,
            "description": "Serialize this component)",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "object with the serialization info",
                "type": "Object"
            },
            "class": "LS.Components.Knob",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 12,
            "description": "Position of the light in world space",
            "itemtype": "property",
            "name": "position",
            "type": "{[[x,y,z]]}",
            "default": "[0,0,0]",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 19,
            "description": "Position where the light is pointing at (in world space)",
            "itemtype": "property",
            "name": "target",
            "type": "{[[x,y,z]]}",
            "default": "[0,0,1]",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 26,
            "description": "Up vector (in world coordinates)",
            "itemtype": "property",
            "name": "up",
            "type": "{[[x,y,z]]}",
            "default": "[0,1,0]",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 34,
            "description": "Enabled",
            "itemtype": "property",
            "name": "enabled",
            "type": "{Boolean}",
            "default": "true",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 42,
            "description": "Near distance",
            "itemtype": "property",
            "name": "near",
            "type": "{Number}",
            "default": "1",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 49,
            "description": "Far distance",
            "itemtype": "property",
            "name": "far",
            "type": "{Number}",
            "default": "1000",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 57,
            "description": "Angle for the spot light inner apperture",
            "itemtype": "property",
            "name": "angle",
            "type": "{Number}",
            "default": "45",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 64,
            "description": "Angle for the spot light outer apperture",
            "itemtype": "property",
            "name": "angle_end",
            "type": "{Number}",
            "default": "60",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 86,
            "description": "The color of the light",
            "itemtype": "property",
            "name": "color",
            "type": "{[[r,g,b]]}",
            "default": "[1,1,1]",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 93,
            "description": "The intensity of the light",
            "itemtype": "property",
            "name": "intensity",
            "type": "{Number}",
            "default": "1",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 101,
            "description": "If the light cast shadows",
            "itemtype": "property",
            "name": "cast_shadows",
            "type": "{Boolean}",
            "default": "false",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 281,
            "description": "Returns the camera that will match the light orientation (taking into account fov, etc), useful for shadowmaps",
            "itemtype": "method",
            "name": "getLightCamera",
            "return": {
                "description": "the camera",
                "type": "Camera"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 307,
            "description": "updates all the important vectors (target, position, etc) according to the node parent of the light",
            "itemtype": "method",
            "name": "updateVectors",
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 348,
            "description": "returns a copy of the light position (in global coordinates), if you want local you can access the position property",
            "itemtype": "method",
            "name": "getPosition",
            "params": [
                {
                    "name": "output",
                    "description": "optional",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the position",
                "type": "Vec3"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 364,
            "description": "returns a copy of the light target (in global coordinates), if you want local you can access the target property",
            "itemtype": "method",
            "name": "getTarget",
            "params": [
                {
                    "name": "output",
                    "description": "optional",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the target",
                "type": "Vec3"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 381,
            "description": "returns a copy of the light up vector (in global coordinates), if you want local you can access the up property",
            "itemtype": "method",
            "name": "getUp",
            "params": [
                {
                    "name": "output",
                    "description": "optional",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the up vector",
                "type": "Vec3"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 397,
            "description": "returns a copy of the front vector (in global coordinates)",
            "itemtype": "method",
            "name": "getFront",
            "params": [
                {
                    "name": "output",
                    "description": "optional",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the front vector",
                "type": "Vec3"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 430,
            "description": "This method is called by the Renderer when the light needs to be prepared to be used during render (compute light camera, create shadowmaps, prepare macros, etc)",
            "itemtype": "method",
            "name": "prepare",
            "params": [
                {
                    "name": "render_options",
                    "description": "info about how the scene will be rendered",
                    "type": "Object"
                }
            ],
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 522,
            "description": "Collects and returns the macros of the light (some macros have to be computed now because they depend not only on the light, also on the node or material)",
            "itemtype": "method",
            "name": "getMacros",
            "params": [
                {
                    "name": "instance",
                    "description": "the render instance where this light will be applied",
                    "type": "RenderInstance"
                },
                {
                    "name": "render_options",
                    "description": "info about how the scene will be rendered",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the macros",
                "type": "Object"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 563,
            "description": "Collects and returns the uniforms for the light (some uniforms have to be computed now because they depend not only on the light, also on the node or material)",
            "itemtype": "method",
            "name": "getUniforms",
            "params": [
                {
                    "name": "instance",
                    "description": "the render instance where this light will be applied",
                    "type": "RenderInstance"
                },
                {
                    "name": "render_options",
                    "description": "info about how the scene will be rendered",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the uniforms",
                "type": "Object"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 617,
            "description": "Optimization: instead of using the far plane, we take into account the attenuation to avoid rendering objects where the light will never reach",
            "itemtype": "method",
            "name": "computeShadowmapFar",
            "return": {
                "description": "distance",
                "type": "Number"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 641,
            "description": "Computes the max amount of light this object can produce (taking into account every color channel)",
            "itemtype": "method",
            "name": "computeLightIntensity",
            "return": {
                "description": "intensity",
                "type": "Number"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 652,
            "description": "Computes the light radius according to the attenuation",
            "itemtype": "method",
            "name": "computeLightRadius",
            "return": {
                "description": "radius",
                "type": "Number"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 668,
            "description": "Generates the shadowmap for this light",
            "itemtype": "method",
            "name": "generateShadowmap",
            "return": {
                "description": "render_options",
                "type": "Object"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 733,
            "description": "It returns a matrix in the position of the given light property (target, position), mostly used for gizmos",
            "itemtype": "method",
            "name": "getTransformMatrix",
            "params": [
                {
                    "name": "element",
                    "description": "\"target\" or \"position\"",
                    "type": "String"
                },
                {
                    "name": "output",
                    "description": "[optional]",
                    "type": "Mat4"
                }
            ],
            "return": {
                "description": "mat4",
                "type": "Mat4"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/light.js",
            "line": 756,
            "description": "apply a transformation to a given light property, this is done in a function to allow more complex gizmos",
            "itemtype": "method",
            "name": "applyTransformMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "transformation in matrix form",
                    "type": "Mat4"
                },
                {
                    "name": "center",
                    "description": "�?",
                    "type": "Vec3"
                },
                {
                    "name": "property_name",
                    "description": "\"target\" or \"position\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "mat4",
                "type": "Mat4"
            },
            "class": "LS.Components.Light",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/meshRenderer.js",
            "line": 63,
            "description": "Configure from a serialized object",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "object",
                    "description": "with the serialized info",
                    "type": "Object"
                }
            ],
            "class": "LS.Components.NodeManipulator",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/meshRenderer.js",
            "line": 84,
            "description": "Serialize the object",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "object with the serialized info",
                "type": "Object"
            },
            "class": "LS.Components.NodeManipulator",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/skinnedMeshRenderer.js",
            "line": 79,
            "description": "Configure from a serialized object",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "object",
                    "description": "with the serialized info",
                    "type": "Object"
                }
            ],
            "class": "LS.Components.Spherize",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/skinnedMeshRenderer.js",
            "line": 100,
            "description": "Serialize the object",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "object with the serialized info",
                "type": "Object"
            },
            "class": "LS.Components.Spherize",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 68,
            "description": "The position relative to its parent in vec3 format",
            "itemtype": "property",
            "name": "position",
            "type": "Vec3",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 108,
            "description": "The orientation relative to its parent in quaternion format",
            "itemtype": "property",
            "name": "rotation",
            "type": "Quat",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 121,
            "description": "The scaling relative to its parent in vec3 format (default is [1,1,1])",
            "itemtype": "property",
            "name": "scaling",
            "type": "Vec3",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 137,
            "description": "The local matrix transform relative to its parent in mat4 format",
            "itemtype": "property",
            "name": "matrix",
            "type": "Mat4",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 154,
            "description": "The position relative to its parent in vec3 format",
            "itemtype": "property",
            "name": "position",
            "type": "Vec3",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 165,
            "description": "The local matrix transform relative to its parent in mat4 format",
            "itemtype": "property",
            "name": "matrix",
            "type": "Mat4",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 204,
            "description": "Copy the transform from another Transform",
            "itemtype": "method",
            "name": "copyFrom",
            "params": [
                {
                    "name": "src",
                    "description": "",
                    "type": "Transform"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 214,
            "description": "Configure from a serialized object",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "object",
                    "description": "with the serialized info",
                    "type": "Object"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 243,
            "description": "Serialize the object",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "object with the serialized info",
                "type": "Object"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 259,
            "description": "Reset this transform",
            "itemtype": "method",
            "name": "identity",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 275,
            "description": "Returns a copy of the local position",
            "itemtype": "method",
            "name": "getPosition",
            "params": [
                {
                    "name": "out",
                    "description": "[optional] where to store the result, otherwise one vec3 is created and returned",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the position",
                "type": "Vec3"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 288,
            "description": "Returns a copy of the global position",
            "itemtype": "method",
            "name": "getGlobalPosition",
            "params": [
                {
                    "name": "out",
                    "description": "[optional] where to store the result, otherwise one vec3 is created and returned",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the position",
                "type": "Vec3"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 302,
            "description": "Returns the rotation in quaternion array (a copy)",
            "itemtype": "method",
            "name": "getRotation",
            "params": [
                {
                    "name": "out",
                    "description": "[optional] where to store the result, otherwise one quat is created and returned",
                    "type": "Quat"
                }
            ],
            "return": {
                "description": "the rotation",
                "type": "Quat"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 314,
            "description": "Returns the global rotation in quaternion array (a copy)",
            "itemtype": "method",
            "name": "getRotation",
            "params": [
                {
                    "name": "out",
                    "description": "[optional] where to store the result, otherwise one quat is created and returned",
                    "type": "Quat"
                }
            ],
            "return": {
                "description": "the rotation",
                "type": "Quat"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 340,
            "description": "Returns the scale (its a copy)",
            "itemtype": "method",
            "name": "getScale",
            "params": [
                {
                    "name": "out",
                    "description": "[optional] where to store the result, otherwise one vec3 is created and returned",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the scale",
                "type": "Vec3"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 352,
            "description": "Returns a copy of the global scale",
            "itemtype": "method",
            "name": "getGlobalScale",
            "params": [
                {
                    "name": "out",
                    "description": "[optional] where to store the result, otherwise one vec3 is created and returned",
                    "type": "Vec3"
                }
            ],
            "return": {
                "description": "the scale",
                "type": "Vec3"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 375,
            "description": "update the local Matrix to match the position,scale and rotation",
            "itemtype": "method",
            "name": "updateMatrix",
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 387,
            "description": "updates the global matrix using the parents transformation",
            "itemtype": "method",
            "name": "updateGlobalMatrix",
            "params": [
                {
                    "name": "fast",
                    "description": "it doesnt recompute parent matrices, just uses the stored one, is faster but could create errors if the parent doesnt have its global matrix update",
                    "type": "Bool"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 402,
            "description": "Returns a copy of the local matrix of this transform (it updates the matrix automatically)",
            "itemtype": "method",
            "name": "getMatrix",
            "params": [
                {
                    "name": "out",
                    "description": "[optional] where to store the result, otherwise one mat4 is created and returned",
                    "type": "Mat4"
                }
            ],
            "return": {
                "description": "the matrix",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 417,
            "description": "Returns the original local matrix of this transform (it updates the matrix automatically)",
            "itemtype": "method",
            "name": "getLocalMatrixRef",
            "return": {
                "description": "the matrix in array format",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 430,
            "description": "Returns a copy of the global matrix of this transform (it updates the matrix automatically)",
            "itemtype": "method",
            "name": "getGlobalMatrix",
            "params": [
                {
                    "name": "out",
                    "description": "optional",
                    "type": "Mat4"
                },
                {
                    "name": "fast",
                    "description": "this flags skips recomputing parents matrices",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "the matrix in array format",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 449,
            "description": "Returns a copy of the global matrix of this transform (it updates the matrix automatically)",
            "itemtype": "method",
            "name": "getGlobalMatrix",
            "return": {
                "description": "the matrix in array format",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 462,
            "description": "Returns an array with all the ancestors",
            "itemtype": "method",
            "name": "getAncestors",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 476,
            "description": "Returns a quaternion with all parents rotations",
            "itemtype": "method",
            "name": "getGlobalRotation",
            "return": {
                "description": "Quaternion",
                "type": "Quat"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 497,
            "description": "Returns a Matrix with all parents rotations",
            "itemtype": "method",
            "name": "getGlobalRotationMatrix",
            "return": {
                "description": "Matrix rotation",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 520,
            "description": "Returns the local matrix of this transform without the rotation or scale",
            "itemtype": "method",
            "name": "getGlobalTranslationMatrix",
            "return": {
                "description": "the matrix in array format",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 531,
            "description": "Returns the global rotation in quaternion array (a copy)",
            "itemtype": "method",
            "name": "getGlobalRotationMatrix",
            "return": {
                "description": "the rotation",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 554,
            "description": "Returns the local matrix of this transform without the scale",
            "itemtype": "method",
            "name": "getGlobalTranslationRotationMatrix",
            "return": {
                "description": "the matrix in array format",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 568,
            "description": "Returns the matrix for the normals in the shader",
            "itemtype": "method",
            "name": "getNormalMatrix",
            "return": {
                "description": "the matrix in array format",
                "type": "Mat4"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 586,
            "description": "Configure the transform from a local Matrix (do not tested carefully)",
            "itemtype": "method",
            "name": "fromMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "the matrix in array format",
                    "type": "Mat4"
                },
                {
                    "name": "is_global",
                    "description": "tells if the matrix is in global space [optional]",
                    "type": "Bool"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 633,
            "description": "Configure the transform rotation from a vec3 Euler angles (heading,attitude,bank)",
            "itemtype": "method",
            "name": "setRotationFromEuler",
            "params": [
                {
                    "name": "src,",
                    "description": "the matrix in array format",
                    "type": "Mat4"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 645,
            "description": "sets the position",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 662,
            "description": "sets the rotation",
            "itemtype": "method",
            "name": "setRotation",
            "params": [
                {
                    "name": "rotation",
                    "description": "in quaterion format",
                    "type": "Quat"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 674,
            "description": "sets the scale",
            "itemtype": "method",
            "name": "setScale",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 691,
            "description": "translates object in local coordinates (adds to the position)",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 708,
            "description": "NOT TESTED\ntranslates object in global coordinates (using the rotation and the scale)",
            "itemtype": "method",
            "name": "translateGlobal",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 726,
            "description": "rotate object in local space (axis is in local space)",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle_in_deg",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "axis",
                    "description": "",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 745,
            "description": "rotate object in local space in local X axis",
            "itemtype": "method",
            "name": "rotateX",
            "params": [
                {
                    "name": "angle_in_deg",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 757,
            "description": "rotate object in local space in local Y axis",
            "itemtype": "method",
            "name": "rotateY",
            "params": [
                {
                    "name": "angle_in_deg",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 769,
            "description": "rotate object in local space in local Z axis",
            "itemtype": "method",
            "name": "rotateZ",
            "params": [
                {
                    "name": "angle_in_deg",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 782,
            "description": "rotate object in global space (axis is in global space)",
            "itemtype": "method",
            "name": "rotateGlobal",
            "params": [
                {
                    "name": "angle_in_deg",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "axis",
                    "description": "",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 796,
            "description": "rotate object in local space using a quat",
            "itemtype": "method",
            "name": "rotateQuat",
            "params": [
                {
                    "name": "quaternion",
                    "description": "",
                    "type": "Quat"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 808,
            "description": "rotate object in global space using a quat",
            "itemtype": "method",
            "name": "rotateQuatGlobal",
            "params": [
                {
                    "name": "quaternion",
                    "description": "",
                    "type": "Quat"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 820,
            "description": "scale the object",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 837,
            "description": "This method is static (call it from Transform.interpolate)\ninterpolate the transform between two transforms and stores the result in another Transform",
            "itemtype": "method",
            "name": "interpolate",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Transform"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Transform"
                },
                {
                    "name": "factor",
                    "description": "from 0 to 1",
                    "type": "Number"
                },
                {
                    "name": "the",
                    "description": "destination",
                    "type": "Transform"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 855,
            "description": "Orients the transform to look from one position to another",
            "itemtype": "method",
            "name": "lookAt",
            "params": [
                {
                    "name": "position",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "target",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "up",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "in_world",
                    "description": "tells if the values are in world coordinates (otherwise asume its in local coordinates)",
                    "type": "Boolean"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 918,
            "description": "returns the [0,0,-1] vector in global space",
            "itemtype": "method",
            "name": "getFront",
            "return": {
                "description": "",
                "type": "Vec3"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 927,
            "description": "returns the [0,1,0] vector in global space",
            "itemtype": "method",
            "name": "getTop",
            "return": {
                "description": "",
                "type": "Vec3"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 936,
            "description": "returns the [1,0,0] vector in global space",
            "itemtype": "method",
            "name": "getRight",
            "return": {
                "description": "",
                "type": "Vec3"
            },
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 945,
            "description": "Multiplies a point by the local matrix (not global)\nIf no destination is specified a new vector is created",
            "itemtype": "method",
            "name": "transformPoint",
            "params": [
                {
                    "name": "point",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "destination",
                    "description": "(optional)",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 959,
            "description": "convert from local coordinates to global coordinates\nIf no destination is specified a new vector is created",
            "itemtype": "method",
            "name": "transformPointGlobal",
            "params": [
                {
                    "name": "point",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "destination",
                    "description": "(optional)",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 972,
            "description": "convert from local coordinates to global coordinates\nIf no destination is specified a new vector is created",
            "itemtype": "method",
            "name": "localToGlobal",
            "params": [
                {
                    "name": "point",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "destination",
                    "description": "(optional)",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 981,
            "description": "convert from global coordinates to local coordinates\nIf no destination is specified a new vector is created",
            "itemtype": "method",
            "name": "transformPoint",
            "params": [
                {
                    "name": "point",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "destination",
                    "description": "(optional)",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 996,
            "description": "Applies the transformation to a vector (rotate but not translate)\nIf no destination is specified the transform is applied to vec",
            "itemtype": "method",
            "name": "transformVector",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "destination",
                    "description": "(optional)",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 1007,
            "description": "Applies the transformation to a vector (rotate but not translate)\nIf no destination is specified the transform is applied to vec",
            "itemtype": "method",
            "name": "transformVectorGlobal",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "destination",
                    "description": "(optional)",
                    "type": "Vec3"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/components/transform.js",
            "line": 1045,
            "description": "Applies the transformation using a matrix",
            "itemtype": "method",
            "name": "applyTransformMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "with the transform",
                    "type": "Mat4"
                },
                {
                    "name": "center",
                    "description": "different pivot [optional] if omited 0,0,0 will be used",
                    "type": "Vec3"
                },
                {
                    "name": "is_global",
                    "description": "(optional) tells if the transformation should be applied in global space or local space",
                    "type": "Bool"
                }
            ],
            "class": "LS.Components.Transform",
            "namespace": "LS.Components"
        },
        {
            "file": "../src/helpers/animation.js",
            "line": 137,
            "class": "LS.Animation",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/graphMaterial.js",
            "line": 143,
            "description": "gets all the properties and its types",
            "itemtype": "method",
            "name": "getProperties",
            "return": {
                "description": "object with name:type",
                "type": "Object"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/graphMaterial.js",
            "line": 168,
            "description": "Event used to inform if one resource has changed its name",
            "itemtype": "method",
            "name": "onResourceRenamed",
            "params": [
                {
                    "name": "resources",
                    "description": "object where all the resources are stored",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/graphMaterial.js",
            "line": 189,
            "description": "gets all the properties and its types",
            "itemtype": "method",
            "name": "getProperty",
            "return": {
                "description": "object with name:type",
                "type": "Object"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/graphMaterial.js",
            "line": 212,
            "description": "assign a value to a property in a safe way",
            "itemtype": "method",
            "name": "setProperty",
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/graphMaterial.js",
            "line": 251,
            "description": "Assigns a texture to a channel",
            "itemtype": "method",
            "name": "setTexture",
            "params": [
                {
                    "name": "texture",
                    "description": "",
                    "type": "Texture"
                },
                {
                    "name": "channel",
                    "description": "default is COLOR",
                    "type": "String"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 75,
            "description": "Surface color",
            "itemtype": "property",
            "name": "color",
            "type": "{vec3}",
            "default": "[1,1,1]",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 82,
            "description": "Opacity. It must be < 1 to enable alpha sorting. If it is <= 0 wont be visible.",
            "itemtype": "property",
            "name": "opacity",
            "type": "{number}",
            "default": "1",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 90,
            "description": "Blend mode, it could be any of Blend options (NORMAL,ALPHA, ADD, SCREEN)",
            "itemtype": "property",
            "name": "blend_mode",
            "type": "{String}",
            "default": "Blend.NORMAL",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 99,
            "description": "Specular glossiness: the glossines (exponent) of specular light",
            "itemtype": "property",
            "name": "specular_gloss",
            "type": "{number}",
            "default": "10",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 275,
            "description": "Configure the material getting the info from the object",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 323,
            "description": "Serialize this material",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "object with the serialization info",
                "type": "Object"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 336,
            "description": "Clone this material (keeping the class)",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "Material instance",
                "type": "Material"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 349,
            "description": "Loads and assigns a texture to a channel",
            "itemtype": "method",
            "name": "loadAndSetTexture",
            "params": [
                {
                    "name": "texture_or_filename",
                    "description": "",
                    "type": "Texture || url"
                },
                {
                    "name": "channel",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 380,
            "description": "gets all the properties and its types",
            "itemtype": "method",
            "name": "getProperties",
            "return": {
                "description": "object with name:type",
                "type": "Object"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 403,
            "description": "gets all the properties and its types",
            "itemtype": "method",
            "name": "getProperty",
            "return": {
                "description": "object with name:type",
                "type": "Object"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 416,
            "description": "gets all the properties and its types",
            "itemtype": "method",
            "name": "getProperty",
            "return": {
                "description": "object with name:type",
                "type": "Object"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 468,
            "description": "gets all the texture channels supported by this material",
            "itemtype": "method",
            "name": "getTextureChannels",
            "return": {
                "description": "array with the name of every channel supported by this material",
                "type": "Array"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 480,
            "description": "Assigns a texture to a channel and its sampling parameters",
            "itemtype": "method",
            "name": "setTexture",
            "params": [
                {
                    "name": "channel",
                    "description": "for a list of supported channels by this material call getTextureChannels()",
                    "type": "String"
                },
                {
                    "name": "texture",
                    "description": "",
                    "type": "Texture"
                },
                {
                    "name": "sampler_options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 513,
            "description": "Set a property of the sampling (wrap, uvs, filter)",
            "itemtype": "method",
            "name": "setTextureProperty",
            "params": [
                {
                    "name": "channel",
                    "description": "for a list of supported channels by this material call getTextureChannels()",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "could be \"uvs\", \"filter\", \"wrap\"",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value, for uvs check Material.TEXTURE_COORDINATES, filter is gl.NEAREST or gl.LINEAR and wrap gl.CLAMP_TO_EDGE, gl.MIRROR or gl.REPEAT",
                    "type": "*"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 534,
            "description": "Returns the texture in a channel",
            "itemtype": "method",
            "name": "getTexture",
            "params": [
                {
                    "name": "channel",
                    "description": "default is COLOR",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 560,
            "description": "Returns the texture sampler info of one texture channel (filter, wrap, uvs)",
            "itemtype": "method",
            "name": "getTextureSampler",
            "params": [
                {
                    "name": "channel",
                    "description": "get available channels using getTextureChannels",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 585,
            "description": "Assigns a texture sampler to one texture channel (filter, wrap, uvs)",
            "itemtype": "method",
            "name": "setTextureInfo",
            "params": [
                {
                    "name": "channel",
                    "description": "default is COLOR",
                    "type": "String"
                },
                {
                    "name": "sampler",
                    "description": "{ texture, uvs, wrap, filter }",
                    "type": "Object"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 598,
            "description": "Collects all the resources needed by this material (textures)",
            "itemtype": "method",
            "name": "getResources",
            "params": [
                {
                    "name": "resources",
                    "description": "object where all the resources are stored",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 617,
            "description": "Event used to inform if one resource has changed its name",
            "itemtype": "method",
            "name": "onResourceRenamed",
            "params": [
                {
                    "name": "resources",
                    "description": "object where all the resources are stored",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 635,
            "description": "Loads all the textures inside this material, by sending the through the ResourcesManager",
            "itemtype": "method",
            "name": "loadTextures",
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/material.js",
            "line": 647,
            "description": "Register this material in a materials pool to be shared with other nodes",
            "itemtype": "method",
            "name": "registerMaterial",
            "params": [
                {
                    "name": "name",
                    "description": "name given to this material, it must be unique",
                    "type": "String"
                }
            ],
            "class": "LS.Material",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/standardMaterial.js",
            "line": 293,
            "description": "assign a value to a property in a safe way",
            "itemtype": "method",
            "name": "setProperty",
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ],
            "class": "LS.StandardMaterial",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/standardMaterial.js",
            "line": 345,
            "description": "gets all the properties and its types",
            "itemtype": "method",
            "name": "getProperties",
            "return": {
                "description": "object with name:type",
                "type": "Object"
            },
            "class": "LS.StandardMaterial",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/surfaceMaterial.js",
            "line": 178,
            "description": "gets all the properties and its types",
            "itemtype": "method",
            "name": "getProperties",
            "return": {
                "description": "object with name:type",
                "type": "Object"
            },
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/surfaceMaterial.js",
            "line": 203,
            "description": "Event used to inform if one resource has changed its name",
            "itemtype": "method",
            "name": "onResourceRenamed",
            "params": [
                {
                    "name": "resources",
                    "description": "object where all the resources are stored",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/surfaceMaterial.js",
            "line": 224,
            "description": "gets all the properties and its types",
            "itemtype": "method",
            "name": "getProperty",
            "return": {
                "description": "object with name:type",
                "type": "Object"
            },
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/surfaceMaterial.js",
            "line": 251,
            "description": "assign a value to a property in a safe way",
            "itemtype": "method",
            "name": "setProperty",
            "params": [
                {
                    "name": "object",
                    "description": "to configure from",
                    "type": "Object"
                }
            ],
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/surfaceMaterial.js",
            "line": 290,
            "description": "Assigns a texture to a channel",
            "itemtype": "method",
            "name": "setTexture",
            "params": [
                {
                    "name": "channel",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "texture",
                    "description": "",
                    "type": "Texture"
                }
            ],
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/materials/surfaceMaterial.js",
            "line": 336,
            "description": "Collects all the resources needed by this material (textures)",
            "itemtype": "method",
            "name": "getResources",
            "params": [
                {
                    "name": "resources",
                    "description": "object where all the resources are stored",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 110,
            "description": "Updates the normal matrix using the matrix",
            "itemtype": "method",
            "name": "computeNormalMatrix",
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 218,
            "description": "takes the flags on the node and update the render instance flags",
            "itemtype": "method",
            "name": "applyNodeFlags",
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 249,
            "description": "Enable flag in the flag bit field",
            "itemtype": "method",
            "name": "enableFlag",
            "params": [
                {
                    "name": "flag",
                    "description": "id",
                    "type": "Number"
                }
            ],
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 260,
            "description": "Disable flag in the flag bit field",
            "itemtype": "method",
            "name": "enableFlag",
            "params": [
                {
                    "name": "flag",
                    "description": "id",
                    "type": "Number"
                }
            ],
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 271,
            "description": "Tells if a flag is enabled",
            "itemtype": "method",
            "name": "enableFlag",
            "params": [
                {
                    "name": "flag",
                    "description": "id",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "flag value",
                "type": "Boolean"
            },
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 283,
            "description": "Computes the instance bounding box in world space from the one in local space",
            "itemtype": "method",
            "name": "updateAABB",
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 293,
            "description": "Used to update the RI info without having to go through the collectData process, it is faster but some changes may take a while",
            "itemtype": "method",
            "name": "update",
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderInstance.js",
            "line": 305,
            "description": "Calls render taking into account primitive and range",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "shader",
                    "description": "",
                    "type": "Shader"
                }
            ],
            "class": "LS.RenderInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 61,
            "description": "Overwrites the default rendering to screen function, allowing to render to one or several textures\nThe callback receives the camera, render_options and the output from the previous renderFrameCallback in case you want to chain them\nCallback must return the texture output or null\nWarning: this must be set before every frame, becaue this are cleared after rendering the frame",
            "itemtype": "method",
            "name": "assignGlobalRenderFrameContainer",
            "params": [
                {
                    "name": "callback",
                    "description": "function that will be called one one frame is needed, this function MUST call renderer.renderFrame( current_camera );",
                    "type": "RenderFrameContainer"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 80,
            "description": "Renders the current scene to the screen\nMany steps are involved, from gathering info from the scene tree, generating shadowmaps, setup FBOs, render every camera",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "SceneTree"
                },
                {
                    "name": "render_options",
                    "description": "",
                    "type": "RenderOptions"
                },
                {
                    "name": "cameras",
                    "description": "if no cameras are specified the cameras are taken from the scene",
                    "type": "Array",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 182,
            "description": "renders the view from one camera to the current viewport (could be a texture)",
            "itemtype": "method",
            "name": "renderFrame",
            "params": [
                {
                    "name": "camera",
                    "description": "",
                    "type": "Camera"
                },
                {
                    "name": "render_options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/render/renderer.js",
            "line": 229,
            "description": "Set camera as the main scene camera, sets the viewport according to camera info, updates matrices, and prepares LS.Draw",
            "itemtype": "method",
            "name": "enableCamera",
            "params": [
                {
                    "name": "camera",
                    "description": "",
                    "type": "Camera"
                },
                {
                    "name": "render_options",
                    "description": "",
                    "type": "RenderOptions"
                }
            ],
            "class": "LS.Renderer",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/wbin.js",
            "line": 54,
            "description": "Allows to check if one Uint8Array contains a WBin file",
            "itemtype": "method",
            "name": "WBin.isWBin",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "UInt8Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "LS.WBin",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/wbin.js",
            "line": 69,
            "description": "Builds a WBin data stream from an object (every property of the object will be considered a lump with data)\nIt supports Numbers, Strings and TypedArrays or ArrayBuffer",
            "itemtype": "method",
            "name": "WBin.create",
            "params": [
                {
                    "name": "origin",
                    "description": "object containing all the lumps, the key will be used as lump name",
                    "type": "Object"
                },
                {
                    "name": "origin_class_name",
                    "description": "[Optional] allows to add a classname to the WBin, this is used to detect which class to instance when extracting it",
                    "type": "String"
                }
            ],
            "return": {
                "description": "all the bytes",
                "type": "Uint8Array"
            },
            "class": "LS.WBin",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/wbin.js",
            "line": 208,
            "description": "Extract the info from a Uint8Array containing WBin info and returns the object with all the lumps.\nIf the data contains info about the class to instantiate, the WBin instantiates the class and passes the data to it",
            "itemtype": "method",
            "name": "WBin.load",
            "params": [
                {
                    "name": "data_array",
                    "description": "",
                    "type": "UInt8Array"
                },
                {
                    "name": "skip_classname",
                    "description": "avoid getting the instance of the class specified in classname, and get only the lumps",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "Could be an Object with all the lumps or an instance to the class specified in the WBin data",
                "type": "*"
            },
            "class": "LS.WBin",
            "namespace": "LS"
        },
        {
            "file": "../src/utils/wbin.js",
            "line": 293,
            "description": "Extract the header info from an ArrayBuffer (it contains version, and lumps info)",
            "itemtype": "method",
            "name": "WBin.getHeaderInfo",
            "params": [
                {
                    "name": "data_array",
                    "description": "",
                    "type": "UInt8Array"
                }
            ],
            "return": {
                "description": "Header",
                "type": "Object"
            },
            "class": "LS.WBin",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 19,
            "description": "Adds a component to this node.",
            "itemtype": "method",
            "name": "configureComponents",
            "params": [
                {
                    "name": "info",
                    "description": "object containing all the info from a previous serialization",
                    "type": "Object"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 48,
            "description": "Adds a component to this node.",
            "itemtype": "method",
            "name": "serializeComponents",
            "params": [
                {
                    "name": "o",
                    "description": "container where the components will be stored",
                    "type": "Object"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 75,
            "description": "returns an array with all the components",
            "itemtype": "method",
            "name": "getComponents",
            "return": {
                "description": "all the components",
                "type": "Array"
            },
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 85,
            "description": "Adds a component to this node. (maybe attach would been a better name)",
            "itemtype": "method",
            "name": "addComponent",
            "params": [
                {
                    "name": "component",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "component added",
                "type": "Object"
            },
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 116,
            "description": "Removes a component from this node.",
            "itemtype": "method",
            "name": "removeComponent",
            "params": [
                {
                    "name": "component",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 143,
            "description": "Removes all components from this node.",
            "itemtype": "method",
            "name": "removeAllComponents",
            "params": [
                {
                    "name": "component",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 155,
            "description": "Returns if the class has an instance of this component",
            "itemtype": "method",
            "name": "hasComponent",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Bool"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 182,
            "description": "Returns the first component of this container that is of the same class",
            "itemtype": "method",
            "name": "getComponent",
            "params": [
                {
                    "name": "component_class",
                    "description": "the class to search a component from (not the name of the class)",
                    "type": "Object"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 208,
            "description": "Returns the component with the given uid",
            "itemtype": "method",
            "name": "getComponentByUId",
            "params": [
                {
                    "name": "uid",
                    "description": "the uid to search",
                    "type": "String"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 223,
            "description": "Returns the position in the components array of this component",
            "itemtype": "method",
            "name": "getIndexOfComponent",
            "params": [
                {
                    "name": "position",
                    "description": "in the array, -1 if not found",
                    "type": "Number"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 235,
            "description": "Returns the component at index position",
            "itemtype": "method",
            "name": "getComponentByIndex",
            "params": [
                {
                    "name": "component",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/componentContainer.js",
            "line": 247,
            "description": "executes the method with a given name in all the components",
            "itemtype": "method",
            "name": "processActionInComponents",
            "params": [
                {
                    "name": "action_name",
                    "description": "the name of the function to execute in all components (in string format)",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "array with every parameter that the function may need",
                    "type": "Array"
                }
            ],
            "class": "LS.ComponentContainer",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 24,
            "description": "Adds one child to this instance",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "child",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "index",
                    "description": "[optional]  in which position you want to insert it, if not specified it goes to the last position",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "[optional] data to be passed when adding it, used for special cases when moving nodes around",
                    "type": "*"
                }
            ],
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 109,
            "description": "Removes the node from its parent (and from the scene tree)",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "node",
                    "description": "this child to remove",
                    "type": "Node"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "returns true if it was found and removed",
                "type": "Boolean"
            },
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 162,
            "description": "Remove node from parent",
            "itemtype": "method",
            "name": "destroy",
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 174,
            "description": "Serialize the data from all the children",
            "itemtype": "method",
            "name": "serializeChildren",
            "return": {
                "description": "array containing all serialized data from every children",
                "type": "Array"
            },
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 189,
            "description": "Configure every children with the data",
            "itemtype": "method",
            "name": "configureChildren",
            "return": {
                "description": "o array containing all serialized data",
                "type": "Array"
            },
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 215,
            "description": "Returns parent node",
            "itemtype": "method",
            "name": "getParent",
            "return": {
                "description": "parent node",
                "type": "SceneNode"
            },
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/compositePattern.js",
            "line": 269,
            "description": "get all nodes below this in the hierarchy (children and children of children)",
            "itemtype": "method",
            "name": "getDescendants",
            "return": {
                "description": "array containing all descendants",
                "type": "Array"
            },
            "class": "LS.CompositePattern",
            "namespace": "LS"
        },
        {
            "file": "../src/context.js",
            "line": 104,
            "description": "Loads an scene and triggers start",
            "itemtype": "method",
            "name": "loadScene",
            "params": [
                {
                    "name": "url",
                    "description": "url to the JSON file containing all the scene info",
                    "type": "String"
                },
                {
                    "name": "on_complete",
                    "description": "callback trigged when the scene and the resources are loaded",
                    "type": "Function"
                }
            ],
            "class": "LS.Context",
            "namespace": "LS"
        },
        {
            "file": "../src/context.js",
            "line": 124,
            "description": "loads Scene from object or JSON",
            "itemtype": "method",
            "name": "setScene",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "on_complete",
                    "description": "callback trigged when the scene and the resources are loaded",
                    "type": "Function"
                }
            ],
            "class": "LS.Context",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 34,
            "description": "Generates a UUID based in the user-agent, time, random and sequencial number. Used for Nodes and Components.",
            "itemtype": "method",
            "name": "generateUId",
            "return": {
                "description": "uuid",
                "type": "String"
            },
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 50,
            "description": "validates name string to ensure there is no forbidden characters",
            "itemtype": "method",
            "name": "validateName",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 64,
            "description": "Contains all the registered components",
            "itemtype": "property",
            "name": "Components",
            "type": "{Object}",
            "default": "{}",
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 73,
            "description": "Register a component so it is listed when searching for new components to attach",
            "itemtype": "method",
            "name": "registerComponent",
            "params": [
                {
                    "name": "comp",
                    "description": "component class to register",
                    "type": "ComponentClass"
                }
            ],
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 92,
            "description": "Tells you if one class is a registered component class",
            "itemtype": "method",
            "name": "isClassComponent",
            "params": [
                {
                    "name": "comp",
                    "description": "component class to evaluate",
                    "type": "ComponentClass"
                }
            ],
            "return": {
                "description": "true if the component class is registered",
                "type": "Boolean"
            },
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 105,
            "description": "Contains all the registered material classes",
            "itemtype": "property",
            "name": "MaterialClasses",
            "type": "{Object}",
            "default": "{}",
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 114,
            "description": "Register a Material class so it is listed when searching for new materials to attach",
            "itemtype": "method",
            "name": "registerMaterialClass",
            "params": [
                {
                    "name": "comp",
                    "description": "component class to register",
                    "type": "ComponentClass"
                }
            ],
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 132,
            "description": "Is a wrapper for setTimeout that throws an LS \"code_error\" in case something goes wrong (needed to catch the error from the system)",
            "itemtype": "method",
            "name": "setTimeout",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "time",
                    "description": "in ms",
                    "type": "Number"
                },
                {
                    "name": "timer_id",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 154,
            "description": "Is a wrapper for setInterval that throws an LS \"code_error\" in case something goes wrong (needed to catch the error from the system)",
            "itemtype": "method",
            "name": "setInterval",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "time",
                    "description": "in ms",
                    "type": "Number"
                },
                {
                    "name": "timer_id",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 176,
            "description": "copy the properties (methods and properties) of origin class into target class",
            "itemtype": "method",
            "name": "extendClass",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Class"
                },
                {
                    "name": "origin",
                    "description": "",
                    "type": "Class"
                }
            ],
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 211,
            "description": "Clones an object (no matter where the object came from)\n- It skip attributes starting with \"_\" or \"jQuery\" or functions\n- to the rest it applies JSON.parse( JSON.stringify ( obj ) )\n- use it carefully",
            "itemtype": "method",
            "name": "cloneObject",
            "params": [
                {
                    "name": "object",
                    "description": "the object to clone",
                    "type": "Object"
                },
                {
                    "name": "target=null",
                    "description": "optional, the destination object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "returns the cloned object",
                "type": "Object"
            },
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 270,
            "description": "Clears all the uids inside this object and children (it also works with serialized object)",
            "itemtype": "method",
            "name": "clearUIds",
            "params": [
                {
                    "name": "root",
                    "description": "could be a node or an object from a node serialization",
                    "type": "Object"
                }
            ],
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 310,
            "description": "Returns an object class name (uses the constructor toString)",
            "itemtype": "method",
            "name": "getObjectClassName",
            "params": [
                {
                    "name": "the",
                    "description": "object to see the class name",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "returns the string with the name",
                "type": "String"
            },
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 332,
            "description": "Returns an string with the class name",
            "itemtype": "method",
            "name": "getClassName",
            "params": [
                {
                    "name": "class",
                    "description": "object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "returns the string with the name",
                "type": "String"
            },
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 357,
            "description": "Returns the attributes of one object and the type",
            "itemtype": "method",
            "name": "getObjectAttributes",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "returns object with attribute name and its type",
                "type": "Object"
            },
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/core.js",
            "line": 471,
            "description": "Resamples a full curve in values (useful to upload to GPU array)",
            "itemtype": "method",
            "name": "resampleCurve",
            "params": [
                {
                    "name": "values",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "minx",
                    "description": "min x value",
                    "type": "Number"
                },
                {
                    "name": "maxx",
                    "description": "max x value",
                    "type": "Number"
                },
                {
                    "name": "defaulty",
                    "description": "default y value",
                    "type": "Number"
                },
                {
                    "name": "numsamples",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "LS.LS",
            "namespace": "LS"
        },
        {
            "file": "../src/network.js",
            "line": 2,
            "description": "A front-end for XMLHttpRequest so it is simpler and more cross-platform",
            "itemtype": "method",
            "name": "request",
            "params": [
                {
                    "name": "request",
                    "description": "object with the fields for the request: \n\t\t\tdataType: result type {text,xml,json,binary,arraybuffer,image}, data: object with form fields, callbacks supported: {success, error, progress}",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the XMLHttpRequest of the petition",
                "type": "XMLHttpRequest"
            },
            "class": "LS.PhysicsInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/network.js",
            "line": 116,
            "description": "retrieve a file from url (you can bind LEvents to done and fail)",
            "itemtype": "method",
            "name": "requestFile",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "form params",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "LS.PhysicsInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/network.js",
            "line": 133,
            "description": "retrieve a JSON file from url (you can bind LEvents to done and fail)",
            "itemtype": "method",
            "name": "requestJSON",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "form params",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "LS.PhysicsInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/network.js",
            "line": 150,
            "description": "retrieve a text file from url (you can bind LEvents to done and fail)",
            "itemtype": "method",
            "name": "requestText",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "form params",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "LS.PhysicsInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/physics.js",
            "line": 37,
            "description": "Computes the instance bounding box in world space from the one in local space",
            "itemtype": "method",
            "name": "updateAABB",
            "class": "LS.PhysicsInstance",
            "namespace": "LS"
        },
        {
            "file": "../src/picking.js",
            "line": 70,
            "description": "Renders the pixel and retrieves the color to detect which object it was, slow but accurate",
            "itemtype": "method",
            "name": "getNodeAtCanvasPosition",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "SceneTree"
                },
                {
                    "name": "camera",
                    "description": "",
                    "type": "Camera"
                },
                {
                    "name": "x",
                    "description": "in canvas coordinates",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "in canvas coordinates",
                    "type": "Number"
                }
            ],
            "class": "LS.Picking",
            "namespace": "LS"
        },
        {
            "file": "../src/picking.js",
            "line": 133,
            "description": "Computes the ray an traverses the scene checking for collisions with colliders\nsimilar to Physics.raycast but using only visible meshes",
            "itemtype": "method",
            "name": "raycast",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "SceneTree"
                },
                {
                    "name": "origin",
                    "description": "in world space",
                    "type": "Vec3"
                },
                {
                    "name": "direction",
                    "description": "in world space",
                    "type": "Vec3"
                },
                {
                    "name": "max_dist",
                    "description": "maxium distance",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "array containing all the RenderInstances that collided with the ray",
                "type": "Array"
            },
            "class": "LS.Picking",
            "namespace": "LS"
        },
        {
            "file": "../src/prefab.js",
            "line": 15,
            "description": "configure the prefab",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "LS.Prefab",
            "namespace": "LS"
        },
        {
            "file": "../src/prefab.js",
            "line": 75,
            "description": "Creates an instance of the object inside the prefab",
            "itemtype": "method",
            "name": "createObject",
            "return": {
                "description": "object contained"
            },
            "class": "LS.Prefab",
            "namespace": "LS"
        },
        {
            "file": "../src/prefab.js",
            "line": 98,
            "description": "to create a new prefab, it packs all the data an instantiates the resource",
            "itemtype": "method",
            "name": "createPrefab",
            "return": {
                "description": "object contained"
            },
            "class": "LS.Prefab",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 50,
            "description": "Returns a string to append to any url that should use the browser cache (when updating server info)",
            "itemtype": "method",
            "name": "getNoCache",
            "params": [
                {
                    "name": "force",
                    "description": "force to return a nocache string ignoring the default configuration",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "a string to attach to a url so the file wont be cached",
                "type": "String"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 60,
            "description": "Resets all the resources cached, so it frees the memory",
            "itemtype": "method",
            "name": "reset",
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 96,
            "description": "Returns the filename extension from an url",
            "itemtype": "method",
            "name": "getExtension",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "filename extension",
                "type": "String"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 115,
            "description": "Returns the filename from a full path",
            "itemtype": "method",
            "name": "getFilename",
            "params": [
                {
                    "name": "fullpath",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "filename extension",
                "type": "String"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 132,
            "description": "Returns the filename without the extension",
            "itemtype": "method",
            "name": "getBasename",
            "params": [
                {
                    "name": "fullpath",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "filename extension",
                "type": "String"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 147,
            "description": "Loads all the resources in the Object (it uses an object to store not only the filename but also the type)",
            "itemtype": "method",
            "name": "loadResources",
            "params": [
                {
                    "name": "resources",
                    "description": "contains all the resources, associated with its type",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "options to apply to the loaded resources",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                }
            ],
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 165,
            "description": "Set the base path where all the resources will be fetched (unless they have absolute URL)\nBy default it will use the website home address",
            "itemtype": "method",
            "name": "setPath",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 177,
            "description": "Set a proxy url where all non-local resources will be requested, allows to fetch assets to other servers.\nrequest will be in this form: proxy_url + \"/\" + url_with_protocol: ->   http://myproxy.com/google.com/images/...",
            "itemtype": "method",
            "name": "setProxy",
            "params": [
                {
                    "name": "proxy_url",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 192,
            "description": "transform a url to a full url taking into account proxy, virtual file systems and local_repository",
            "itemtype": "method",
            "name": "getFullURL",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "full url",
                "type": "String"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 240,
            "description": "Allows to associate a resource path like \"vfs:myfile.png\" to an url according to the value before the \":\".\nThis way we can have alias for different folders where the assets are stored.\nP.e:   \"e\",\"http://domain.com\"  -> will transform \"e:myfile.png\" in \"http://domain.com/myfile.png\"",
            "itemtype": "method",
            "name": "registerFileSystem",
            "params": [
                {
                    "name": "name",
                    "description": "the filesystem name (the string before the colons in the path)",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "the url to attach before",
                    "type": "String"
                }
            ],
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 254,
            "description": "Returns the resource if it has been loaded, if you want to force to load it, use load",
            "itemtype": "method",
            "name": "getResource",
            "params": [
                {
                    "name": "url",
                    "description": "where the resource is located (if its a relative url it depends on the path attribute)",
                    "type": "String"
                }
            ],
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 265,
            "description": "Loads a generic resource, the type will be infered from the extension, if it is json or wbin it will be processed\nDo not use to load regular files (txts, csv, etc), instead use the LS.Network methods",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "where the resource is located (if its a relative url it depends on the path attribute)",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "options to apply to the loaded resource when processing it",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                },
                {
                    "name": "on_complete",
                    "description": "callback when the resource is loaded and cached, params: callback( url, resource, options )",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 341,
            "description": "Process resource: transform some data in an Object ready to use and stores it (in most cases uploads it to the GPU)",
            "itemtype": "method",
            "name": "processResource",
            "params": [
                {
                    "name": "url",
                    "description": "where the resource is located (if its a relative url it depends on the path attribute)",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "the data of the resource (could be string, arraybuffer, image... )",
                    "type": "*"
                },
                {
                    "name": "options",
                    "description": "options to apply to the loaded resource",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                }
            ],
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 436,
            "description": "Stores the resource inside the manager containers. This way it will be retrieveble by anybody who needs it.",
            "itemtype": "method",
            "name": "registerResource",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "resource",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 471,
            "description": "removes the resources from all the containers",
            "itemtype": "method",
            "name": "unregisterResource",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true is removed, false if not found",
                "type": "Boolean"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 496,
            "description": "Returns an object with a representation of the resource internal data\nThe order to obtain that object is:\n1. test for _original_file (File or Blob)\n2. test for _original_data (ArrayBuffer)\n3. toBinary() (ArrayBuffer)\n4. toBlob() (Blob)\n5. toBase64() (String)\n6. serialize() (Object in JSON format)\n7. data property \n8. JSON.stringify(...)",
            "itemtype": "method",
            "name": "computeResourceInternalData",
            "params": [
                {
                    "name": "resource",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "it has two fields: data and encoding",
                "type": "Object"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 557,
            "description": "Used to load files and get them as File (or Blob)",
            "itemtype": "method",
            "name": "getURLasFile",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the file",
                "type": "File"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 576,
            "description": "Changes the name of a resource and sends an event to all components to change it accordingly",
            "itemtype": "method",
            "name": "renameResource",
            "params": [
                {
                    "name": "old",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "newname",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "skip_event",
                    "description": "ignore sending an event to all components to rename the resource",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "if the file was found",
                "type": "Boolean"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 610,
            "description": "Tells if it is loading resources",
            "itemtype": "method",
            "name": "isLoading",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 621,
            "description": "forces to try to reload again resources not found",
            "itemtype": "method",
            "name": "isLoading",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 673,
            "description": "returns a mesh resource if it is loaded",
            "itemtype": "method",
            "name": "getMesh",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Mesh"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/resourcesManager.js",
            "line": 686,
            "description": "returns a texture resource if it is loaded",
            "itemtype": "method",
            "name": "getTexture",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "LS.ResourcesManager",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 41,
            "description": "This initializes the content of the scene.\nCall it to clear the scene content",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": "Returns true on success",
                "type": "Boolean"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 86,
            "description": "Clears the scene using the init function\nand trigger a \"clear\" LEvent",
            "itemtype": "method",
            "name": "clear",
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 103,
            "description": "Fired when the whole scene is cleared",
            "itemtype": "event",
            "name": "clear",
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 112,
            "description": "Configure the Scene using an object (the object can be obtained from the function serialize)\nInserts the nodes, configure them, and change the parameters\nDestroys previously existing info",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "scene_info",
                    "description": "the object containing all the info about the nodes and config of the scene",
                    "type": "Object"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 187,
            "description": "Fired after the scene has been configured",
            "itemtype": "event",
            "name": "configure",
            "params": [
                {
                    "name": "scene_info",
                    "description": "contains all the info to do the configuration",
                    "type": "Object"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 196,
            "description": "Creates and object containing all the info about the scene and nodes.\nThe oposite of configure.\nIt calls the serialize method in every node",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "return a JS Object with all the scene info",
                "type": "Object"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 234,
            "description": "Fired after the scene has been serialized to an object",
            "itemtype": "event",
            "name": "serialize",
            "params": [
                {
                    "name": "object",
                    "description": "to store the persistent info",
                    "type": "Object"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 244,
            "description": "loads a scene from a JSON description",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "where the JSON object containing the scene is stored",
                    "type": "String"
                },
                {
                    "name": "on_complete",
                    "description": "the callback to call when the loading is complete",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "on_error",
                    "description": "the callback to call if there is a  loading error",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 269,
            "description": "Fired before loading scene",
            "itemtype": "event",
            "name": "beforeLoad",
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 280,
            "description": "Fired when the scene has been loaded but before the resources",
            "itemtype": "event",
            "name": "load",
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 291,
            "description": "Fired after all resources have been loaded",
            "itemtype": "event",
            "name": "loadCompleted",
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 374,
            "description": "Fired when a new node is added to this scene",
            "itemtype": "event",
            "name": "nodeAdded",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "LS.SceneNode"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 399,
            "description": "Fired after a node has been removed",
            "itemtype": "event",
            "name": "nodeRemoved",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "LS.SceneNode"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 416,
            "description": "retrieves a Node based on the name or uid",
            "itemtype": "method",
            "name": "getNode",
            "params": [
                {
                    "name": "id",
                    "description": "node id",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the node or null if it didnt find it",
                "type": "Object"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 432,
            "description": "retrieves a Node that matches that name. It is fast because they are stored in an object.\nIf more than one object has the same name, the first one added to the tree is returned",
            "itemtype": "method",
            "name": "getNodeByName",
            "params": [
                {
                    "name": "name",
                    "description": "name of the node",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the node or null if it didnt find it",
                "type": "Object"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 446,
            "description": "retrieves a Node based on a given uid. It is fast because they are stored in an object",
            "itemtype": "method",
            "name": "getNodeByUId",
            "params": [
                {
                    "name": "uid",
                    "description": "uid of the node",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the node or null if it didnt find it",
                "type": "Object"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 458,
            "description": "retrieves a Node by its index",
            "itemtype": "method",
            "name": "getNodeByIndex",
            "params": [
                {
                    "name": "node",
                    "description": "index",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "returns the node at the 'index' position in the nodes array",
                "type": "Object"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 473,
            "description": "retrieves a node array filtered by the filter function",
            "itemtype": "method",
            "name": "filterNodes",
            "params": [
                {
                    "name": "filter",
                    "description": "a callback function that receives every node and must return true or false",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "array containing the nodes that passes the filter",
                "type": "Array"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 489,
            "description": "searches the component with this uid, it iterates through all the nodes and components (slow)",
            "itemtype": "method",
            "name": "findComponentByUId",
            "params": [
                {
                    "name": "uid",
                    "description": "uid of the node",
                    "type": "String"
                }
            ],
            "return": {
                "description": "component or null",
                "type": "Object"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 507,
            "description": "Returns information of a node component property based on the locator of that property\nLocators are in the form of \"{NODE_UID}/{COMPONENT_UID}/{property_name}\"",
            "itemtype": "method",
            "name": "getPropertyInfo",
            "params": [
                {
                    "name": "locator",
                    "description": "locator of the property",
                    "type": "String"
                }
            ],
            "return": {
                "description": "object with node, component, name, and value",
                "type": "Object"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 527,
            "description": "Assigns a value to the property of a component in a node based on the locator of that property\nLocators are in the form of \"{NODE_UID}/{COMPONENT_UID}/{property_name}\"",
            "itemtype": "method",
            "name": "setPropertyValue",
            "params": [
                {
                    "name": "locator",
                    "description": "locator of the property",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value to assign",
                    "type": "*"
                },
                {
                    "name": "target",
                    "description": "[Optional] used to avoid searching for the component every time",
                    "type": "Component"
                }
            ],
            "return": {
                "description": "the target where the action was performed",
                "type": "Component"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 549,
            "description": "Assigns a value to the property of a component in a node based on the locator that property\nLocators are in the form of \"{NODE_UID}/{COMPONENT_UID}/{property_name}\"",
            "itemtype": "method",
            "name": "setPropertyValueFromPath",
            "params": [
                {
                    "name": "path",
                    "description": "a property locator split by \"/\"",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "the value to assign",
                    "type": "*"
                }
            ],
            "return": {
                "description": "the target where the action was performed",
                "type": "Component"
            },
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 569,
            "description": "loads all the resources of all the nodes in this scene\nit sends a signal to every node to get all the resources info\nand load them in bulk using the ResourceManager",
            "itemtype": "method",
            "name": "loadResources",
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 621,
            "description": "start the scene (triggers and start event)",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "dt",
                    "description": "delta time",
                    "type": "Number"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 633,
            "description": "Fired when the scene is starting to play",
            "itemtype": "event",
            "name": "start",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "LS.SceneTree"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 643,
            "description": "stop the scene (triggers and start event)",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "dt",
                    "description": "delta time",
                    "type": "Number"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 654,
            "description": "Fired when the scene stops playing",
            "itemtype": "event",
            "name": "stop",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "LS.SceneTree"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 666,
            "description": "renders the scene using the assigned renderer",
            "itemtype": "method",
            "name": "render",
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 799,
            "description": "Fired before doing an update",
            "itemtype": "event",
            "name": "beforeUpdate",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "LS.SceneTree"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 811,
            "description": "Fired while updating",
            "itemtype": "event",
            "name": "update",
            "params": [
                {
                    "name": "dt",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 820,
            "description": "Fired after updating the scene",
            "itemtype": "event",
            "name": "afterUpdate",
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 828,
            "description": "triggers an event to all nodes in the scene",
            "itemtype": "method",
            "name": "triggerInNodes",
            "params": [
                {
                    "name": "event_type",
                    "description": "event type name",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "data to send associated to the event",
                    "type": "Object"
                }
            ],
            "class": "LS.SceneTree",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 958,
            "description": "changes the node name",
            "itemtype": "method",
            "name": "setName",
            "params": [
                {
                    "name": "new_name",
                    "description": "the new name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "returns true if the name changed",
                "type": "Object"
            },
            "class": "LS.SceneNode",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1034,
            "description": "Node changed name",
            "itemtype": "event",
            "name": "name_changed",
            "params": [
                {
                    "name": "new_name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LS.SceneNode",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1052,
            "itemtype": "property",
            "name": "className",
            "type": "String",
            "class": "LS.SceneNode",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1335,
            "description": "remember clones this node and returns the new copy (you need to add it to the scene to see it)",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "returns a cloned version of this node",
                "type": "Object"
            },
            "class": "LS.SceneNode",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1358,
            "description": "Configure this node from an object containing the info",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "info",
                    "description": "the object with all the info (comes from the serialize method)",
                    "type": "Object"
                }
            ],
            "class": "LS.SceneNode",
            "namespace": "LS"
        },
        {
            "file": "../src/scene.js",
            "line": 1446,
            "description": "Serializes this node by creating an object with all the info\nit contains info about the components too",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "returns the object with the info",
                "type": "Object"
            },
            "class": "LS.SceneNode",
            "namespace": "LS"
        }
    ],
    "warnings": [
        {
            "message": "param name missing: {bool}",
            "line": " ../src/componentContainer.js:155"
        },
        {
            "message": "Missing item type",
            "line": " ../src/helpers/animation.js:137"
        }
    ]
}